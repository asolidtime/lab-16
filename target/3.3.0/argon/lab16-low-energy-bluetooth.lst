
/home/maxwell/CTD-IoT/d9/lab16-low-energy-bluetooth/target/3.3.0/argon/lab16-low-energy-bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b93f0  000b93f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9414  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e570  000b9418  0001e570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000214  2003e5e0  2003e5e0  0002e5e0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b9484  000b9484  00029484  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b94ac  000b94ac  000294ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015bc41  00000000  00000000  000294b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00017abb  00000000  00000000  001850f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003618  00000000  00000000  0019cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0003f1f7  00000000  00000000  001a01c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0004f248  00000000  00000000  001df3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00146a1d  00000000  00000000  0022e603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0004b35a  00000000  00000000  00375020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000c4f0  00000000  00000000  003c037a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009eb0  00000000  00000000  003cc86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f861 	bl	b80f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 f883 	bl	b8144 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e570 	.word	0x2003e570
   b4048:	000b9418 	.word	0x000b9418
   b404c:	2003e5dc 	.word	0x2003e5dc
   b4050:	2003e5e0 	.word	0x2003e5e0
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f98f 	bl	b6380 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b93c8 	.word	0x000b93c8
   b407c:	000b93ec 	.word	0x000b93ec

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b822 	b.w	b40c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f883 	bl	b4190 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b92f 	b.w	b62f0 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bdf9 	b.w	b5c88 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bdf7 	b.w	b5c88 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bdfd 	b.w	b5c98 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fd4a 	bl	b5b40 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5a91 	.word	0x000b5a91
   b40b4:	000b82f4 	.word	0x000b82f4

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <setup>:
    BLE.disconnect();
  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   b40c8:	b570      	push	{r4, r5, r6, lr}
   b40ca:	b090      	sub	sp, #64	; 0x40
  // Put initialization like pinMode and begin functions here.
  BLE.on();
   b40cc:	f002 fd88 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40d0:	f002 fdd0 	bl	b6c74 <_ZNK8particle14BleLocalDevice2onEv>
  display.setup();
   b40d4:	4829      	ldr	r0, [pc, #164]	; (b417c <setup+0xb4>)
   b40d6:	4c2a      	ldr	r4, [pc, #168]	; (b4180 <setup+0xb8>)
   b40d8:	f000 fef0 	bl	b4ebc <_ZN16OledWingAdafruit5setupEv>
  //in setup
  BLE.addCharacteristic(txCharacteristic);
   b40dc:	f002 fd80 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40e0:	4a28      	ldr	r2, [pc, #160]	; (b4184 <setup+0xbc>)
   b40e2:	4601      	mov	r1, r0
   b40e4:	a80b      	add	r0, sp, #44	; 0x2c
   b40e6:	f003 fae7 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40ea:	a80b      	add	r0, sp, #44	; 0x2c
   b40ec:	f002 fe67 	bl	b6dbe <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b40f0:	f002 fd76 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40f4:	4a24      	ldr	r2, [pc, #144]	; (b4188 <setup+0xc0>)
   b40f6:	4601      	mov	r1, r0
   b40f8:	a80b      	add	r0, sp, #44	; 0x2c
   b40fa:	f003 fadd 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40fe:	a80b      	add	r0, sp, #44	; 0x2c
   b4100:	f002 fe5d 	bl	b6dbe <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   b4104:	a803      	add	r0, sp, #12
   b4106:	f002 ff80 	bl	b700a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b410a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b410c:	ad06      	add	r5, sp, #24
   b410e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4110:	ad06      	add	r5, sp, #24
   b4112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4114:	6826      	ldr	r6, [r4, #0]
   b4116:	ac0b      	add	r4, sp, #44	; 0x2c
   b4118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b411a:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b411c:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b411e:	f002 fb73 	bl	b6808 <_ZNK8particle7BleUuid4typeEv>
   b4122:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4124:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4126:	bb04      	cbnz	r4, b416a <setup+0xa2>
            uint16_t uuid16 = tempUUID.shorted();
   b4128:	f002 fb8a 	bl	b6840 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b412c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b412e:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4132:	2302      	movs	r3, #2
   b4134:	f10d 020a 	add.w	r2, sp, #10
   b4138:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b413a:	a803      	add	r0, sp, #12
   b413c:	f002 ff5a 	bl	b6ff4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  data.appendLocalName("maximus");  //max 8 characters 
   b4140:	4912      	ldr	r1, [pc, #72]	; (b418c <setup+0xc4>)
   b4142:	a803      	add	r0, sp, #12
   b4144:	f002 ff74 	bl	b7030 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
  BLE.advertise(&data);
   b4148:	f002 fd4a 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b414c:	a903      	add	r1, sp, #12
   b414e:	2200      	movs	r2, #0
   b4150:	f002 fde1 	bl	b6d16 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  uint8_t txBuf[10]; // an array of 10 bytes we can send
  txCharacteristic.setValue(txBuf, 10);  // here we are sending all 10 bytes
   b4154:	2300      	movs	r3, #0
   b4156:	220a      	movs	r2, #10
   b4158:	a90b      	add	r1, sp, #44	; 0x2c
   b415a:	480a      	ldr	r0, [pc, #40]	; (b4184 <setup+0xbc>)
   b415c:	f002 fc30 	bl	b69c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4160:	9803      	ldr	r0, [sp, #12]
   b4162:	f001 fd99 	bl	b5c98 <free>
  
}
   b4166:	b010      	add	sp, #64	; 0x40
   b4168:	bd70      	pop	{r4, r5, r6, pc}
   b416a:	f002 fb6b 	bl	b6844 <_ZNK8particle7BleUuid8rawBytesEv>
   b416e:	2300      	movs	r3, #0
   b4170:	9300      	str	r3, [sp, #0]
   b4172:	4602      	mov	r2, r0
   b4174:	2310      	movs	r3, #16
   b4176:	2107      	movs	r1, #7
   b4178:	e7df      	b.n	b413a <setup+0x72>
   b417a:	bf00      	nop
   b417c:	2003e628 	.word	0x2003e628
   b4180:	2003e5ec 	.word	0x2003e5ec
   b4184:	2003e6a8 	.word	0x2003e6a8
   b4188:	2003e6a0 	.word	0x2003e6a0
   b418c:	000b8309 	.word	0x000b8309

000b4190 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4190:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   b4192:	4c27      	ldr	r4, [pc, #156]	; (b4230 <loop+0xa0>)
  if (millis() - 1000 >= lastTime) {
   b4194:	4d27      	ldr	r5, [pc, #156]	; (b4234 <loop+0xa4>)
void loop() {
   b4196:	b08a      	sub	sp, #40	; 0x28
  display.loop();
   b4198:	4620      	mov	r0, r4
   b419a:	f000 feb8 	bl	b4f0e <_ZN16OledWingAdafruit4loopEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b419e:	f001 fc7f 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - 1000 >= lastTime) {
   b41a2:	e9d5 2300 	ldrd	r2, r3, [r5]
   b41a6:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
   b41aa:	2600      	movs	r6, #0
   b41ac:	4290      	cmp	r0, r2
   b41ae:	eb76 0303 	sbcs.w	r3, r6, r3
   b41b2:	d333      	bcc.n	b421c <loop+0x8c>
    display.clearDisplay();
   b41b4:	4620      	mov	r0, r4
   b41b6:	f000 fadf 	bl	b4778 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b41ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setCursor(0, 0);
    display.setTextColor(WHITE);
    display.setTextSize(1);
   b41be:	2101      	movs	r1, #1
   b41c0:	4620      	mov	r0, r4
   b41c2:	6163      	str	r3, [r4, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b41c4:	6126      	str	r6, [r4, #16]
   b41c6:	f001 fa98 	bl	b56fa <_ZN12Adafruit_GFX11setTextSizeEh>
    if (BLE.connected()) {
   b41ca:	f002 fd09 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ce:	f002 fd61 	bl	b6c94 <_ZNK8particle14BleLocalDevice9connectedEv>
   b41d2:	b328      	cbz	r0, b4220 <loop+0x90>
      RGB.color(RGB_COLOR_BLUE);
   b41d4:	20ff      	movs	r0, #255	; 0xff
   b41d6:	f002 f918 	bl	b640a <_ZN8RGBClass5colorEm>
      display.println("connected");
   b41da:	4917      	ldr	r1, [pc, #92]	; (b4238 <loop+0xa8>)
   b41dc:	4620      	mov	r0, r4
   b41de:	f002 f96e 	bl	b64be <_ZN5Print7printlnEPKc>
    	uint8_t txBuf[UART_TX_BUF_SIZE];
      String message = "Hello!\n";
   b41e2:	4916      	ldr	r1, [pc, #88]	; (b423c <loop+0xac>)
   b41e4:	a801      	add	r0, sp, #4
   b41e6:	f003 fbc2 	bl	b796e <_ZN6StringC1EPK19__FlashStringHelper>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b41ea:	9a03      	ldr	r2, [sp, #12]
   b41ec:	4633      	mov	r3, r6
   b41ee:	3201      	adds	r2, #1
   b41f0:	a905      	add	r1, sp, #20
   b41f2:	a801      	add	r0, sp, #4
   b41f4:	f003 fc05 	bl	b7a02 <_ZNK6String8getBytesEPhjj>
      message.toCharArray((char *)txBuf, message.length() + 1);
      txCharacteristic.setValue(txBuf, message.length() + 1); 
   b41f8:	9a03      	ldr	r2, [sp, #12]
   b41fa:	4811      	ldr	r0, [pc, #68]	; (b4240 <loop+0xb0>)
   b41fc:	4633      	mov	r3, r6
   b41fe:	3201      	adds	r2, #1
   b4200:	a905      	add	r1, sp, #20
   b4202:	f002 fbdd 	bl	b69c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      String message = "Hello!\n";
   b4206:	a801      	add	r0, sp, #4
   b4208:	f003 fb66 	bl	b78d8 <_ZN6StringD1Ev>
    } else {
      RGB.color(RGB_COLOR_YELLOW);
      display.println("advertising");
    }
    display.display();
   b420c:	4808      	ldr	r0, [pc, #32]	; (b4230 <loop+0xa0>)
   b420e:	f000 fd21 	bl	b4c54 <_ZN16Adafruit_SSD13067displayEv>
   b4212:	f001 fc45 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b4216:	2300      	movs	r3, #0
   b4218:	6028      	str	r0, [r5, #0]
   b421a:	606b      	str	r3, [r5, #4]
  }
   b421c:	b00a      	add	sp, #40	; 0x28
   b421e:	bd70      	pop	{r4, r5, r6, pc}
      RGB.color(RGB_COLOR_YELLOW);
   b4220:	4808      	ldr	r0, [pc, #32]	; (b4244 <loop+0xb4>)
   b4222:	f002 f8f2 	bl	b640a <_ZN8RGBClass5colorEm>
      display.println("advertising");
   b4226:	4908      	ldr	r1, [pc, #32]	; (b4248 <loop+0xb8>)
   b4228:	4620      	mov	r0, r4
   b422a:	f002 f948 	bl	b64be <_ZN5Print7printlnEPKc>
   b422e:	e7ed      	b.n	b420c <loop+0x7c>
   b4230:	2003e628 	.word	0x2003e628
   b4234:	2003e698 	.word	0x2003e698
   b4238:	000b8311 	.word	0x000b8311
   b423c:	000b831b 	.word	0x000b831b
   b4240:	2003e6a8 	.word	0x2003e6a8
   b4244:	00ffff00 	.word	0x00ffff00
   b4248:	000b8323 	.word	0x000b8323

000b424c <_GLOBAL__sub_I_SystemMode>:
   b424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
SYSTEM_THREAD(ENABLED);
   b4250:	2100      	movs	r1, #0
   b4252:	b098      	sub	sp, #96	; 0x60
SYSTEM_THREAD(ENABLED);
   b4254:	2001      	movs	r0, #1
   b4256:	f001 fcfb 	bl	b5c50 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b425a:	4b3d      	ldr	r3, [pc, #244]	; (b4350 <_GLOBAL__sub_I_SystemMode+0x104>)
    SleepResult() {}
   b425c:	4a3d      	ldr	r2, [pc, #244]	; (b4354 <_GLOBAL__sub_I_SystemMode+0x108>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b425e:	4c3e      	ldr	r4, [pc, #248]	; (b4358 <_GLOBAL__sub_I_SystemMode+0x10c>)
   b4260:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4262:	2700      	movs	r7, #0
   b4264:	e9c3 7700 	strd	r7, r7, [r3]
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4268:	4d3c      	ldr	r5, [pc, #240]	; (b435c <_GLOBAL__sub_I_SystemMode+0x110>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b426a:	4e3d      	ldr	r6, [pc, #244]	; (b4360 <_GLOBAL__sub_I_SystemMode+0x114>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b426c:	2003      	movs	r0, #3
   b426e:	f001 fcdf 	bl	b5c30 <set_system_mode>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4272:	493c      	ldr	r1, [pc, #240]	; (b4364 <_GLOBAL__sub_I_SystemMode+0x118>)
   b4274:	4620      	mov	r0, r4
   b4276:	f002 fb65 	bl	b6944 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b427a:	493b      	ldr	r1, [pc, #236]	; (b4368 <_GLOBAL__sub_I_SystemMode+0x11c>)
   b427c:	4628      	mov	r0, r5
   b427e:	f002 fb61 	bl	b6944 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4282:	493a      	ldr	r1, [pc, #232]	; (b436c <_GLOBAL__sub_I_SystemMode+0x120>)
   b4284:	4630      	mov	r0, r6
   b4286:	f002 fb5d 	bl	b6944 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b428a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b428c:	f10d 0c10 	add.w	ip, sp, #16
   b4290:	46a0      	mov	r8, r4
   b4292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4296:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b429a:	f8d6 a000 	ldr.w	sl, [r6]
   b429e:	f8cc a000 	str.w	sl, [ip]
   b42a2:	ae09      	add	r6, sp, #36	; 0x24
   b42a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b42a6:	f10d 0c10 	add.w	ip, sp, #16
   b42aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b42ae:	f8d8 9000 	ldr.w	r9, [r8]
   b42b2:	f8c6 9000 	str.w	r9, [r6]
   b42b6:	ae0e      	add	r6, sp, #56	; 0x38
   b42b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b42ba:	f8df e0c4 	ldr.w	lr, [pc, #196]	; b4380 <_GLOBAL__sub_I_SystemMode+0x134>
   b42be:	f8c6 a000 	str.w	sl, [r6]
        BleUuid sUuid(svcUuid);
   b42c2:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b42c6:	e9ce 7700 	strd	r7, r7, [lr]
   b42ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b42ce:	ae13      	add	r6, sp, #76	; 0x4c
   b42d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b42d2:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b42d6:	ae13      	add	r6, sp, #76	; 0x4c
   b42d8:	ab0e      	add	r3, sp, #56	; 0x38
   b42da:	4670      	mov	r0, lr
   b42dc:	e9cd 7701 	strd	r7, r7, [sp, #4]
   b42e0:	4923      	ldr	r1, [pc, #140]	; (b4370 <_GLOBAL__sub_I_SystemMode+0x124>)
   b42e2:	9600      	str	r6, [sp, #0]
   b42e4:	f04f 0210 	mov.w	r2, #16
   b42e8:	f003 f8bc 	bl	b7464 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b42ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42ee:	f10d 0c10 	add.w	ip, sp, #16
   b42f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b42f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42f8:	f8d5 e000 	ldr.w	lr, [r5]
   b42fc:	f8d8 8000 	ldr.w	r8, [r8]
   b4300:	f8cc e000 	str.w	lr, [ip]
   b4304:	ad09      	add	r5, sp, #36	; 0x24
   b4306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4308:	f8c5 8000 	str.w	r8, [r5]
        BleUuid cUuid(charUuid);
   b430c:	ad04      	add	r5, sp, #16
   b430e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4310:	ac0e      	add	r4, sp, #56	; 0x38
   b4312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4314:	f8df c06c 	ldr.w	ip, [pc, #108]	; b4384 <_GLOBAL__sub_I_SystemMode+0x138>
   b4318:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b431c:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b431e:	e9cc 7700 	strd	r7, r7, [ip]
   b4322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4324:	4634      	mov	r4, r6
   b4326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4328:	4b12      	ldr	r3, [pc, #72]	; (b4374 <_GLOBAL__sub_I_SystemMode+0x128>)
        BleUuid sUuid(svcUuid);
   b432a:	f8c4 8000 	str.w	r8, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b432e:	4660      	mov	r0, ip
   b4330:	e9cd 6300 	strd	r6, r3, [sp]
   b4334:	4910      	ldr	r1, [pc, #64]	; (b4378 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b4336:	9702      	str	r7, [sp, #8]
   b4338:	ab0e      	add	r3, sp, #56	; 0x38
   b433a:	f04f 0204 	mov.w	r2, #4
   b433e:	f003 f891 	bl	b7464 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
OledWingAdafruit display;
   b4342:	480e      	ldr	r0, [pc, #56]	; (b437c <_GLOBAL__sub_I_SystemMode+0x130>)
   b4344:	2107      	movs	r1, #7
   b4346:	b018      	add	sp, #96	; 0x60
   b4348:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
OledWingAdafruit display;
   b434c:	f000 bd88 	b.w	b4e60 <_ZN16OledWingAdafruitC1Ei>
   b4350:	2003e5e0 	.word	0x2003e5e0
   b4354:	ffff0000 	.word	0xffff0000
   b4358:	2003e5ec 	.word	0x2003e5ec
   b435c:	2003e600 	.word	0x2003e600
   b4360:	2003e614 	.word	0x2003e614
   b4364:	000b832f 	.word	0x000b832f
   b4368:	000b8354 	.word	0x000b8354
   b436c:	000b8379 	.word	0x000b8379
   b4370:	000b839e 	.word	0x000b839e
   b4374:	000b4389 	.word	0x000b4389
   b4378:	000b83a1 	.word	0x000b83a1
   b437c:	2003e628 	.word	0x2003e628
   b4380:	2003e6a8 	.word	0x2003e6a8
   b4384:	2003e6a0 	.word	0x2003e6a0

000b4388 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4388:	b530      	push	{r4, r5, lr}
   b438a:	b085      	sub	sp, #20
  if (String(data[0]).equals("49")) { // i could probably ditch string conversion but this works and honestly I'm tired of doing this lab lol
   b438c:	7801      	ldrb	r1, [r0, #0]
   b438e:	220a      	movs	r2, #10
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4390:	4604      	mov	r4, r0
  if (String(data[0]).equals("49")) { // i could probably ditch string conversion but this works and honestly I'm tired of doing this lab lol
   b4392:	4668      	mov	r0, sp
   b4394:	f003 fb11 	bl	b79ba <_ZN6StringC1Ehh>
   b4398:	491a      	ldr	r1, [pc, #104]	; (b4404 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b439a:	4668      	mov	r0, sp
   b439c:	f003 fb1f 	bl	b79de <_ZNK6String6equalsEPKc>
   b43a0:	4605      	mov	r5, r0
   b43a2:	4668      	mov	r0, sp
   b43a4:	f003 fa98 	bl	b78d8 <_ZN6StringD1Ev>
   b43a8:	b1ad      	cbz	r5, b43d6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
    display.fillScreen(WHITE);
   b43aa:	4c17      	ldr	r4, [pc, #92]	; (b4408 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b43ac:	2101      	movs	r1, #1
   b43ae:	4620      	mov	r0, r4
   b43b0:	f000 feaa 	bl	b5108 <_ZN12Adafruit_GFX10fillScreenEt>
   b43b4:	2300      	movs	r3, #0
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b43b6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    display.setTextSize(4);
   b43ba:	4620      	mov	r0, r4
   b43bc:	2104      	movs	r1, #4
   b43be:	f001 f99c 	bl	b56fa <_ZN12Adafruit_GFX11setTextSizeEh>
    display.println("Hell");
   b43c2:	4912      	ldr	r1, [pc, #72]	; (b440c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b43c4:	4620      	mov	r0, r4
   b43c6:	f002 f87a 	bl	b64be <_ZN5Print7printlnEPKc>
    display.display();
   b43ca:	4620      	mov	r0, r4
}
   b43cc:	b005      	add	sp, #20
   b43ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    display.display();
   b43d2:	f000 bc3f 	b.w	b4c54 <_ZN16Adafruit_SSD13067displayEv>
  } else if (String(data[0]).equals("48")) {
   b43d6:	7821      	ldrb	r1, [r4, #0]
   b43d8:	220a      	movs	r2, #10
   b43da:	4668      	mov	r0, sp
   b43dc:	f003 faed 	bl	b79ba <_ZN6StringC1Ehh>
   b43e0:	490b      	ldr	r1, [pc, #44]	; (b4410 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b43e2:	4668      	mov	r0, sp
   b43e4:	f003 fafb 	bl	b79de <_ZNK6String6equalsEPKc>
   b43e8:	4604      	mov	r4, r0
   b43ea:	4668      	mov	r0, sp
   b43ec:	f003 fa74 	bl	b78d8 <_ZN6StringD1Ev>
   b43f0:	b134      	cbz	r4, b4400 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>
    BLE.disconnect();
   b43f2:	f002 fbf5 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
}
   b43f6:	b005      	add	sp, #20
   b43f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BLE.disconnect();
   b43fc:	f002 bfac 	b.w	b7358 <_ZNK8particle14BleLocalDevice10disconnectEv>
}
   b4400:	b005      	add	sp, #20
   b4402:	bd30      	pop	{r4, r5, pc}
   b4404:	000b83a4 	.word	0x000b83a4
   b4408:	2003e628 	.word	0x2003e628
   b440c:	000b83a7 	.word	0x000b83a7
   b4410:	000b83ac 	.word	0x000b83ac

000b4414 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4414:	4770      	bx	lr

000b4416 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4416:	b510      	push	{r4, lr}
  }
   b4418:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b441a:	4604      	mov	r4, r0
  }
   b441c:	f7ff fe3d 	bl	b409a <_ZdlPvj>
   b4420:	4620      	mov	r0, r4
   b4422:	bd10      	pop	{r4, pc}

000b4424 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4424:	b510      	push	{r4, lr}
   b4426:	4b04      	ldr	r3, [pc, #16]	; (b4438 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4428:	6003      	str	r3, [r0, #0]
   b442a:	4604      	mov	r4, r0
  if(buffer) {
   b442c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b442e:	b108      	cbz	r0, b4434 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4430:	f001 fc32 	bl	b5c98 <free>
    buffer = NULL;
  }
}
   b4434:	4620      	mov	r0, r4
   b4436:	bd10      	pop	{r4, pc}
   b4438:	000b88b0 	.word	0x000b88b0

000b443c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b443c:	b510      	push	{r4, lr}
   b443e:	4604      	mov	r4, r0
}
   b4440:	f7ff fff0 	bl	b4424 <_ZN16Adafruit_SSD1306D1Ev>
   b4444:	4620      	mov	r0, r4
   b4446:	2150      	movs	r1, #80	; 0x50
   b4448:	f7ff fe27 	bl	b409a <_ZdlPvj>
   b444c:	4620      	mov	r0, r4
   b444e:	bd10      	pop	{r4, pc}

000b4450 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4450:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4452:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4454:	db4b      	blt.n	b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4456:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b445a:	428c      	cmp	r4, r1
   b445c:	dd47      	ble.n	b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b445e:	2a00      	cmp	r2, #0
   b4460:	db45      	blt.n	b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4462:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4466:	4294      	cmp	r4, r2
   b4468:	dd41      	ble.n	b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b446a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b446c:	2c02      	cmp	r4, #2
   b446e:	d01f      	beq.n	b44b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4470:	2c03      	cmp	r4, #3
   b4472:	d026      	beq.n	b44c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4474:	2c01      	cmp	r4, #1
   b4476:	d104      	bne.n	b4482 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4478:	8904      	ldrh	r4, [r0, #8]
   b447a:	43d2      	mvns	r2, r2
   b447c:	4414      	add	r4, r2
      break;
   b447e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4480:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4482:	2b01      	cmp	r3, #1
   b4484:	d023      	beq.n	b44ce <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4486:	2b02      	cmp	r3, #2
   b4488:	d032      	beq.n	b44f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b448a:	bb83      	cbnz	r3, b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b448c:	2a00      	cmp	r2, #0
   b448e:	4613      	mov	r3, r2
   b4490:	8904      	ldrh	r4, [r0, #8]
   b4492:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4494:	bfb8      	it	lt
   b4496:	1dd3      	addlt	r3, r2, #7
   b4498:	10db      	asrs	r3, r3, #3
   b449a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b449e:	f002 0207 	and.w	r2, r2, #7
   b44a2:	2301      	movs	r3, #1
   b44a4:	4093      	lsls	r3, r2
   b44a6:	5c42      	ldrb	r2, [r0, r1]
   b44a8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b44ac:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b44ae:	e01e      	b.n	b44ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b44b0:	8904      	ldrh	r4, [r0, #8]
   b44b2:	3c01      	subs	r4, #1
   b44b4:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b44b6:	8944      	ldrh	r4, [r0, #10]
   b44b8:	43d2      	mvns	r2, r2
   b44ba:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b44bc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b44be:	b212      	sxth	r2, r2
      break;
   b44c0:	e7df      	b.n	b4482 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b44c2:	8944      	ldrh	r4, [r0, #10]
   b44c4:	3c01      	subs	r4, #1
   b44c6:	1a64      	subs	r4, r4, r1
      break;
   b44c8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b44ca:	b222      	sxth	r2, r4
      break;
   b44cc:	e7d9      	b.n	b4482 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b44ce:	2a00      	cmp	r2, #0
   b44d0:	8904      	ldrh	r4, [r0, #8]
   b44d2:	4613      	mov	r3, r2
   b44d4:	bfb8      	it	lt
   b44d6:	1dd3      	addlt	r3, r2, #7
   b44d8:	10db      	asrs	r3, r3, #3
   b44da:	fb13 1104 	smlabb	r1, r3, r4, r1
   b44de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b44e0:	f002 0007 	and.w	r0, r2, #7
   b44e4:	2201      	movs	r2, #1
   b44e6:	4082      	lsls	r2, r0
   b44e8:	5c58      	ldrb	r0, [r3, r1]
   b44ea:	4302      	orrs	r2, r0
   b44ec:	545a      	strb	r2, [r3, r1]
}
   b44ee:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b44f0:	2a00      	cmp	r2, #0
   b44f2:	4613      	mov	r3, r2
   b44f4:	8904      	ldrh	r4, [r0, #8]
   b44f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b44f8:	bfb8      	it	lt
   b44fa:	1dd3      	addlt	r3, r2, #7
   b44fc:	10db      	asrs	r3, r3, #3
   b44fe:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4502:	f002 0207 	and.w	r2, r2, #7
   b4506:	2301      	movs	r3, #1
   b4508:	fa03 f202 	lsl.w	r2, r3, r2
   b450c:	5c43      	ldrb	r3, [r0, r1]
   b450e:	405a      	eors	r2, r3
   b4510:	e7cc      	b.n	b44ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000b4512 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4512:	b40e      	push	{r1, r2, r3}
   b4514:	b503      	push	{r0, r1, lr}
   b4516:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4518:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b451a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b451e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4520:	f001 fff5 	bl	b650e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4524:	b002      	add	sp, #8
   b4526:	f85d eb04 	ldr.w	lr, [sp], #4
   b452a:	b003      	add	sp, #12
   b452c:	4770      	bx	lr
	...

000b4530 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4532:	4604      	mov	r4, r0
   b4534:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4536:	7922      	ldrb	r2, [r4, #4]
   b4538:	68a3      	ldr	r3, [r4, #8]
   b453a:	b132      	cbz	r2, b454a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b453c:	b9a3      	cbnz	r3, b4568 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b453e:	490b      	ldr	r1, [pc, #44]	; (b456c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4540:	b002      	add	sp, #8
   b4542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4546:	f001 bfa7 	b.w	b6498 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b454a:	4a09      	ldr	r2, [pc, #36]	; (b4570 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b454c:	7b26      	ldrb	r6, [r4, #12]
   b454e:	4d09      	ldr	r5, [pc, #36]	; (b4574 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4550:	4909      	ldr	r1, [pc, #36]	; (b4578 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4552:	7b64      	ldrb	r4, [r4, #13]
   b4554:	2e01      	cmp	r6, #1
   b4556:	bf18      	it	ne
   b4558:	4629      	movne	r1, r5
   b455a:	e9cd 1400 	strd	r1, r4, [sp]
   b455e:	4907      	ldr	r1, [pc, #28]	; (b457c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4560:	f7ff ffd7 	bl	b4512 <_ZN5Print6printfEPKcz>
  }
   b4564:	b002      	add	sp, #8
   b4566:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4568:	4a05      	ldr	r2, [pc, #20]	; (b4580 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b456a:	e7ef      	b.n	b454c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b456c:	000b83c0 	.word	0x000b83c0
   b4570:	000b8322 	.word	0x000b8322
   b4574:	000b83bc 	.word	0x000b83bc
   b4578:	000b83b8 	.word	0x000b83b8
   b457c:	000b83d6 	.word	0x000b83d6
   b4580:	000b83af 	.word	0x000b83af

000b4584 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4584:	b570      	push	{r4, r5, r6, lr}
   b4586:	4604      	mov	r4, r0
   b4588:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b458a:	2600      	movs	r6, #0
   b458c:	f000 fe5c 	bl	b5248 <_ZN12Adafruit_GFXC1Ess>
   b4590:	4b11      	ldr	r3, [pc, #68]	; (b45d8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4592:	6023      	str	r3, [r4, #0]
   b4594:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4596:	b915      	cbnz	r5, b459e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4598:	f003 fba0 	bl	b7cdc <_Z19__fetch_global_Wirev>
   b459c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b459e:	23ff      	movs	r3, #255	; 0xff
   b45a0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b45a4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b45a8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b45ac:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b45b0:	4b0a      	ldr	r3, [pc, #40]	; (b45dc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b45b2:	63a3      	str	r3, [r4, #56]	; 0x38
   b45b4:	2301      	movs	r3, #1
   b45b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b45ba:	9b05      	ldr	r3, [sp, #20]
   b45bc:	64a3      	str	r3, [r4, #72]	; 0x48
   b45be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b45c2:	9b06      	ldr	r3, [sp, #24]
   b45c4:	86a2      	strh	r2, [r4, #52]	; 0x34
   b45c6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b45ca:	6426      	str	r6, [r4, #64]	; 0x40
   b45cc:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b45d0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b45d2:	4620      	mov	r0, r4
   b45d4:	bd70      	pop	{r4, r5, r6, pc}
   b45d6:	bf00      	nop
   b45d8:	000b88b0 	.word	0x000b88b0
   b45dc:	000b83fc 	.word	0x000b83fc

000b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b45e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b45e2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b45e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b45e6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b45e8:	b190      	cbz	r0, b4610 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b45ea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b45ee:	f001 fd2d 	bl	b604c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b45f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b45f4:	6803      	ldr	r3, [r0, #0]
   b45f6:	2100      	movs	r1, #0
   b45f8:	689b      	ldr	r3, [r3, #8]
   b45fa:	4798      	blx	r3
    WIRE_WRITE(c);
   b45fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b45fe:	6803      	ldr	r3, [r0, #0]
   b4600:	4629      	mov	r1, r5
   b4602:	689b      	ldr	r3, [r3, #8]
   b4604:	4798      	blx	r3
    wire->endTransmission();
   b4606:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b460c:	f001 bd25 	b.w	b605a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4610:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4614:	4601      	mov	r1, r0
   b4616:	b298      	uxth	r0, r3
   b4618:	f003 fc13 	bl	b7e42 <digitalWrite>
  if(spi) {
   b461c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b461e:	b120      	cbz	r0, b462a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4620:	4629      	mov	r1, r5
}
   b4622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4626:	f003 bafd 	b.w	b7c24 <_ZN8SPIClass8transferEh>
   b462a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b462c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b462e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4632:	ea05 0107 	and.w	r1, r5, r7
   b4636:	b280      	uxth	r0, r0
   b4638:	f003 fc03 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b463c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4640:	2101      	movs	r1, #1
   b4642:	b280      	uxth	r0, r0
   b4644:	f003 fbfd 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4648:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b464c:	2100      	movs	r1, #0
   b464e:	b280      	uxth	r0, r0
   b4650:	f003 fbf7 	bl	b7e42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4654:	3e01      	subs	r6, #1
   b4656:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b465a:	d1e8      	bne.n	b462e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b465e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b465e:	b538      	push	{r3, r4, r5, lr}
   b4660:	4604      	mov	r4, r0
  TRANSACTION_START
   b4662:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4664:	460d      	mov	r5, r1
  TRANSACTION_START
   b4666:	b180      	cbz	r0, b468a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4668:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b466a:	f001 fce1 	bl	b6030 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b466e:	2d00      	cmp	r5, #0
   b4670:	4620      	mov	r0, r4
   b4672:	bf14      	ite	ne
   b4674:	21a7      	movne	r1, #167	; 0xa7
   b4676:	21a6      	moveq	r1, #166	; 0xa6
   b4678:	f7ff ffb2 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b467c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b467e:	b188      	cbz	r0, b46a4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4680:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4686:	f001 bcd3 	b.w	b6030 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b468a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b468c:	b118      	cbz	r0, b4696 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b468e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4692:	f003 fa59 	bl	b7b48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4696:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b469a:	2100      	movs	r1, #0
   b469c:	b280      	uxth	r0, r0
   b469e:	f003 fbd0 	bl	b7e42 <digitalWrite>
   b46a2:	e7e4      	b.n	b466e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b46a4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b46a8:	2101      	movs	r1, #1
   b46aa:	b280      	uxth	r0, r0
   b46ac:	f003 fbc9 	bl	b7e42 <digitalWrite>
   b46b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b46b2:	b118      	cbz	r0, b46bc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b46b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b46b8:	f003 ba2c 	b.w	b7b14 <_ZN8SPIClass14endTransactionEv>
}
   b46bc:	bd38      	pop	{r3, r4, r5, pc}

000b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b46be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b46c2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b46c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b46c6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b46c8:	188f      	adds	r7, r1, r2
   b46ca:	b340      	cbz	r0, b471e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b46cc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b46d0:	f001 fcbc 	bl	b604c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b46d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46d6:	6803      	ldr	r3, [r0, #0]
   b46d8:	2100      	movs	r1, #0
   b46da:	689b      	ldr	r3, [r3, #8]
   b46dc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b46de:	2601      	movs	r6, #1
    while(n--) {
   b46e0:	42af      	cmp	r7, r5
        wire->endTransmission();
   b46e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b46e4:	d017      	beq.n	b4716 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b46e6:	2e1f      	cmp	r6, #31
   b46e8:	d90c      	bls.n	b4704 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b46ea:	f001 fcb6 	bl	b605a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b46ee:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b46f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46f4:	f001 fcaa 	bl	b604c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b46f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46fa:	6803      	ldr	r3, [r0, #0]
   b46fc:	2100      	movs	r1, #0
   b46fe:	689b      	ldr	r3, [r3, #8]
   b4700:	4798      	blx	r3
        bytesOut = 1;
   b4702:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4706:	f815 1b01 	ldrb.w	r1, [r5], #1
   b470a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b470c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b470e:	689b      	ldr	r3, [r3, #8]
   b4710:	4798      	blx	r3
      bytesOut++;
   b4712:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4714:	e7e4      	b.n	b46e0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b471a:	f001 bc9e 	b.w	b605a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b471e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4722:	4601      	mov	r1, r0
   b4724:	b298      	uxth	r0, r3
   b4726:	f003 fb8c 	bl	b7e42 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b472a:	42bd      	cmp	r5, r7
   b472c:	d022      	beq.n	b4774 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b472e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4730:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4734:	b118      	cbz	r0, b473e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4736:	4649      	mov	r1, r9
   b4738:	f003 fa74 	bl	b7c24 <_ZN8SPIClass8transferEh>
   b473c:	e7f5      	b.n	b472a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b473e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4740:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4744:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4748:	ea09 0108 	and.w	r1, r9, r8
   b474c:	b280      	uxth	r0, r0
   b474e:	f003 fb78 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4752:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4756:	2101      	movs	r1, #1
   b4758:	b280      	uxth	r0, r0
   b475a:	f003 fb72 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b475e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4762:	2100      	movs	r1, #0
   b4764:	b280      	uxth	r0, r0
   b4766:	f003 fb6c 	bl	b7e42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b476a:	3e01      	subs	r6, #1
   b476c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4770:	d1e8      	bne.n	b4744 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4772:	e7da      	b.n	b472a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4778 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4778:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b477c:	1dda      	adds	r2, r3, #7
   b477e:	bf48      	it	mi
   b4780:	f103 020e 	addmi.w	r2, r3, #14
   b4784:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4788:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b478a:	10d2      	asrs	r2, r2, #3
   b478c:	435a      	muls	r2, r3
   b478e:	2100      	movs	r1, #0
   b4790:	f003 bcd8 	b.w	b8144 <memset>

000b4794 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4798:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b479a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b479c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b47a0:	4604      	mov	r4, r0
   b47a2:	460f      	mov	r7, r1
   b47a4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b47a6:	b1c3      	cbz	r3, b47da <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b47a8:	4620      	mov	r0, r4
   b47aa:	f7ff ffe5 	bl	b4778 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b47ae:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b47b2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b47b6:	2820      	cmp	r0, #32
   b47b8:	dc21      	bgt.n	b47fe <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b47ba:	2320      	movs	r3, #32
   b47bc:	2201      	movs	r2, #1
   b47be:	3820      	subs	r0, #32
   b47c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b47c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b47c8:	2373      	movs	r3, #115	; 0x73
   b47ca:	3973      	subs	r1, #115	; 0x73
   b47cc:	9300      	str	r3, [sp, #0]
   b47ce:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b47d2:	4b89      	ldr	r3, [pc, #548]	; (b49f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b47d4:	f340 024f 	sbfx	r2, r0, #1, #16
   b47d8:	e021      	b.n	b481e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b47da:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b47de:	1dd8      	adds	r0, r3, #7
   b47e0:	bf48      	it	mi
   b47e2:	f103 000e 	addmi.w	r0, r3, #14
   b47e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b47ea:	10c0      	asrs	r0, r0, #3
   b47ec:	4358      	muls	r0, r3
   b47ee:	f001 fa4b 	bl	b5c88 <malloc>
   b47f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   b47f4:	2800      	cmp	r0, #0
   b47f6:	d1d7      	bne.n	b47a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b47f8:	b004      	add	sp, #16
   b47fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b47fe:	3840      	subs	r0, #64	; 0x40
   b4800:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4804:	fa02 f280 	sxtah	r2, r2, r0
   b4808:	2340      	movs	r3, #64	; 0x40
   b480a:	2001      	movs	r0, #1
   b480c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4810:	2352      	movs	r3, #82	; 0x52
   b4812:	3952      	subs	r1, #82	; 0x52
   b4814:	9300      	str	r3, [sp, #0]
   b4816:	4b79      	ldr	r3, [pc, #484]	; (b49fc <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4818:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b481c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b481e:	4620      	mov	r0, r4
   b4820:	f341 014f 	sbfx	r1, r1, #1, #16
   b4824:	f000 fd26 	bl	b5274 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4828:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b482a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b482e:	2800      	cmp	r0, #0
   b4830:	d078      	beq.n	b4924 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4832:	2d00      	cmp	r5, #0
   b4834:	d174      	bne.n	b4920 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4836:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b483a:	2b20      	cmp	r3, #32
   b483c:	bf0c      	ite	eq
   b483e:	253c      	moveq	r5, #60	; 0x3c
   b4840:	253d      	movne	r5, #61	; 0x3d
   b4842:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4846:	f1b8 0f00 	cmp.w	r8, #0
   b484a:	d001      	beq.n	b4850 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b484c:	f001 fbf4 	bl	b6038 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4850:	b1fe      	cbz	r6, b4892 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4852:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4856:	2800      	cmp	r0, #0
   b4858:	db1b      	blt.n	b4892 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b485a:	2101      	movs	r1, #1
   b485c:	b280      	uxth	r0, r0
   b485e:	f003 fadf 	bl	b7e20 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4862:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4866:	2101      	movs	r1, #1
   b4868:	b280      	uxth	r0, r0
   b486a:	f003 faea 	bl	b7e42 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b486e:	2001      	movs	r0, #1
   b4870:	f001 fd19 	bl	b62a6 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4874:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4878:	2100      	movs	r1, #0
   b487a:	b280      	uxth	r0, r0
   b487c:	f003 fae1 	bl	b7e42 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4880:	200a      	movs	r0, #10
   b4882:	f001 fd10 	bl	b62a6 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4886:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b488a:	2101      	movs	r1, #1
   b488c:	b280      	uxth	r0, r0
   b488e:	f003 fad8 	bl	b7e42 <digitalWrite>
  TRANSACTION_START
   b4892:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4894:	2800      	cmp	r0, #0
   b4896:	d074      	beq.n	b4982 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4898:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b489a:	f001 fbc9 	bl	b6030 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b489e:	2204      	movs	r2, #4
   b48a0:	4957      	ldr	r1, [pc, #348]	; (b4a00 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b48a2:	4620      	mov	r0, r4
   b48a4:	f7ff ff0b 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b48a8:	8961      	ldrh	r1, [r4, #10]
   b48aa:	3901      	subs	r1, #1
   b48ac:	b2c9      	uxtb	r1, r1
   b48ae:	4620      	mov	r0, r4
   b48b0:	f7ff fe96 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b48b4:	4953      	ldr	r1, [pc, #332]	; (b4a04 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b48b6:	2204      	movs	r2, #4
   b48b8:	4620      	mov	r0, r4
   b48ba:	f7ff ff00 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b48be:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b48c2:	2b01      	cmp	r3, #1
   b48c4:	bf0c      	ite	eq
   b48c6:	2110      	moveq	r1, #16
   b48c8:	2114      	movne	r1, #20
   b48ca:	4620      	mov	r0, r4
   b48cc:	f7ff fe88 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b48d0:	2204      	movs	r2, #4
   b48d2:	494d      	ldr	r1, [pc, #308]	; (b4a08 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b48d4:	4620      	mov	r0, r4
   b48d6:	f7ff fef2 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b48da:	68a3      	ldr	r3, [r4, #8]
   b48dc:	4a4b      	ldr	r2, [pc, #300]	; (b4a0c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b48de:	4293      	cmp	r3, r2
   b48e0:	d15c      	bne.n	b499c <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b48e2:	494b      	ldr	r1, [pc, #300]	; (b4a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b48e4:	2204      	movs	r2, #4
   b48e6:	4620      	mov	r0, r4
   b48e8:	f7ff fee9 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b48ec:	21d9      	movs	r1, #217	; 0xd9
   b48ee:	4620      	mov	r0, r4
   b48f0:	f7ff fe76 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b48f4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b48f8:	2b01      	cmp	r3, #1
   b48fa:	bf0c      	ite	eq
   b48fc:	2122      	moveq	r1, #34	; 0x22
   b48fe:	21f1      	movne	r1, #241	; 0xf1
   b4900:	4620      	mov	r0, r4
   b4902:	f7ff fe6d 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4906:	4620      	mov	r0, r4
   b4908:	4942      	ldr	r1, [pc, #264]	; (b4a14 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b490a:	2206      	movs	r2, #6
   b490c:	f7ff fed7 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4910:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4912:	2800      	cmp	r0, #0
   b4914:	d063      	beq.n	b49de <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4916:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4918:	f001 fb8a 	bl	b6030 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b491c:	2001      	movs	r0, #1
   b491e:	e76b      	b.n	b47f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4920:	b26d      	sxtb	r5, r5
   b4922:	e78e      	b.n	b4842 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4924:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4928:	2101      	movs	r1, #1
   b492a:	b280      	uxth	r0, r0
   b492c:	f003 fa78 	bl	b7e20 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4930:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4934:	2101      	movs	r1, #1
   b4936:	b280      	uxth	r0, r0
   b4938:	f003 fa72 	bl	b7e20 <pinMode>
    SSD1306_DESELECT
   b493c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4940:	2101      	movs	r1, #1
   b4942:	b280      	uxth	r0, r0
   b4944:	f003 fa7d 	bl	b7e42 <digitalWrite>
    if(spi) { // Hardware SPI
   b4948:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b494a:	b13d      	cbz	r5, b495c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b494c:	f1b8 0f00 	cmp.w	r8, #0
   b4950:	f43f af7e 	beq.w	b4850 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4954:	4628      	mov	r0, r5
   b4956:	f003 f8c9 	bl	b7aec <_ZN8SPIClass5beginEv>
   b495a:	e779      	b.n	b4850 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b495c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4960:	2101      	movs	r1, #1
   b4962:	b280      	uxth	r0, r0
   b4964:	f003 fa5c 	bl	b7e20 <pinMode>
      pinMode(clkPin , OUTPUT);
   b4968:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b496c:	2101      	movs	r1, #1
   b496e:	b280      	uxth	r0, r0
   b4970:	f003 fa56 	bl	b7e20 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4974:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4978:	4629      	mov	r1, r5
   b497a:	b280      	uxth	r0, r0
   b497c:	f003 fa61 	bl	b7e42 <digitalWrite>
   b4980:	e766      	b.n	b4850 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4982:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4984:	b118      	cbz	r0, b498e <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4986:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b498a:	f003 f8dd 	bl	b7b48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b498e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4992:	2100      	movs	r1, #0
   b4994:	b280      	uxth	r0, r0
   b4996:	f003 fa54 	bl	b7e42 <digitalWrite>
   b499a:	e780      	b.n	b489e <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b499c:	4a1e      	ldr	r2, [pc, #120]	; (b4a18 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b499e:	4293      	cmp	r3, r2
   b49a0:	d10e      	bne.n	b49c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b49a2:	491e      	ldr	r1, [pc, #120]	; (b4a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b49a4:	2203      	movs	r2, #3
   b49a6:	4620      	mov	r0, r4
   b49a8:	f7ff fe89 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b49ac:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b49b0:	2b01      	cmp	r3, #1
   b49b2:	bf0c      	ite	eq
   b49b4:	219f      	moveq	r1, #159	; 0x9f
   b49b6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b49b8:	4620      	mov	r0, r4
   b49ba:	f7ff fe11 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b49be:	e795      	b.n	b48ec <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b49c0:	4a17      	ldr	r2, [pc, #92]	; (b4a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b49c2:	4293      	cmp	r3, r2
   b49c4:	d192      	bne.n	b48ec <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b49c6:	4917      	ldr	r1, [pc, #92]	; (b4a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b49c8:	2203      	movs	r2, #3
   b49ca:	4620      	mov	r0, r4
   b49cc:	f7ff fe77 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b49d0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b49d4:	2b01      	cmp	r3, #1
   b49d6:	bf0c      	ite	eq
   b49d8:	2110      	moveq	r1, #16
   b49da:	21af      	movne	r1, #175	; 0xaf
   b49dc:	e7ec      	b.n	b49b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b49de:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b49e2:	2101      	movs	r1, #1
   b49e4:	b280      	uxth	r0, r0
   b49e6:	f003 fa2c 	bl	b7e42 <digitalWrite>
   b49ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b49ec:	2800      	cmp	r0, #0
   b49ee:	d095      	beq.n	b491c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b49f0:	f003 f890 	bl	b7b14 <_ZN8SPIClass14endTransactionEv>
   b49f4:	e792      	b.n	b491c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b49f6:	bf00      	nop
   b49f8:	000b86c8 	.word	0x000b86c8
   b49fc:	000b8408 	.word	0x000b8408
   b4a00:	000b8910 	.word	0x000b8910
   b4a04:	000b8914 	.word	0x000b8914
   b4a08:	000b8918 	.word	0x000b8918
   b4a0c:	00200080 	.word	0x00200080
   b4a10:	000b8922 	.word	0x000b8922
   b4a14:	000b891c 	.word	0x000b891c
   b4a18:	00400080 	.word	0x00400080
   b4a1c:	000b8926 	.word	0x000b8926
   b4a20:	00100060 	.word	0x00100060
   b4a24:	000b8929 	.word	0x000b8929

000b4a28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4a28:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4a2a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4a2c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4a30:	db3d      	blt.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a32:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4a36:	4294      	cmp	r4, r2
   b4a38:	dd39      	ble.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4a3a:	2900      	cmp	r1, #0
      w += x;
   b4a3c:	bfbe      	ittt	lt
   b4a3e:	185b      	addlt	r3, r3, r1
   b4a40:	b21b      	sxthlt	r3, r3
      x  = 0;
   b4a42:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b4a44:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b4a48:	18ce      	adds	r6, r1, r3
   b4a4a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b4a4c:	bfc4      	itt	gt
   b4a4e:	1a63      	subgt	r3, r4, r1
   b4a50:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b4a52:	2b00      	cmp	r3, #0
   b4a54:	dd2b      	ble.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b4a56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a58:	10d6      	asrs	r6, r2, #3
   b4a5a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b4a5e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b4a60:	f002 0007 	and.w	r0, r2, #7
   b4a64:	2201      	movs	r2, #1
   b4a66:	4082      	lsls	r2, r0
      switch(color) {
   b4a68:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b4a6a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b4a6c:	d016      	beq.n	b4a9c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b4a6e:	2d02      	cmp	r5, #2
   b4a70:	d00b      	beq.n	b4a8a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b4a72:	b9e5      	cbnz	r5, b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b4a74:	43d2      	mvns	r2, r2
   b4a76:	b2d2      	uxtb	r2, r2
   b4a78:	440b      	add	r3, r1
   b4a7a:	4299      	cmp	r1, r3
   b4a7c:	d017      	beq.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a82:	4010      	ands	r0, r2
   b4a84:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a88:	e7f7      	b.n	b4a7a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b4a8a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b4a8c:	4299      	cmp	r1, r3
   b4a8e:	d00e      	beq.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a90:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a94:	4050      	eors	r0, r2
   b4a96:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a9a:	e7f7      	b.n	b4a8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b4a9c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b4a9e:	4299      	cmp	r1, r3
   b4aa0:	d005      	beq.n	b4aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4aa2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4aa6:	4310      	orrs	r0, r2
   b4aa8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4aac:	e7f7      	b.n	b4a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b4aae:	bd70      	pop	{r4, r5, r6, pc}

000b4ab0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4ab2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4ab4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4ab8:	db76      	blt.n	b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b4aba:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b4abe:	42b1      	cmp	r1, r6
   b4ac0:	da72      	bge.n	b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b4ac2:	2a00      	cmp	r2, #0
      __h += __y;
   b4ac4:	bfbe      	ittt	lt
   b4ac6:	189b      	addlt	r3, r3, r2
   b4ac8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b4aca:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b4acc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4ad0:	18d7      	adds	r7, r2, r3
   b4ad2:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b4ad4:	bfc4      	itt	gt
   b4ad6:	1aa3      	subgt	r3, r4, r2
   b4ad8:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b4ada:	2b00      	cmp	r3, #0
   b4adc:	dd64      	ble.n	b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b4ade:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b4ae2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b4ae4:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b4ae8:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b4aec:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b4aee:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b4af2:	d023      	beq.n	b4b3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b4af4:	f1c2 0208 	rsb	r2, r2, #8
   b4af8:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b4afa:	492d      	ldr	r1, [pc, #180]	; (b4bb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b4afc:	4293      	cmp	r3, r2
   b4afe:	bf3c      	itt	cc
   b4b00:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b4b04:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b4b08:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b4b0a:	bf3c      	itt	cc
   b4b0c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b4b10:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b4b14:	2d01      	cmp	r5, #1
   b4b16:	d007      	beq.n	b4b28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b4b18:	2d02      	cmp	r5, #2
   b4b1a:	d02e      	beq.n	b4b7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b4b1c:	b94d      	cbnz	r5, b4b32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b4b1e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4b22:	ea2c 0101 	bic.w	r1, ip, r1
   b4b26:	e003      	b.n	b4b30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b4b28:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4b2c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b4b30:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b4b32:	4293      	cmp	r3, r2
   b4b34:	d338      	bcc.n	b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b4b36:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b4b3a:	440c      	add	r4, r1
        h -= mod;
   b4b3c:	1a9a      	subs	r2, r3, r2
   b4b3e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b4b40:	2a07      	cmp	r2, #7
   b4b42:	d90e      	bls.n	b4b62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b4b44:	2d02      	cmp	r5, #2
   b4b46:	d11d      	bne.n	b4b84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b4b48:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b4b4a:	7821      	ldrb	r1, [r4, #0]
   b4b4c:	43c9      	mvns	r1, r1
   b4b4e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b4b50:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b4b52:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b4b56:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b4b58:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b4b5a:	440c      	add	r4, r1
            } while(h >= 8);
   b4b5c:	d8f5      	bhi.n	b4b4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b4b5e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b4b62:	b30a      	cbz	r2, b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b4b64:	4b13      	ldr	r3, [pc, #76]	; (b4bb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b4b66:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b4b68:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b4b6a:	d01a      	beq.n	b4ba2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b4b6c:	2d02      	cmp	r5, #2
   b4b6e:	d01c      	beq.n	b4baa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b4b70:	b9d5      	cbnz	r5, b4ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b4b72:	7822      	ldrb	r2, [r4, #0]
   b4b74:	ea22 0303 	bic.w	r3, r2, r3
   b4b78:	e015      	b.n	b4ba6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b4b7a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4b7e:	ea81 010c 	eor.w	r1, r1, ip
   b4b82:	e7d5      	b.n	b4b30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b4b84:	1e29      	subs	r1, r5, #0
   b4b86:	bf18      	it	ne
   b4b88:	2101      	movne	r1, #1
   b4b8a:	4249      	negs	r1, r1
   b4b8c:	b2c9      	uxtb	r1, r1
   b4b8e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b4b90:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b4b92:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b4b94:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b4b98:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b4b9a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b4b9c:	4434      	add	r4, r6
            } while(h >= 8);
   b4b9e:	d8f7      	bhi.n	b4b90 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b4ba0:	e7dd      	b.n	b4b5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b4ba2:	7822      	ldrb	r2, [r4, #0]
   b4ba4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b4ba6:	7023      	strb	r3, [r4, #0]
}
   b4ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b4baa:	7822      	ldrb	r2, [r4, #0]
   b4bac:	4053      	eors	r3, r2
   b4bae:	e7fa      	b.n	b4ba6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b4bb0:	000b8900 	.word	0x000b8900
   b4bb4:	000b8908 	.word	0x000b8908

000b4bb8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4bb8:	b470      	push	{r4, r5, r6}
   b4bba:	4614      	mov	r4, r2
  switch(rotation) {
   b4bbc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4bbe:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b4bc2:	2a02      	cmp	r2, #2
   b4bc4:	d00d      	beq.n	b4be2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b4bc6:	2a03      	cmp	r2, #3
   b4bc8:	d018      	beq.n	b4bfc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b4bca:	2a01      	cmp	r2, #1
   b4bcc:	d111      	bne.n	b4bf2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b4bce:	8902      	ldrh	r2, [r0, #8]
   b4bd0:	43e4      	mvns	r4, r4
   b4bd2:	4414      	add	r4, r2
   b4bd4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b4bd6:	9603      	str	r6, [sp, #12]
   b4bd8:	460a      	mov	r2, r1
   b4bda:	4621      	mov	r1, r4
}
   b4bdc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b4bde:	f7ff bf67 	b.w	b4ab0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b4be2:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b4be4:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b4be6:	43e4      	mvns	r4, r4
    x -= (w-1);
   b4be8:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b4bea:	4414      	add	r4, r2
    x -= (w-1);
   b4bec:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b4bee:	b224      	sxth	r4, r4
    x -= (w-1);
   b4bf0:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b4bf2:	9603      	str	r6, [sp, #12]
   b4bf4:	4622      	mov	r2, r4
}
   b4bf6:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b4bf8:	f7ff bf16 	b.w	b4a28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b4bfc:	8945      	ldrh	r5, [r0, #10]
   b4bfe:	4419      	add	r1, r3
   b4c00:	1a69      	subs	r1, r5, r1
   b4c02:	b209      	sxth	r1, r1
    break;
   b4c04:	e7e7      	b.n	b4bd6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b4c06 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4c06:	b430      	push	{r4, r5}
   b4c08:	4614      	mov	r4, r2
  switch(rotation) {
   b4c0a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4c0c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b4c10:	2a02      	cmp	r2, #2
   b4c12:	d00d      	beq.n	b4c30 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b4c14:	2a03      	cmp	r2, #3
   b4c16:	d018      	beq.n	b4c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b4c18:	2a01      	cmp	r2, #1
   b4c1a:	d111      	bne.n	b4c40 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b4c1c:	18e2      	adds	r2, r4, r3
   b4c1e:	8904      	ldrh	r4, [r0, #8]
   b4c20:	1aa4      	subs	r4, r4, r2
   b4c22:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b4c24:	9502      	str	r5, [sp, #8]
   b4c26:	460a      	mov	r2, r1
   b4c28:	4621      	mov	r1, r4
}
   b4c2a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b4c2c:	f7ff befc 	b.w	b4a28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b4c30:	8902      	ldrh	r2, [r0, #8]
   b4c32:	43c9      	mvns	r1, r1
   b4c34:	4411      	add	r1, r2
    y -= (h-1);
   b4c36:	18e2      	adds	r2, r4, r3
   b4c38:	8944      	ldrh	r4, [r0, #10]
   b4c3a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b4c3c:	b209      	sxth	r1, r1
    y -= (h-1);
   b4c3e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b4c40:	9502      	str	r5, [sp, #8]
   b4c42:	4622      	mov	r2, r4
}
   b4c44:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b4c46:	f7ff bf33 	b.w	b4ab0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b4c4a:	8942      	ldrh	r2, [r0, #10]
   b4c4c:	43c9      	mvns	r1, r1
   b4c4e:	4411      	add	r1, r2
   b4c50:	b209      	sxth	r1, r1
    break;
   b4c52:	e7e7      	b.n	b4c24 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b4c54 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c58:	4604      	mov	r4, r0
  TRANSACTION_START
   b4c5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b4c5c:	2800      	cmp	r0, #0
   b4c5e:	d042      	beq.n	b4ce6 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b4c60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4c62:	f001 f9e5 	bl	b6030 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b4c66:	4947      	ldr	r1, [pc, #284]	; (b4d84 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b4c68:	2205      	movs	r2, #5
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	f7ff fd27 	bl	b46be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b4c70:	8921      	ldrh	r1, [r4, #8]
   b4c72:	3901      	subs	r1, #1
   b4c74:	4620      	mov	r0, r4
   b4c76:	b2c9      	uxtb	r1, r1
   b4c78:	f7ff fcb2 	bl	b45e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b4c7c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4c80:	1dde      	adds	r6, r3, #7
   b4c82:	bf48      	it	mi
   b4c84:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b4c88:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b4c8c:	8923      	ldrh	r3, [r4, #8]
   b4c8e:	10f6      	asrs	r6, r6, #3
   b4c90:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b4c94:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b4c98:	2800      	cmp	r0, #0
   b4c9a:	d03a      	beq.n	b4d12 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b4c9c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4ca0:	f001 f9d4 	bl	b604c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b4ca4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ca6:	6803      	ldr	r3, [r0, #0]
   b4ca8:	2140      	movs	r1, #64	; 0x40
   b4caa:	689b      	ldr	r3, [r3, #8]
   b4cac:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4cae:	2701      	movs	r7, #1
    while(count--) {
   b4cb0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b4cb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b4cb4:	d024      	beq.n	b4d00 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b4cb6:	2f1f      	cmp	r7, #31
   b4cb8:	d90c      	bls.n	b4cd4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b4cba:	f001 f9ce 	bl	b605a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4cbe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4cc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cc4:	f001 f9c2 	bl	b604c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b4cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cca:	6803      	ldr	r3, [r0, #0]
   b4ccc:	2140      	movs	r1, #64	; 0x40
   b4cce:	689b      	ldr	r3, [r3, #8]
   b4cd0:	4798      	blx	r3
        bytesOut = 1;
   b4cd2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b4cd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cd6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4cda:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4cdc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b4cde:	689b      	ldr	r3, [r3, #8]
   b4ce0:	4798      	blx	r3
      bytesOut++;
   b4ce2:	b2ff      	uxtb	r7, r7
    while(count--) {
   b4ce4:	e7e4      	b.n	b4cb0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b4ce6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ce8:	b118      	cbz	r0, b4cf2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b4cea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4cee:	f002 ff2b 	bl	b7b48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4cf2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4cf6:	2100      	movs	r1, #0
   b4cf8:	b280      	uxth	r0, r0
   b4cfa:	f003 f8a2 	bl	b7e42 <digitalWrite>
   b4cfe:	e7b2      	b.n	b4c66 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b4d00:	f001 f9ab 	bl	b605a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b4d04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d06:	b378      	cbz	r0, b4d68 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b4d08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4d0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d0e:	f001 b98f 	b.w	b6030 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b4d12:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4d16:	2101      	movs	r1, #1
   b4d18:	b280      	uxth	r0, r0
   b4d1a:	f003 f892 	bl	b7e42 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b4d1e:	42ae      	cmp	r6, r5
   b4d20:	d0f0      	beq.n	b4d04 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b4d22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b4d24:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4d28:	b118      	cbz	r0, b4d32 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b4d2a:	4649      	mov	r1, r9
   b4d2c:	f002 ff7a 	bl	b7c24 <_ZN8SPIClass8transferEh>
   b4d30:	e7f5      	b.n	b4d1e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b4d32:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d34:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4d38:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4d3c:	ea09 0108 	and.w	r1, r9, r8
   b4d40:	b280      	uxth	r0, r0
   b4d42:	f003 f87e 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4d46:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d4a:	2101      	movs	r1, #1
   b4d4c:	b280      	uxth	r0, r0
   b4d4e:	f003 f878 	bl	b7e42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4d52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d56:	2100      	movs	r1, #0
   b4d58:	b280      	uxth	r0, r0
   b4d5a:	f003 f872 	bl	b7e42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d5e:	3f01      	subs	r7, #1
   b4d60:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4d64:	d1e8      	bne.n	b4d38 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b4d66:	e7da      	b.n	b4d1e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b4d68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4d6c:	2101      	movs	r1, #1
   b4d6e:	b280      	uxth	r0, r0
   b4d70:	f003 f867 	bl	b7e42 <digitalWrite>
   b4d74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4d76:	b118      	cbz	r0, b4d80 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b4d78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b4d7c:	f002 beca 	b.w	b7b14 <_ZN8SPIClass14endTransactionEv>
}
   b4d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4d84:	000b892c 	.word	0x000b892c

000b4d88 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b4d88:	2100      	movs	r1, #0
   b4d8a:	220a      	movs	r2, #10
   b4d8c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b4d90:	4770      	bx	lr

000b4d92 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b4d92:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b4d94:	b510      	push	{r4, lr}
   b4d96:	4604      	mov	r4, r0
    this->pin = pin;
   b4d98:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b4d9a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b4d9c:	b288      	uxth	r0, r1
   b4d9e:	f003 f869 	bl	b7e74 <digitalRead>
   b4da2:	b108      	cbz	r0, b4da8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b4da4:	2303      	movs	r3, #3
   b4da6:	71a3      	strb	r3, [r4, #6]
   b4da8:	f000 fe7a 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b4dac:	6020      	str	r0, [r4, #0]
#endif
}
   b4dae:	bd10      	pop	{r4, pc}

000b4db0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b4db0:	b538      	push	{r3, r4, r5, lr}
   b4db2:	460c      	mov	r4, r1
   b4db4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b4db6:	4611      	mov	r1, r2
   b4db8:	b2a0      	uxth	r0, r4
   b4dba:	f003 f831 	bl	b7e20 <pinMode>
  
  this->attach(pin);
   b4dbe:	4621      	mov	r1, r4
   b4dc0:	4628      	mov	r0, r5
}
   b4dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b4dc6:	f7ff bfe4 	b.w	b4d92 <_ZN8Debounce6attachEi>

000b4dca <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b4dca:	b538      	push	{r3, r4, r5, lr}
   b4dcc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b4dce:	79c0      	ldrb	r0, [r0, #7]
   b4dd0:	f003 f850 	bl	b7e74 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b4dd4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b4dd6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b4dd8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b4ddc:	bf18      	it	ne
   b4dde:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4de0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b4de4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b4de6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4de8:	d00a      	beq.n	b4e00 <_ZN8Debounce6updateEv+0x36>
   b4dea:	f000 fe59 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b4dee:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b4df0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b4df2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b4df6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b4df8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b4dfa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4dfe:	bd38      	pop	{r3, r4, r5, pc}
   b4e00:	f000 fe4e 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b4e04:	6823      	ldr	r3, [r4, #0]
   b4e06:	1ac0      	subs	r0, r0, r3
   b4e08:	88a3      	ldrh	r3, [r4, #4]
   b4e0a:	4298      	cmp	r0, r3
   b4e0c:	d3f4      	bcc.n	b4df8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b4e0e:	79a3      	ldrb	r3, [r4, #6]
   b4e10:	f003 0301 	and.w	r3, r3, #1
   b4e14:	42ab      	cmp	r3, r5
   b4e16:	d0ef      	beq.n	b4df8 <_ZN8Debounce6updateEv+0x2e>
   b4e18:	f000 fe42 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b4e1c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b4e1e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b4e20:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b4e24:	f043 0308 	orr.w	r3, r3, #8
   b4e28:	e7e5      	b.n	b4df6 <_ZN8Debounce6updateEv+0x2c>
	...

000b4e2c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b4e2c:	b510      	push	{r4, lr}
   b4e2e:	4b06      	ldr	r3, [pc, #24]	; (b4e48 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b4e30:	6003      	str	r3, [r0, #0]
   b4e32:	4604      	mov	r4, r0
	if (mutex) {
   b4e34:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b4e36:	b108      	cbz	r0, b4e3c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b4e38:	f000 fd7e 	bl	b5938 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	f7ff faf1 	bl	b4424 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b4e42:	4620      	mov	r0, r4
   b4e44:	bd10      	pop	{r4, pc}
   b4e46:	bf00      	nop
   b4e48:	000b893c 	.word	0x000b893c

000b4e4c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b4e4c:	b510      	push	{r4, lr}
   b4e4e:	4604      	mov	r4, r0
}
   b4e50:	f7ff ffec 	bl	b4e2c <_ZN16OledWingAdafruitD1Ev>
   b4e54:	4620      	mov	r0, r4
   b4e56:	2170      	movs	r1, #112	; 0x70
   b4e58:	f7ff f91f 	bl	b409a <_ZdlPvj>
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	bd10      	pop	{r4, pc}

000b4e60 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b4e60:	b530      	push	{r4, r5, lr}
   b4e62:	b085      	sub	sp, #20
   b4e64:	4604      	mov	r4, r0
   b4e66:	460d      	mov	r5, r1
   b4e68:	f002 ff38 	bl	b7cdc <_Z19__fetch_global_Wirev>
   b4e6c:	4a10      	ldr	r2, [pc, #64]	; (b4eb0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b4e6e:	4911      	ldr	r1, [pc, #68]	; (b4eb4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b4e70:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4e78:	2180      	movs	r1, #128	; 0x80
   b4e7a:	4603      	mov	r3, r0
   b4e7c:	9200      	str	r2, [sp, #0]
   b4e7e:	4620      	mov	r0, r4
   b4e80:	2220      	movs	r2, #32
   b4e82:	f7ff fb7f 	bl	b4584 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b4e86:	4b0c      	ldr	r3, [pc, #48]	; (b4eb8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b4e88:	6023      	str	r3, [r4, #0]
   b4e8a:	2300      	movs	r3, #0
   b4e8c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b4e90:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4e94:	f7ff ff78 	bl	b4d88 <_ZN8DebounceC1Ev>
   b4e98:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4e9c:	f7ff ff74 	bl	b4d88 <_ZN8DebounceC1Ev>
   b4ea0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4ea4:	f7ff ff70 	bl	b4d88 <_ZN8DebounceC1Ev>
}
   b4ea8:	4620      	mov	r0, r4
   b4eaa:	b005      	add	sp, #20
   b4eac:	bd30      	pop	{r4, r5, pc}
   b4eae:	bf00      	nop
   b4eb0:	00061a80 	.word	0x00061a80
   b4eb4:	000186a0 	.word	0x000186a0
   b4eb8:	000b893c 	.word	0x000b893c

000b4ebc <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b4ebc:	b513      	push	{r0, r1, r4, lr}
   b4ebe:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b4ec0:	3050      	adds	r0, #80	; 0x50
   b4ec2:	f000 fd31 	bl	b5928 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b4ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4ec8:	07d9      	lsls	r1, r3, #31
   b4eca:	d505      	bpl.n	b4ed8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b4ecc:	2202      	movs	r2, #2
   b4ece:	2104      	movs	r1, #4
   b4ed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4ed4:	f7ff ff6c 	bl	b4db0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b4ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4eda:	079a      	lsls	r2, r3, #30
   b4edc:	d505      	bpl.n	b4eea <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b4ede:	2200      	movs	r2, #0
   b4ee0:	2103      	movs	r1, #3
   b4ee2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4ee6:	f7ff ff63 	bl	b4db0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b4eea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4eec:	075b      	lsls	r3, r3, #29
   b4eee:	d505      	bpl.n	b4efc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b4ef0:	2202      	movs	r2, #2
   b4ef2:	4611      	mov	r1, r2
   b4ef4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4ef8:	f7ff ff5a 	bl	b4db0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4efc:	2301      	movs	r3, #1
   b4efe:	9300      	str	r3, [sp, #0]
   b4f00:	223c      	movs	r2, #60	; 0x3c
   b4f02:	2102      	movs	r1, #2
   b4f04:	4620      	mov	r0, r4
   b4f06:	f7ff fc45 	bl	b4794 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b4f0a:	b002      	add	sp, #8
   b4f0c:	bd10      	pop	{r4, pc}

000b4f0e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b4f0e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b4f10:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4f12:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b4f14:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b4f16:	d502      	bpl.n	b4f1e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b4f18:	3058      	adds	r0, #88	; 0x58
   b4f1a:	f7ff ff56 	bl	b4dca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b4f1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f20:	079a      	lsls	r2, r3, #30
   b4f22:	d503      	bpl.n	b4f2c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b4f24:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4f28:	f7ff ff4f 	bl	b4dca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b4f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4f2e:	075b      	lsls	r3, r3, #29
   b4f30:	d505      	bpl.n	b4f3e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b4f32:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b4f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b4f3a:	f7ff bf46 	b.w	b4dca <_ZN8Debounce6updateEv>
}
   b4f3e:	bd10      	pop	{r4, pc}

000b4f40 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f44:	b085      	sub	sp, #20
   b4f46:	461f      	mov	r7, r3
   b4f48:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4f4c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4f50:	eba8 0902 	sub.w	r9, r8, r2
   b4f54:	eba7 0a01 	sub.w	sl, r7, r1
   b4f58:	f1b9 0f00 	cmp.w	r9, #0
   b4f5c:	bfb8      	it	lt
   b4f5e:	f1c9 0900 	rsblt	r9, r9, #0
   b4f62:	f1ba 0f00 	cmp.w	sl, #0
   b4f66:	bfb8      	it	lt
   b4f68:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4f6c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4f6e:	4683      	mov	fp, r0
   b4f70:	460c      	mov	r4, r1
   b4f72:	4615      	mov	r5, r2
    if (steep) {
   b4f74:	dd04      	ble.n	b4f80 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4f76:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4f78:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4f7a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4f7c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4f7e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4f80:	42bc      	cmp	r4, r7
   b4f82:	dd05      	ble.n	b4f90 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4f84:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4f86:	4645      	mov	r5, r8
   b4f88:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4f8a:	4622      	mov	r2, r4
   b4f8c:	463c      	mov	r4, r7
   b4f8e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4f90:	1b3e      	subs	r6, r7, r4
   b4f92:	b2b2      	uxth	r2, r6
   b4f94:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4f96:	eba8 0205 	sub.w	r2, r8, r5
   b4f9a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4f9e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4fa2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4fa6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4faa:	4545      	cmp	r5, r8
   b4fac:	bfb4      	ite	lt
   b4fae:	2201      	movlt	r2, #1
   b4fb0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4fb4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4fb6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4fb8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4fba:	42bc      	cmp	r4, r7
   b4fbc:	dc1c      	bgt.n	b4ff8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4fbe:	f8db 2000 	ldr.w	r2, [fp]
   b4fc2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4fc4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4fc6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4fca:	bfc7      	ittee	gt
   b4fcc:	4629      	movgt	r1, r5
   b4fce:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4fd0:	462a      	movle	r2, r5
   b4fd2:	4621      	movle	r1, r4
   b4fd4:	4658      	mov	r0, fp
   b4fd6:	47c0      	blx	r8
        }
        err -= dy;
   b4fd8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4fda:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4fdc:	1ab6      	subs	r6, r6, r2
   b4fde:	b2b1      	uxth	r1, r6
   b4fe0:	b236      	sxth	r6, r6
        if (err < 0) {
   b4fe2:	2e00      	cmp	r6, #0
   b4fe4:	da05      	bge.n	b4ff2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4fe6:	9a02      	ldr	r2, [sp, #8]
   b4fe8:	4415      	add	r5, r2
            err += dx;
   b4fea:	9a00      	ldr	r2, [sp, #0]
   b4fec:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4fee:	b22d      	sxth	r5, r5
            err += dx;
   b4ff0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4ff2:	3401      	adds	r4, #1
   b4ff4:	b224      	sxth	r4, r4
   b4ff6:	e7e0      	b.n	b4fba <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4ff8:	b005      	add	sp, #20
   b4ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4ffe <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4ffe:	4770      	bx	lr

000b5000 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5000:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5002:	6804      	ldr	r4, [r0, #0]
   b5004:	6924      	ldr	r4, [r4, #16]
   b5006:	46a4      	mov	ip, r4
}
   b5008:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b500c:	4760      	bx	ip

000b500e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b500e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5010:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5012:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5016:	9502      	str	r5, [sp, #8]
   b5018:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b501a:	46a4      	mov	ip, r4
}
   b501c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b501e:	4760      	bx	ip

000b5020 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5020:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5022:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5024:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5028:	9502      	str	r5, [sp, #8]
   b502a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b502c:	46a4      	mov	ip, r4
}
   b502e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5030:	4760      	bx	ip

000b5032 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5032:	b470      	push	{r4, r5, r6}
   b5034:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5038:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b503c:	6804      	ldr	r4, [r0, #0]
   b503e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5042:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5044:	46a4      	mov	ip, r4
}
   b5046:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5048:	4760      	bx	ip

000b504a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b504a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b504e:	461c      	mov	r4, r3
    startWrite();
   b5050:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5052:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5056:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5058:	4605      	mov	r5, r0
   b505a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b505c:	3c01      	subs	r4, #1
   b505e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5060:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5062:	b224      	sxth	r4, r4
    startWrite();
   b5064:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5066:	682b      	ldr	r3, [r5, #0]
   b5068:	f8cd 8004 	str.w	r8, [sp, #4]
   b506c:	9400      	str	r4, [sp, #0]
   b506e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5070:	4628      	mov	r0, r5
   b5072:	463b      	mov	r3, r7
   b5074:	4632      	mov	r2, r6
   b5076:	4639      	mov	r1, r7
   b5078:	47a0      	blx	r4
    endWrite();
   b507a:	682b      	ldr	r3, [r5, #0]
   b507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b507e:	4628      	mov	r0, r5
}
   b5080:	b002      	add	sp, #8
   b5082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5086:	4718      	bx	r3

000b5088 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b508c:	461d      	mov	r5, r3
    startWrite();
   b508e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5090:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5094:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5096:	4604      	mov	r4, r0
   b5098:	4617      	mov	r7, r2
   b509a:	460e      	mov	r6, r1
    startWrite();
   b509c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b509e:	e9cd 7800 	strd	r7, r8, [sp]
   b50a2:	6822      	ldr	r2, [r4, #0]
   b50a4:	1e6b      	subs	r3, r5, #1
   b50a6:	4433      	add	r3, r6
   b50a8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b50aa:	4620      	mov	r0, r4
   b50ac:	b21b      	sxth	r3, r3
   b50ae:	463a      	mov	r2, r7
   b50b0:	4631      	mov	r1, r6
   b50b2:	47a8      	blx	r5
    endWrite();
   b50b4:	6823      	ldr	r3, [r4, #0]
   b50b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50b8:	4620      	mov	r0, r4
}
   b50ba:	b002      	add	sp, #8
   b50bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b50c0:	4718      	bx	r3

000b50c2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b50c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b50c6:	461e      	mov	r6, r3
    startWrite();
   b50c8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b50ca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b50ce:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b50d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b50d4:	460c      	mov	r4, r1
   b50d6:	4605      	mov	r5, r0
   b50d8:	4617      	mov	r7, r2
    startWrite();
   b50da:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b50dc:	4426      	add	r6, r4
   b50de:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b50e0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b50e2:	da0b      	bge.n	b50fc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b50e4:	f8cd 8000 	str.w	r8, [sp]
   b50e8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b50ec:	4621      	mov	r1, r4
   b50ee:	464b      	mov	r3, r9
   b50f0:	463a      	mov	r2, r7
   b50f2:	4628      	mov	r0, r5
   b50f4:	3401      	adds	r4, #1
   b50f6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b50f8:	b224      	sxth	r4, r4
   b50fa:	e7f0      	b.n	b50de <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b50fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50fe:	4628      	mov	r0, r5
}
   b5100:	b002      	add	sp, #8
   b5102:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5106:	4718      	bx	r3

000b5108 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5108:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b510a:	6802      	ldr	r2, [r0, #0]
   b510c:	9101      	str	r1, [sp, #4]
   b510e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5112:	9100      	str	r1, [sp, #0]
   b5114:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5116:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b511a:	2200      	movs	r2, #0
   b511c:	4611      	mov	r1, r2
   b511e:	47a0      	blx	r4
}
   b5120:	b002      	add	sp, #8
   b5122:	bd10      	pop	{r4, pc}

000b5124 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5128:	4299      	cmp	r1, r3
        uint16_t color) {
   b512a:	4616      	mov	r6, r2
   b512c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5130:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5134:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5136:	4680      	mov	r8, r0
   b5138:	460d      	mov	r5, r1
   b513a:	461c      	mov	r4, r3
    if(x0 == x1){
   b513c:	d113      	bne.n	b5166 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b513e:	42be      	cmp	r6, r7
   b5140:	bfc8      	it	gt
   b5142:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5144:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5148:	bfc4      	itt	gt
   b514a:	463e      	movgt	r6, r7
   b514c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b514e:	1c7b      	adds	r3, r7, #1
   b5150:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5152:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5154:	b21b      	sxth	r3, r3
   b5156:	4632      	mov	r2, r6
   b5158:	4629      	mov	r1, r5
   b515a:	4640      	mov	r0, r8
   b515c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b515e:	b003      	add	sp, #12
   b5160:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5164:	4760      	bx	ip
    } else if(y0 == y1){
   b5166:	42be      	cmp	r6, r7
   b5168:	d10a      	bne.n	b5180 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b516a:	4299      	cmp	r1, r3
   b516c:	bfc2      	ittt	gt
   b516e:	460b      	movgt	r3, r1
   b5170:	4625      	movgt	r5, r4
   b5172:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5174:	1c63      	adds	r3, r4, #1
   b5176:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b517a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b517c:	1b5b      	subs	r3, r3, r5
   b517e:	e7e9      	b.n	b5154 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5180:	6953      	ldr	r3, [r2, #20]
   b5182:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5184:	e9cd 7900 	strd	r7, r9, [sp]
   b5188:	f8d8 3000 	ldr.w	r3, [r8]
   b518c:	4640      	mov	r0, r8
   b518e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5190:	4632      	mov	r2, r6
   b5192:	4623      	mov	r3, r4
   b5194:	4629      	mov	r1, r5
   b5196:	47b8      	blx	r7
        endWrite();
   b5198:	f8d8 3000 	ldr.w	r3, [r8]
   b519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b519e:	4640      	mov	r0, r8
}
   b51a0:	b003      	add	sp, #12
   b51a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b51a6:	4718      	bx	r3

000b51a8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b51a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b51ac:	461d      	mov	r5, r3
    startWrite();
   b51ae:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b51b0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b51b4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b51b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b51ba:	4604      	mov	r4, r0
   b51bc:	460f      	mov	r7, r1
   b51be:	4616      	mov	r6, r2
    startWrite();
   b51c0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b51c2:	6823      	ldr	r3, [r4, #0]
   b51c4:	f8cd 8000 	str.w	r8, [sp]
   b51c8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b51cc:	4632      	mov	r2, r6
   b51ce:	462b      	mov	r3, r5
   b51d0:	4639      	mov	r1, r7
   b51d2:	4620      	mov	r0, r4
   b51d4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b51d6:	6823      	ldr	r3, [r4, #0]
   b51d8:	f8cd 8000 	str.w	r8, [sp]
   b51dc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b51e0:	4432      	add	r2, r6
   b51e2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b51e6:	4639      	mov	r1, r7
   b51e8:	462b      	mov	r3, r5
   b51ea:	4620      	mov	r0, r4
   b51ec:	b212      	sxth	r2, r2
   b51ee:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b51f0:	6823      	ldr	r3, [r4, #0]
   b51f2:	f8cd 8000 	str.w	r8, [sp]
   b51f6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b51fa:	4632      	mov	r2, r6
   b51fc:	464b      	mov	r3, r9
   b51fe:	4639      	mov	r1, r7
   b5200:	4620      	mov	r0, r4
   b5202:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5204:	1e6b      	subs	r3, r5, #1
   b5206:	19d9      	adds	r1, r3, r7
   b5208:	6823      	ldr	r3, [r4, #0]
   b520a:	f8cd 8000 	str.w	r8, [sp]
   b520e:	6a1d      	ldr	r5, [r3, #32]
   b5210:	4620      	mov	r0, r4
   b5212:	464b      	mov	r3, r9
   b5214:	4632      	mov	r2, r6
   b5216:	b209      	sxth	r1, r1
   b5218:	47a8      	blx	r5
    endWrite();
   b521a:	6823      	ldr	r3, [r4, #0]
   b521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b521e:	4620      	mov	r0, r4
}
   b5220:	b002      	add	sp, #8
   b5222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5226:	4718      	bx	r3

000b5228 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5228:	4770      	bx	lr

000b522a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b522a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b522e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5232:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5234:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5236:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b523a:	bf59      	ittee	pl
   b523c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b523e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5240:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5242:	81c3      	strhmi	r3, [r0, #14]
}
   b5244:	4770      	bx	lr
	...

000b5248 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5248:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b524a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b524c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b524e:	4a07      	ldr	r2, [pc, #28]	; (b526c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5250:	4d07      	ldr	r5, [pc, #28]	; (b5270 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5252:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5254:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5256:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b525c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5260:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5262:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5264:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5266:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5268:	6204      	str	r4, [r0, #32]
}
   b526a:	bd30      	pop	{r4, r5, pc}
   b526c:	01000101 	.word	0x01000101
   b5270:	000b8e94 	.word	0x000b8e94

000b5274 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5278:	b089      	sub	sp, #36	; 0x24
   b527a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b527e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5280:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5284:	9304      	str	r3, [sp, #16]
   b5286:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b528a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b528c:	9305      	str	r3, [sp, #20]
   b528e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5292:	4604      	mov	r4, r0
    startWrite();
   b5294:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5296:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b529a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b529e:	bf48      	it	mi
   b52a0:	f108 020e 	addmi.w	r2, r8, #14
   b52a4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b52a8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b52aa:	4635      	mov	r5, r6
   b52ac:	9b03      	ldr	r3, [sp, #12]
   b52ae:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b52b0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b52b4:	189a      	adds	r2, r3, r2
   b52b6:	9b05      	ldr	r3, [sp, #20]
   b52b8:	428b      	cmp	r3, r1
   b52ba:	b212      	sxth	r2, r2
   b52bc:	dd27      	ble.n	b530e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b52be:	9b04      	ldr	r3, [sp, #16]
   b52c0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b52c2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b52c6:	9306      	str	r3, [sp, #24]
   b52c8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b52cc:	4580      	cmp	r8, r0
   b52ce:	fa1f f189 	uxth.w	r1, r9
   b52d2:	dd17      	ble.n	b5304 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b52d4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b52d6:	bf05      	ittet	eq
   b52d8:	9b06      	ldreq	r3, [sp, #24]
   b52da:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b52dc:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b52de:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b52e0:	bf18      	it	ne
   b52e2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b52e4:	062b      	lsls	r3, r5, #24
   b52e6:	d50a      	bpl.n	b52fe <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b52e8:	9b02      	ldr	r3, [sp, #8]
   b52ea:	6820      	ldr	r0, [r4, #0]
   b52ec:	9207      	str	r2, [sp, #28]
   b52ee:	4419      	add	r1, r3
   b52f0:	6983      	ldr	r3, [r0, #24]
   b52f2:	b209      	sxth	r1, r1
   b52f4:	461f      	mov	r7, r3
   b52f6:	4620      	mov	r0, r4
   b52f8:	4653      	mov	r3, sl
   b52fa:	47b8      	blx	r7
   b52fc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b52fe:	f109 0901 	add.w	r9, r9, #1
   b5302:	e7e1      	b.n	b52c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5304:	9b01      	ldr	r3, [sp, #4]
   b5306:	3301      	adds	r3, #1
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	445e      	add	r6, fp
   b530c:	e7ce      	b.n	b52ac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b530e:	6823      	ldr	r3, [r4, #0]
   b5310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5312:	4620      	mov	r0, r4
}
   b5314:	b009      	add	sp, #36	; 0x24
   b5316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b531a:	4718      	bx	r3

000b531c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5320:	ed2d 8b02 	vpush	{d8}
   b5324:	b091      	sub	sp, #68	; 0x44
   b5326:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5328:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b532a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b532e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5332:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5336:	9103      	str	r1, [sp, #12]
   b5338:	461f      	mov	r7, r3
   b533a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b533e:	9304      	str	r3, [sp, #16]
   b5340:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5342:	2a00      	cmp	r2, #0
   b5344:	f040 80c5 	bne.w	b54d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5348:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b534c:	428b      	cmp	r3, r1
   b534e:	f340 814c 	ble.w	b55ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5352:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5356:	42b3      	cmp	r3, r6
   b5358:	f340 8147 	ble.w	b55ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b535c:	2306      	movs	r3, #6
   b535e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5362:	2b00      	cmp	r3, #0
   b5364:	f340 8141 	ble.w	b55ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5368:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b536c:	2b00      	cmp	r3, #0
   b536e:	f340 813c 	ble.w	b55ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5372:	7f03      	ldrb	r3, [r0, #28]
   b5374:	b91b      	cbnz	r3, b537e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5376:	2faf      	cmp	r7, #175	; 0xaf
   b5378:	bf84      	itt	hi
   b537a:	3701      	addhi	r7, #1
   b537c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b537e:	f8db 3000 	ldr.w	r3, [fp]
   b5382:	4658      	mov	r0, fp
   b5384:	695b      	ldr	r3, [r3, #20]
   b5386:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5388:	2205      	movs	r2, #5
   b538a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b538c:	2200      	movs	r2, #0
   b538e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5390:	4a98      	ldr	r2, [pc, #608]	; (b55f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5392:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5396:	18d3      	adds	r3, r2, r3
   b5398:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b539a:	b2b3      	uxth	r3, r6
   b539c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b539e:	9a05      	ldr	r2, [sp, #20]
   b53a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b53a2:	5c9b      	ldrb	r3, [r3, r2]
   b53a4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b53a6:	b2ab      	uxth	r3, r5
   b53a8:	930b      	str	r3, [sp, #44]	; 0x2c
   b53aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b53ae:	9308      	str	r3, [sp, #32]
   b53b0:	9b03      	ldr	r3, [sp, #12]
   b53b2:	fb02 f905 	mul.w	r9, r2, r5
   b53b6:	fa19 f983 	uxtah	r9, r9, r3
   b53ba:	fa0f f389 	sxth.w	r3, r9
   b53be:	ee08 3a10 	vmov	s16, r3
   b53c2:	2308      	movs	r3, #8
   b53c4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b53c6:	9b03      	ldr	r3, [sp, #12]
   b53c8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b53cc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b53d0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b53d4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b53d6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b53da:	07d2      	lsls	r2, r2, #31
   b53dc:	d552      	bpl.n	b5484 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b53de:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b53e0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b53e4:	d13e      	bne.n	b5464 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b53e6:	2c01      	cmp	r4, #1
   b53e8:	d13c      	bne.n	b5464 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b53ea:	699b      	ldr	r3, [r3, #24]
   b53ec:	9906      	ldr	r1, [sp, #24]
   b53ee:	461f      	mov	r7, r3
   b53f0:	9b04      	ldr	r3, [sp, #16]
   b53f2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b53f4:	b212      	sxth	r2, r2
   b53f6:	4651      	mov	r1, sl
   b53f8:	4658      	mov	r0, fp
   b53fa:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b53fc:	f109 0301 	add.w	r3, r9, #1
   b5400:	fa4f f983 	sxtb.w	r9, r3
   b5404:	9b07      	ldr	r3, [sp, #28]
   b5406:	085b      	lsrs	r3, r3, #1
   b5408:	9307      	str	r3, [sp, #28]
   b540a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b540c:	3b01      	subs	r3, #1
   b540e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5412:	930a      	str	r3, [sp, #40]	; 0x28
   b5414:	d1de      	bne.n	b53d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5416:	9f05      	ldr	r7, [sp, #20]
   b5418:	3701      	adds	r7, #1
   b541a:	b27b      	sxtb	r3, r7
   b541c:	9305      	str	r3, [sp, #20]
   b541e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5420:	3b01      	subs	r3, #1
   b5422:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5426:	9309      	str	r3, [sp, #36]	; 0x24
   b5428:	d1b9      	bne.n	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b542a:	9b04      	ldr	r3, [sp, #16]
   b542c:	4543      	cmp	r3, r8
   b542e:	d00f      	beq.n	b5450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5430:	2d01      	cmp	r5, #1
   b5432:	f8db 3000 	ldr.w	r3, [fp]
   b5436:	d13b      	bne.n	b54b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5438:	2c01      	cmp	r4, #1
   b543a:	d139      	bne.n	b54b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b543c:	9908      	ldr	r1, [sp, #32]
   b543e:	f8cd 8000 	str.w	r8, [sp]
   b5442:	3105      	adds	r1, #5
   b5444:	6a1c      	ldr	r4, [r3, #32]
   b5446:	4632      	mov	r2, r6
   b5448:	2308      	movs	r3, #8
   b544a:	b209      	sxth	r1, r1
   b544c:	4658      	mov	r0, fp
   b544e:	47a0      	blx	r4
        endWrite();
   b5450:	f8db 3000 	ldr.w	r3, [fp]
   b5454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5456:	4658      	mov	r0, fp
}
   b5458:	b011      	add	sp, #68	; 0x44
   b545a:	ecbd 8b02 	vpop	{d8}
   b545e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5462:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5464:	9906      	ldr	r1, [sp, #24]
   b5466:	fb14 f202 	smulbb	r2, r4, r2
   b546a:	440a      	add	r2, r1
   b546c:	9904      	ldr	r1, [sp, #16]
   b546e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5470:	9400      	str	r4, [sp, #0]
   b5472:	69db      	ldr	r3, [r3, #28]
   b5474:	ee18 1a10 	vmov	r1, s16
   b5478:	461f      	mov	r7, r3
   b547a:	b212      	sxth	r2, r2
   b547c:	462b      	mov	r3, r5
   b547e:	4658      	mov	r0, fp
   b5480:	47b8      	blx	r7
   b5482:	e7bb      	b.n	b53fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5484:	9a04      	ldr	r2, [sp, #16]
   b5486:	4542      	cmp	r2, r8
   b5488:	d0b8      	beq.n	b53fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b548a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b548c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5490:	d107      	bne.n	b54a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5492:	2c01      	cmp	r4, #1
   b5494:	d105      	bne.n	b54a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5496:	699b      	ldr	r3, [r3, #24]
   b5498:	9906      	ldr	r1, [sp, #24]
   b549a:	461f      	mov	r7, r3
   b549c:	440a      	add	r2, r1
   b549e:	4643      	mov	r3, r8
   b54a0:	e7a8      	b.n	b53f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b54a2:	9906      	ldr	r1, [sp, #24]
   b54a4:	f8cd 8004 	str.w	r8, [sp, #4]
   b54a8:	fb14 f202 	smulbb	r2, r4, r2
   b54ac:	440a      	add	r2, r1
   b54ae:	e7df      	b.n	b5470 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b54b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b54b2:	f8cd 8004 	str.w	r8, [sp, #4]
   b54b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b54ba:	9a08      	ldr	r2, [sp, #32]
   b54bc:	00e4      	lsls	r4, r4, #3
   b54be:	440a      	add	r2, r1
   b54c0:	4611      	mov	r1, r2
   b54c2:	9400      	str	r4, [sp, #0]
   b54c4:	69dc      	ldr	r4, [r3, #28]
   b54c6:	4632      	mov	r2, r6
   b54c8:	462b      	mov	r3, r5
   b54ca:	b209      	sxth	r1, r1
   b54cc:	4658      	mov	r0, fp
   b54ce:	47a0      	blx	r4
        endWrite();
   b54d0:	e7be      	b.n	b5450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b54d2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b54d4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b54d6:	6812      	ldr	r2, [r2, #0]
   b54d8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b54da:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b54dc:	b2ff      	uxtb	r7, r7
   b54de:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b54e2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b54e6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b54e8:	789a      	ldrb	r2, [r3, #2]
   b54ea:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b54ec:	78da      	ldrb	r2, [r3, #3]
   b54ee:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b54f0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b54f2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b54f6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b54fa:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b54fc:	d801      	bhi.n	b5502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b54fe:	2c01      	cmp	r4, #1
   b5500:	d957      	bls.n	b55b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5502:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5506:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5508:	fa0f f38a 	sxth.w	r3, sl
   b550c:	9307      	str	r3, [sp, #28]
        startWrite();
   b550e:	f8db 3000 	ldr.w	r3, [fp]
   b5512:	4658      	mov	r0, fp
   b5514:	695b      	ldr	r3, [r3, #20]
   b5516:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5518:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b551a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b551e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5520:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5524:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5526:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5528:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b552a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b552c:	429f      	cmp	r7, r3
   b552e:	d28f      	bcs.n	b5450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5530:	9b07      	ldr	r3, [sp, #28]
   b5532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5534:	443b      	add	r3, r7
   b5536:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b553a:	2200      	movs	r2, #0
   b553c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b553e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5540:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5542:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5546:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b554a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b554e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5550:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5552:	9905      	ldr	r1, [sp, #20]
   b5554:	4291      	cmp	r1, r2
   b5556:	d241      	bcs.n	b55dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5558:	1c5a      	adds	r2, r3, #1
   b555a:	b2d2      	uxtb	r2, r2
   b555c:	075b      	lsls	r3, r3, #29
   b555e:	920d      	str	r2, [sp, #52]	; 0x34
   b5560:	d107      	bne.n	b5572 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5562:	9b06      	ldr	r3, [sp, #24]
   b5564:	9906      	ldr	r1, [sp, #24]
   b5566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5568:	3301      	adds	r3, #1
   b556a:	b29b      	uxth	r3, r3
   b556c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5570:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5572:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5576:	d012      	beq.n	b559e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5578:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b557a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b557e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5582:	d11a      	bne.n	b55ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5584:	2c01      	cmp	r4, #1
   b5586:	d118      	bne.n	b55ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b558a:	699b      	ldr	r3, [r3, #24]
   b558c:	4411      	add	r1, r2
   b558e:	9a05      	ldr	r2, [sp, #20]
   b5590:	4411      	add	r1, r2
   b5592:	461e      	mov	r6, r3
   b5594:	4652      	mov	r2, sl
   b5596:	9b04      	ldr	r3, [sp, #16]
   b5598:	b209      	sxth	r1, r1
   b559a:	4658      	mov	r0, fp
   b559c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b559e:	9e05      	ldr	r6, [sp, #20]
   b55a0:	3601      	adds	r6, #1
   b55a2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b55a4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b55a8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b55aa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b55ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b55b0:	e7ce      	b.n	b5550 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b55b2:	2300      	movs	r3, #0
   b55b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b55b8:	e7a9      	b.n	b550e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55ba:	9805      	ldr	r0, [sp, #20]
   b55bc:	9a08      	ldr	r2, [sp, #32]
   b55be:	4402      	add	r2, r0
   b55c0:	fb02 1105 	mla	r1, r2, r5, r1
   b55c4:	9a04      	ldr	r2, [sp, #16]
   b55c6:	e9cd 4200 	strd	r4, r2, [sp]
   b55ca:	69db      	ldr	r3, [r3, #28]
   b55cc:	ee18 2a10 	vmov	r2, s16
   b55d0:	461e      	mov	r6, r3
   b55d2:	b209      	sxth	r1, r1
   b55d4:	462b      	mov	r3, r5
   b55d6:	4658      	mov	r0, fp
   b55d8:	47b0      	blx	r6
   b55da:	e7e0      	b.n	b559e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b55dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b55de:	3701      	adds	r7, #1
   b55e0:	4498      	add	r8, r3
   b55e2:	fa5f f888 	uxtb.w	r8, r8
   b55e6:	b2ff      	uxtb	r7, r7
   b55e8:	e79f      	b.n	b552a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b55ea:	b011      	add	sp, #68	; 0x44
   b55ec:	ecbd 8b02 	vpop	{d8}
   b55f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b55f4:	000b898c 	.word	0x000b898c

000b55f8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b55f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b55fa:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b55fc:	b085      	sub	sp, #20
   b55fe:	4604      	mov	r4, r0
   b5600:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5602:	2a00      	cmp	r2, #0
   b5604:	d134      	bne.n	b5670 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5606:	290a      	cmp	r1, #10
   b5608:	d108      	bne.n	b561c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b560a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b560c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b560e:	7e42      	ldrb	r2, [r0, #25]
   b5610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5614:	8263      	strh	r3, [r4, #18]
}
   b5616:	2001      	movs	r0, #1
   b5618:	b005      	add	sp, #20
   b561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b561c:	290d      	cmp	r1, #13
   b561e:	d0fa      	beq.n	b5616 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5620:	7ee1      	ldrb	r1, [r4, #27]
   b5622:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5624:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5626:	b171      	cbz	r1, b5646 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5628:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b562c:	2106      	movs	r1, #6
   b562e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5632:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5636:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5638:	bfc1      	itttt	gt
   b563a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b563e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5640:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5644:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5646:	8ae2      	ldrh	r2, [r4, #22]
   b5648:	9201      	str	r2, [sp, #4]
   b564a:	8aa2      	ldrh	r2, [r4, #20]
   b564c:	9200      	str	r2, [sp, #0]
   b564e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5652:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5656:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b565a:	4620      	mov	r0, r4
   b565c:	f7ff fe5e 	bl	b531c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5660:	7e23      	ldrb	r3, [r4, #24]
   b5662:	8a22      	ldrh	r2, [r4, #16]
   b5664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5668:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b566c:	8223      	strh	r3, [r4, #16]
   b566e:	e7d2      	b.n	b5616 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5670:	290a      	cmp	r1, #10
   b5672:	d107      	bne.n	b5684 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5674:	2300      	movs	r3, #0
   b5676:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5678:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b567a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b567c:	8a43      	ldrh	r3, [r0, #18]
   b567e:	fb01 3302 	mla	r3, r1, r2, r3
   b5682:	e7c7      	b.n	b5614 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5684:	290d      	cmp	r1, #13
   b5686:	d0c6      	beq.n	b5616 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5688:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b568a:	42a9      	cmp	r1, r5
   b568c:	d3c3      	bcc.n	b5616 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b568e:	7a51      	ldrb	r1, [r2, #9]
   b5690:	4299      	cmp	r1, r3
   b5692:	d3c0      	bcc.n	b5616 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5694:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5696:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5698:	b2ed      	uxtb	r5, r5
   b569a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b569e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b56a0:	b328      	cbz	r0, b56ee <_ZN12Adafruit_GFX5writeEh+0xf6>
   b56a2:	78e9      	ldrb	r1, [r5, #3]
   b56a4:	b319      	cbz	r1, b56ee <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b56a6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56a8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b56aa:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b56ac:	b191      	cbz	r1, b56d4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b56ae:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b56b2:	4408      	add	r0, r1
   b56b4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b56b8:	fb06 1100 	mla	r1, r6, r0, r1
   b56bc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b56c0:	4281      	cmp	r1, r0
   b56c2:	dd07      	ble.n	b56d4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b56c4:	2000      	movs	r0, #0
   b56c6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b56c8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b56cc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b56ce:	fb02 1207 	mla	r2, r2, r7, r1
   b56d2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b56d4:	8ae2      	ldrh	r2, [r4, #22]
   b56d6:	9201      	str	r2, [sp, #4]
   b56d8:	8aa2      	ldrh	r2, [r4, #20]
   b56da:	9200      	str	r2, [sp, #0]
   b56dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b56e0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b56e4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b56e8:	4620      	mov	r0, r4
   b56ea:	f7ff fe17 	bl	b531c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b56ee:	7929      	ldrb	r1, [r5, #4]
   b56f0:	7e22      	ldrb	r2, [r4, #24]
   b56f2:	8a23      	ldrh	r3, [r4, #16]
   b56f4:	fb01 3302 	mla	r3, r1, r2, r3
   b56f8:	e7b8      	b.n	b566c <_ZN12Adafruit_GFX5writeEh+0x74>

000b56fa <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b56fa:	2901      	cmp	r1, #1
   b56fc:	bf38      	it	cc
   b56fe:	2101      	movcc	r1, #1
   b5700:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5702:	7641      	strb	r1, [r0, #25]
}
   b5704:	4770      	bx	lr
	...

000b5708 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5708:	b508      	push	{r3, lr}
   b570a:	4b02      	ldr	r3, [pc, #8]	; (b5714 <HAL_USB_USART_Init+0xc>)
   b570c:	681b      	ldr	r3, [r3, #0]
   b570e:	681b      	ldr	r3, [r3, #0]
   b5710:	9301      	str	r3, [sp, #4]
   b5712:	bd08      	pop	{r3, pc}
   b5714:	0003024c 	.word	0x0003024c

000b5718 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5718:	b508      	push	{r3, lr}
   b571a:	4b02      	ldr	r3, [pc, #8]	; (b5724 <HAL_USB_USART_Available_Data+0xc>)
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	691b      	ldr	r3, [r3, #16]
   b5720:	9301      	str	r3, [sp, #4]
   b5722:	bd08      	pop	{r3, pc}
   b5724:	0003024c 	.word	0x0003024c

000b5728 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5728:	b508      	push	{r3, lr}
   b572a:	4b02      	ldr	r3, [pc, #8]	; (b5734 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b572c:	681b      	ldr	r3, [r3, #0]
   b572e:	695b      	ldr	r3, [r3, #20]
   b5730:	9301      	str	r3, [sp, #4]
   b5732:	bd08      	pop	{r3, pc}
   b5734:	0003024c 	.word	0x0003024c

000b5738 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5738:	b508      	push	{r3, lr}
   b573a:	4b02      	ldr	r3, [pc, #8]	; (b5744 <HAL_USB_USART_Receive_Data+0xc>)
   b573c:	681b      	ldr	r3, [r3, #0]
   b573e:	699b      	ldr	r3, [r3, #24]
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	bd08      	pop	{r3, pc}
   b5744:	0003024c 	.word	0x0003024c

000b5748 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <HAL_USB_USART_Send_Data+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	69db      	ldr	r3, [r3, #28]
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	0003024c 	.word	0x0003024c

000b5758 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <HAL_USB_USART_Flush_Data+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	6a1b      	ldr	r3, [r3, #32]
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	0003024c 	.word	0x0003024c

000b5768 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <hal_i2c_set_speed+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	681b      	ldr	r3, [r3, #0]
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030228 	.word	0x00030228

000b5778 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <hal_i2c_begin+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	68db      	ldr	r3, [r3, #12]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	00030228 	.word	0x00030228

000b5788 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <hal_i2c_begin_transmission+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	699b      	ldr	r3, [r3, #24]
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	00030228 	.word	0x00030228

000b5798 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <hal_i2c_end_transmission+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	69db      	ldr	r3, [r3, #28]
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	00030228 	.word	0x00030228

000b57a8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <hal_i2c_write+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	6a1b      	ldr	r3, [r3, #32]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	00030228 	.word	0x00030228

000b57b8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <hal_i2c_available+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030228 	.word	0x00030228

000b57c8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <hal_i2c_read+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030228 	.word	0x00030228

000b57d8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <hal_i2c_peek+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030228 	.word	0x00030228

000b57e8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <hal_i2c_flush+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030228 	.word	0x00030228

000b57f8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <hal_i2c_is_enabled+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030228 	.word	0x00030228

000b5808 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <hal_i2c_init+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030228 	.word	0x00030228

000b5818 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <hal_spi_begin+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	681b      	ldr	r3, [r3, #0]
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030230 	.word	0x00030230

000b5828 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <hal_spi_transfer+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	695b      	ldr	r3, [r3, #20]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030230 	.word	0x00030230

000b5838 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <hal_spi_init+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	69db      	ldr	r3, [r3, #28]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030230 	.word	0x00030230

000b5848 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <hal_spi_is_enabled+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	6a1b      	ldr	r3, [r3, #32]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030230 	.word	0x00030230

000b5858 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <hal_spi_info+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030230 	.word	0x00030230

000b5868 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <hal_spi_set_settings+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030230 	.word	0x00030230

000b5878 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <hal_spi_acquire+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030230 	.word	0x00030230

000b5888 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <hal_spi_release+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030230 	.word	0x00030230

000b5898 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <hal_usart_write+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	68db      	ldr	r3, [r3, #12]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	0003023c 	.word	0x0003023c

000b58a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <hal_usart_available+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	691b      	ldr	r3, [r3, #16]
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	0003023c 	.word	0x0003023c

000b58b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <hal_usart_read+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	695b      	ldr	r3, [r3, #20]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	0003023c 	.word	0x0003023c

000b58c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <hal_usart_peek+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	699b      	ldr	r3, [r3, #24]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	0003023c 	.word	0x0003023c

000b58d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <hal_usart_flush+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	69db      	ldr	r3, [r3, #28]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	0003023c 	.word	0x0003023c

000b58e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <hal_usart_is_enabled+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	6a1b      	ldr	r3, [r3, #32]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	0003023c 	.word	0x0003023c

000b58f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <hal_usart_available_data_for_write+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003023c 	.word	0x0003023c

000b5908 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <hal_usart_init_ex+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003023c 	.word	0x0003023c

000b5918 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <inet_inet_ntop+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	695b      	ldr	r3, [r3, #20]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	00030264 	.word	0x00030264

000b5928 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <os_mutex_create+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	00030248 	.word	0x00030248

000b5938 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <os_mutex_destroy+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	00030248 	.word	0x00030248

000b5948 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <os_mutex_recursive_create+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	00030248 	.word	0x00030248

000b5958 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <os_mutex_recursive_lock+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	00030248 	.word	0x00030248

000b5968 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <os_mutex_recursive_unlock+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	00030248 	.word	0x00030248

000b5978 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <hal_ble_stack_init+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	689b      	ldr	r3, [r3, #8]
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	00030278 	.word	0x00030278

000b5988 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <hal_ble_gap_set_advertising_data+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	00030278 	.word	0x00030278

000b5998 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <hal_ble_gap_set_scan_response_data+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	00030278 	.word	0x00030278

000b59a8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <hal_ble_gap_start_advertising+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	00030278 	.word	0x00030278

000b59b8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b03      	ldr	r3, [pc, #12]	; (b59c8 <hal_ble_gap_disconnect+0x10>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b59c2:	9301      	str	r3, [sp, #4]
   b59c4:	bd08      	pop	{r3, pc}
   b59c6:	0000      	.short	0x0000
   b59c8:	00030278 	.word	0x00030278

000b59cc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b03      	ldr	r3, [pc, #12]	; (b59dc <hal_ble_gatt_server_add_service+0x10>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b59d6:	9301      	str	r3, [sp, #4]
   b59d8:	bd08      	pop	{r3, pc}
   b59da:	0000      	.short	0x0000
   b59dc:	00030278 	.word	0x00030278

000b59e0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b03      	ldr	r3, [pc, #12]	; (b59f0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b59ea:	9301      	str	r3, [sp, #4]
   b59ec:	bd08      	pop	{r3, pc}
   b59ee:	0000      	.short	0x0000
   b59f0:	00030278 	.word	0x00030278

000b59f4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b59f4:	b508      	push	{r3, lr}
   b59f6:	4b03      	ldr	r3, [pc, #12]	; (b5a04 <hal_ble_gatt_client_write_with_response+0x10>)
   b59f8:	681b      	ldr	r3, [r3, #0]
   b59fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b59fe:	9301      	str	r3, [sp, #4]
   b5a00:	bd08      	pop	{r3, pc}
   b5a02:	0000      	.short	0x0000
   b5a04:	00030278 	.word	0x00030278

000b5a08 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b03      	ldr	r3, [pc, #12]	; (b5a18 <hal_ble_gatt_client_write_without_response+0x10>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5a12:	9301      	str	r3, [sp, #4]
   b5a14:	bd08      	pop	{r3, pc}
   b5a16:	0000      	.short	0x0000
   b5a18:	00030278 	.word	0x00030278

000b5a1c <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b03      	ldr	r3, [pc, #12]	; (b5a2c <hal_ble_gap_get_connection_info+0x10>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b5a26:	9301      	str	r3, [sp, #4]
   b5a28:	bd08      	pop	{r3, pc}
   b5a2a:	0000      	.short	0x0000
   b5a2c:	00030278 	.word	0x00030278

000b5a30 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b03      	ldr	r3, [pc, #12]	; (b5a40 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5a3a:	9301      	str	r3, [sp, #4]
   b5a3c:	bd08      	pop	{r3, pc}
   b5a3e:	0000      	.short	0x0000
   b5a40:	00030278 	.word	0x00030278

000b5a44 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5a44:	b508      	push	{r3, lr}
   b5a46:	4b03      	ldr	r3, [pc, #12]	; (b5a54 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5a48:	681b      	ldr	r3, [r3, #0]
   b5a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5a4e:	9301      	str	r3, [sp, #4]
   b5a50:	bd08      	pop	{r3, pc}
   b5a52:	0000      	.short	0x0000
   b5a54:	00030278 	.word	0x00030278

000b5a58 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b03      	ldr	r3, [pc, #12]	; (b5a68 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5a62:	9301      	str	r3, [sp, #4]
   b5a64:	bd08      	pop	{r3, pc}
   b5a66:	0000      	.short	0x0000
   b5a68:	00030278 	.word	0x00030278

000b5a6c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b03      	ldr	r3, [pc, #12]	; (b5a7c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5a76:	9301      	str	r3, [sp, #4]
   b5a78:	bd08      	pop	{r3, pc}
   b5a7a:	0000      	.short	0x0000
   b5a7c:	00030278 	.word	0x00030278

000b5a80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <HAL_RNG_GetRandomNumber+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	685b      	ldr	r3, [r3, #4]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030218 	.word	0x00030218

000b5a90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <HAL_Delay_Microseconds+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	68db      	ldr	r3, [r3, #12]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030218 	.word	0x00030218

000b5aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	695b      	ldr	r3, [r3, #20]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030218 	.word	0x00030218

000b5ab0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <HAL_Pin_Mode+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	689b      	ldr	r3, [r3, #8]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	0003022c 	.word	0x0003022c

000b5ac0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <HAL_Get_Pin_Mode+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	68db      	ldr	r3, [r3, #12]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	0003022c 	.word	0x0003022c

000b5ad0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <HAL_GPIO_Write+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	691b      	ldr	r3, [r3, #16]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	0003022c 	.word	0x0003022c

000b5ae0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <HAL_GPIO_Read+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	695b      	ldr	r3, [r3, #20]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	0003022c 	.word	0x0003022c

000b5af0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <netdb_freeaddrinfo+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	689b      	ldr	r3, [r3, #8]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030268 	.word	0x00030268

000b5b00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <netdb_getaddrinfo+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	68db      	ldr	r3, [r3, #12]
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030268 	.word	0x00030268

000b5b10 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <LED_SetSignalingColor+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	685b      	ldr	r3, [r3, #4]
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030260 	.word	0x00030260

000b5b20 <LED_RGB_IsOverRidden>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <LED_RGB_IsOverRidden+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	699b      	ldr	r3, [r3, #24]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030260 	.word	0x00030260

000b5b30 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <LED_On+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	69db      	ldr	r3, [r3, #28]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030260 	.word	0x00030260

000b5b40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <panic_+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030260 	.word	0x00030260

000b5b50 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <log_message+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030260 	.word	0x00030260

000b5b60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030244 	.word	0x00030244

000b5b70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <network_connect+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	685b      	ldr	r3, [r3, #4]
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030240 	.word	0x00030240

000b5b80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <network_connecting+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	689b      	ldr	r3, [r3, #8]
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	00030240 	.word	0x00030240

000b5b90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <network_disconnect+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	68db      	ldr	r3, [r3, #12]
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	00030240 	.word	0x00030240

000b5ba0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <network_ready+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	691b      	ldr	r3, [r3, #16]
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	00030240 	.word	0x00030240

000b5bb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <network_on+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	695b      	ldr	r3, [r3, #20]
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	00030240 	.word	0x00030240

000b5bc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <network_off+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	699b      	ldr	r3, [r3, #24]
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	00030240 	.word	0x00030240

000b5bd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <network_listen+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	69db      	ldr	r3, [r3, #28]
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030240 	.word	0x00030240

000b5be0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <network_listening+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	6a1b      	ldr	r3, [r3, #32]
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030240 	.word	0x00030240

000b5bf0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <network_set_listen_timeout+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030240 	.word	0x00030240

000b5c00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <network_get_listen_timeout+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	00030240 	.word	0x00030240

000b5c10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <network_is_on+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030240 	.word	0x00030240

000b5c20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <network_is_off+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030240 	.word	0x00030240

000b5c30 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <set_system_mode+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	685b      	ldr	r3, [r3, #4]
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030220 	.word	0x00030220

000b5c40 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <system_delay_ms+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	695b      	ldr	r3, [r3, #20]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030220 	.word	0x00030220

000b5c50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <system_thread_set_state+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030220 	.word	0x00030220

000b5c60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b03      	ldr	r3, [pc, #12]	; (b5c70 <system_ctrl_set_app_request_handler+0x10>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5c6a:	9301      	str	r3, [sp, #4]
   b5c6c:	bd08      	pop	{r3, pc}
   b5c6e:	0000      	.short	0x0000
   b5c70:	00030220 	.word	0x00030220

000b5c74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5c74:	b508      	push	{r3, lr}
   b5c76:	4b03      	ldr	r3, [pc, #12]	; (b5c84 <system_ctrl_set_result+0x10>)
   b5c78:	681b      	ldr	r3, [r3, #0]
   b5c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5c7e:	9301      	str	r3, [sp, #4]
   b5c80:	bd08      	pop	{r3, pc}
   b5c82:	0000      	.short	0x0000
   b5c84:	00030220 	.word	0x00030220

000b5c88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5c88:	b508      	push	{r3, lr}
   b5c8a:	4b02      	ldr	r3, [pc, #8]	; (b5c94 <malloc+0xc>)
   b5c8c:	681b      	ldr	r3, [r3, #0]
   b5c8e:	681b      	ldr	r3, [r3, #0]
   b5c90:	9301      	str	r3, [sp, #4]
   b5c92:	bd08      	pop	{r3, pc}
   b5c94:	0003021c 	.word	0x0003021c

000b5c98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5c98:	b508      	push	{r3, lr}
   b5c9a:	4b02      	ldr	r3, [pc, #8]	; (b5ca4 <free+0xc>)
   b5c9c:	681b      	ldr	r3, [r3, #0]
   b5c9e:	685b      	ldr	r3, [r3, #4]
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	bd08      	pop	{r3, pc}
   b5ca4:	0003021c 	.word	0x0003021c

000b5ca8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	4b02      	ldr	r3, [pc, #8]	; (b5cb4 <realloc+0xc>)
   b5cac:	681b      	ldr	r3, [r3, #0]
   b5cae:	689b      	ldr	r3, [r3, #8]
   b5cb0:	9301      	str	r3, [sp, #4]
   b5cb2:	bd08      	pop	{r3, pc}
   b5cb4:	0003021c 	.word	0x0003021c

000b5cb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5cb8:	b508      	push	{r3, lr}
   b5cba:	4b02      	ldr	r3, [pc, #8]	; (b5cc4 <vsnprintf+0xc>)
   b5cbc:	681b      	ldr	r3, [r3, #0]
   b5cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5cc0:	9301      	str	r3, [sp, #4]
   b5cc2:	bd08      	pop	{r3, pc}
   b5cc4:	0003021c 	.word	0x0003021c

000b5cc8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5cc8:	b508      	push	{r3, lr}
   b5cca:	4b02      	ldr	r3, [pc, #8]	; (b5cd4 <abort+0xc>)
   b5ccc:	681b      	ldr	r3, [r3, #0]
   b5cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cd0:	9301      	str	r3, [sp, #4]
   b5cd2:	bd08      	pop	{r3, pc}
   b5cd4:	0003021c 	.word	0x0003021c

000b5cd8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5cd8:	b508      	push	{r3, lr}
   b5cda:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <__assert_func+0xc>)
   b5cdc:	681b      	ldr	r3, [r3, #0]
   b5cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ce0:	9301      	str	r3, [sp, #4]
   b5ce2:	bd08      	pop	{r3, pc}
   b5ce4:	0003021c 	.word	0x0003021c

000b5ce8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5ce8:	b508      	push	{r3, lr}
   b5cea:	4b02      	ldr	r3, [pc, #8]	; (b5cf4 <newlib_impure_ptr_callback+0xc>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	bd08      	pop	{r3, pc}
   b5cf4:	0003021c 	.word	0x0003021c

000b5cf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5cf8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5cfa:	6843      	ldr	r3, [r0, #4]
   b5cfc:	3b01      	subs	r3, #1
    {
   b5cfe:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5d00:	6043      	str	r3, [r0, #4]
   b5d02:	b963      	cbnz	r3, b5d1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5d04:	6803      	ldr	r3, [r0, #0]
   b5d06:	689b      	ldr	r3, [r3, #8]
   b5d08:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d0a:	68a3      	ldr	r3, [r4, #8]
   b5d0c:	3b01      	subs	r3, #1
   b5d0e:	60a3      	str	r3, [r4, #8]
   b5d10:	b92b      	cbnz	r3, b5d1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d12:	6823      	ldr	r3, [r4, #0]
   b5d14:	4620      	mov	r0, r4
   b5d16:	68db      	ldr	r3, [r3, #12]
    }
   b5d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d1c:	4718      	bx	r3
    }
   b5d1e:	bd10      	pop	{r4, pc}

000b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5d20:	b510      	push	{r4, lr}
   b5d22:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5d24:	6800      	ldr	r0, [r0, #0]
   b5d26:	b108      	cbz	r0, b5d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5d28:	f7ff ffe6 	bl	b5cf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	bd10      	pop	{r4, pc}

000b5d30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d30:	2300      	movs	r3, #0
   b5d32:	6840      	ldr	r0, [r0, #4]
   b5d34:	461a      	mov	r2, r3
   b5d36:	f7ff bf1b 	b.w	b5b70 <network_connect>

000b5d3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d3a:	6840      	ldr	r0, [r0, #4]
   b5d3c:	2200      	movs	r2, #0
   b5d3e:	2102      	movs	r1, #2
   b5d40:	f7ff bf26 	b.w	b5b90 <network_disconnect>

000b5d44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d44:	2200      	movs	r2, #0
   b5d46:	6840      	ldr	r0, [r0, #4]
   b5d48:	4611      	mov	r1, r2
   b5d4a:	f7ff bf19 	b.w	b5b80 <network_connecting>

000b5d4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d4e:	2200      	movs	r2, #0
   b5d50:	6840      	ldr	r0, [r0, #4]
   b5d52:	4611      	mov	r1, r2
   b5d54:	f7ff bf24 	b.w	b5ba0 <network_ready>

000b5d58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d58:	2300      	movs	r3, #0
   b5d5a:	6840      	ldr	r0, [r0, #4]
   b5d5c:	461a      	mov	r2, r3
   b5d5e:	4619      	mov	r1, r3
   b5d60:	f7ff bf26 	b.w	b5bb0 <network_on>

000b5d64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5d64:	2300      	movs	r3, #0
   b5d66:	6840      	ldr	r0, [r0, #4]
   b5d68:	461a      	mov	r2, r3
   b5d6a:	4619      	mov	r1, r3
   b5d6c:	f7ff bf28 	b.w	b5bc0 <network_off>

000b5d70 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d70:	6840      	ldr	r0, [r0, #4]
   b5d72:	2100      	movs	r1, #0
   b5d74:	f7ff bf4c 	b.w	b5c10 <network_is_on>

000b5d78 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d78:	6840      	ldr	r0, [r0, #4]
   b5d7a:	2100      	movs	r1, #0
   b5d7c:	f7ff bf50 	b.w	b5c20 <network_is_off>

000b5d80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d80:	6840      	ldr	r0, [r0, #4]
   b5d82:	2200      	movs	r2, #0
   b5d84:	f081 0101 	eor.w	r1, r1, #1
   b5d88:	f7ff bf22 	b.w	b5bd0 <network_listen>

000b5d8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d8c:	6840      	ldr	r0, [r0, #4]
   b5d8e:	2200      	movs	r2, #0
   b5d90:	f7ff bf2e 	b.w	b5bf0 <network_set_listen_timeout>

000b5d94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d94:	2200      	movs	r2, #0
   b5d96:	6840      	ldr	r0, [r0, #4]
   b5d98:	4611      	mov	r1, r2
   b5d9a:	f7ff bf31 	b.w	b5c00 <network_get_listen_timeout>

000b5d9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5d9e:	2200      	movs	r2, #0
   b5da0:	6840      	ldr	r0, [r0, #4]
   b5da2:	4611      	mov	r1, r2
   b5da4:	f7ff bf1c 	b.w	b5be0 <network_listening>

000b5da8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5dac:	b095      	sub	sp, #84	; 0x54
   b5dae:	4614      	mov	r4, r2
   b5db0:	460d      	mov	r5, r1
   b5db2:	4607      	mov	r7, r0
    IPAddress addr;
   b5db4:	f000 fa1e 	bl	b61f4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5db8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5dba:	221c      	movs	r2, #28
   b5dbc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5dbe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5dc0:	f002 f9c0 	bl	b8144 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5dc4:	2340      	movs	r3, #64	; 0x40
   b5dc6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5dc8:	4620      	mov	r0, r4
   b5dca:	466b      	mov	r3, sp
   b5dcc:	aa0c      	add	r2, sp, #48	; 0x30
   b5dce:	2100      	movs	r1, #0
   b5dd0:	f7ff fe96 	bl	b5b00 <netdb_getaddrinfo>
    if (!r) {
   b5dd4:	4604      	mov	r4, r0
   b5dd6:	2800      	cmp	r0, #0
   b5dd8:	d14b      	bne.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dda:	4602      	mov	r2, r0
   b5ddc:	2101      	movs	r1, #1
   b5dde:	6868      	ldr	r0, [r5, #4]
   b5de0:	f7ff fede 	bl	b5ba0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5de6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de8:	4622      	mov	r2, r4
   b5dea:	6868      	ldr	r0, [r5, #4]
   b5dec:	f7ff fed8 	bl	b5ba0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5df2:	4681      	mov	r9, r0
        bool ok = false;
   b5df4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df6:	2e00      	cmp	r6, #0
   b5df8:	d03b      	beq.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5dfa:	2900      	cmp	r1, #0
   b5dfc:	d139      	bne.n	b5e72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5dfe:	6873      	ldr	r3, [r6, #4]
   b5e00:	2b02      	cmp	r3, #2
   b5e02:	d003      	beq.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e04:	2b0a      	cmp	r3, #10
   b5e06:	d011      	beq.n	b5e2c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e08:	69f6      	ldr	r6, [r6, #28]
   b5e0a:	e7f4      	b.n	b5df6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5e0c:	f1b8 0f00 	cmp.w	r8, #0
   b5e10:	d0fa      	beq.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e12:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b5e14:	a806      	add	r0, sp, #24
   b5e16:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e18:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e1a:	f000 fa19 	bl	b6250 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e20:	1d3c      	adds	r4, r7, #4
   b5e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e24:	682b      	ldr	r3, [r5, #0]
   b5e26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e28:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5e2a:	e7ed      	b.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e2c:	f1b9 0f00 	cmp.w	r9, #0
   b5e30:	d0ea      	beq.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e32:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e34:	2210      	movs	r2, #16
   b5e36:	a801      	add	r0, sp, #4
   b5e38:	f002 f984 	bl	b8144 <memset>
                    a.v = 6;
   b5e3c:	2306      	movs	r3, #6
   b5e3e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e42:	ad01      	add	r5, sp, #4
   b5e44:	f104 0308 	add.w	r3, r4, #8
   b5e48:	3418      	adds	r4, #24
   b5e4a:	6818      	ldr	r0, [r3, #0]
   b5e4c:	6859      	ldr	r1, [r3, #4]
   b5e4e:	462a      	mov	r2, r5
   b5e50:	c203      	stmia	r2!, {r0, r1}
   b5e52:	3308      	adds	r3, #8
   b5e54:	42a3      	cmp	r3, r4
   b5e56:	4615      	mov	r5, r2
   b5e58:	d1f7      	bne.n	b5e4a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5e5a:	a901      	add	r1, sp, #4
   b5e5c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5e5e:	ad07      	add	r5, sp, #28
   b5e60:	f000 f9d6 	bl	b6210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e66:	1d3c      	adds	r4, r7, #4
   b5e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e6a:	682b      	ldr	r3, [r5, #0]
   b5e6c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e6e:	4649      	mov	r1, r9
   b5e70:	e7ca      	b.n	b5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e72:	9800      	ldr	r0, [sp, #0]
   b5e74:	f7ff fe3c 	bl	b5af0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e78:	4638      	mov	r0, r7
   b5e7a:	b015      	add	sp, #84	; 0x54
   b5e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5e80:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e82:	4a03      	ldr	r2, [pc, #12]	; (b5e90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e84:	601a      	str	r2, [r3, #0]
   b5e86:	2200      	movs	r2, #0
   b5e88:	605a      	str	r2, [r3, #4]

} // spark
   b5e8a:	4770      	bx	lr
   b5e8c:	2003e6bc 	.word	0x2003e6bc
   b5e90:	000b8eec 	.word	0x000b8eec

000b5e94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5e94:	2200      	movs	r2, #0
   b5e96:	6840      	ldr	r0, [r0, #4]
   b5e98:	4611      	mov	r1, r2
   b5e9a:	f7ff be81 	b.w	b5ba0 <network_ready>

000b5e9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5e9e:	2200      	movs	r2, #0
   b5ea0:	6840      	ldr	r0, [r0, #4]
   b5ea2:	4611      	mov	r1, r2
   b5ea4:	f7ff be9c 	b.w	b5be0 <network_listening>

000b5ea8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5ea8:	2200      	movs	r2, #0
   b5eaa:	6840      	ldr	r0, [r0, #4]
   b5eac:	4611      	mov	r1, r2
   b5eae:	f7ff bea7 	b.w	b5c00 <network_get_listen_timeout>

000b5eb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5eb2:	6840      	ldr	r0, [r0, #4]
   b5eb4:	2200      	movs	r2, #0
   b5eb6:	f7ff be9b 	b.w	b5bf0 <network_set_listen_timeout>

000b5eba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5eba:	6840      	ldr	r0, [r0, #4]
   b5ebc:	2200      	movs	r2, #0
   b5ebe:	f081 0101 	eor.w	r1, r1, #1
   b5ec2:	f7ff be85 	b.w	b5bd0 <network_listen>

000b5ec6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5ec6:	2300      	movs	r3, #0
   b5ec8:	6840      	ldr	r0, [r0, #4]
   b5eca:	461a      	mov	r2, r3
   b5ecc:	4619      	mov	r1, r3
   b5ece:	f7ff be77 	b.w	b5bc0 <network_off>

000b5ed2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ed2:	2300      	movs	r3, #0
   b5ed4:	6840      	ldr	r0, [r0, #4]
   b5ed6:	461a      	mov	r2, r3
   b5ed8:	4619      	mov	r1, r3
   b5eda:	f7ff be69 	b.w	b5bb0 <network_on>

000b5ede <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ede:	2200      	movs	r2, #0
   b5ee0:	6840      	ldr	r0, [r0, #4]
   b5ee2:	4611      	mov	r1, r2
   b5ee4:	f7ff be4c 	b.w	b5b80 <network_connecting>

000b5ee8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ee8:	6840      	ldr	r0, [r0, #4]
   b5eea:	2200      	movs	r2, #0
   b5eec:	2102      	movs	r1, #2
   b5eee:	f7ff be4f 	b.w	b5b90 <network_disconnect>

000b5ef2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5ef2:	2300      	movs	r3, #0
   b5ef4:	6840      	ldr	r0, [r0, #4]
   b5ef6:	461a      	mov	r2, r3
   b5ef8:	f7ff be3a 	b.w	b5b70 <network_connect>

000b5efc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5efc:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5efe:	2204      	movs	r2, #4
   b5f00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f02:	4a02      	ldr	r2, [pc, #8]	; (b5f0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f04:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f06:	4770      	bx	lr
   b5f08:	2003e6c4 	.word	0x2003e6c4
   b5f0c:	000b8f28 	.word	0x000b8f28

000b5f10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5f10:	4770      	bx	lr

000b5f12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f12:	7441      	strb	r1, [r0, #17]
}
   b5f14:	4770      	bx	lr

000b5f16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5f16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5f18:	7c00      	ldrb	r0, [r0, #16]
   b5f1a:	f7ff fced 	bl	b58f8 <hal_usart_available_data_for_write>
}
   b5f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f22:	bd08      	pop	{r3, pc}

000b5f24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5f24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5f26:	7c00      	ldrb	r0, [r0, #16]
   b5f28:	f7ff fcbe 	bl	b58a8 <hal_usart_available>
}
   b5f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f30:	bd08      	pop	{r3, pc}

000b5f32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5f32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5f34:	7c00      	ldrb	r0, [r0, #16]
   b5f36:	f7ff fcc7 	bl	b58c8 <hal_usart_peek>
}
   b5f3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f3e:	bd08      	pop	{r3, pc}

000b5f40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5f40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5f42:	7c00      	ldrb	r0, [r0, #16]
   b5f44:	f7ff fcb8 	bl	b58b8 <hal_usart_read>
}
   b5f48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f4c:	bd08      	pop	{r3, pc}

000b5f4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5f4e:	7c00      	ldrb	r0, [r0, #16]
   b5f50:	f7ff bcc2 	b.w	b58d8 <hal_usart_flush>

000b5f54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f56:	7c45      	ldrb	r5, [r0, #17]
{
   b5f58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f5a:	b12d      	cbz	r5, b5f68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5f5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5f5e:	b003      	add	sp, #12
   b5f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5f64:	f7ff bc98 	b.w	b5898 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f68:	7c00      	ldrb	r0, [r0, #16]
   b5f6a:	9101      	str	r1, [sp, #4]
   b5f6c:	f7ff fcc4 	bl	b58f8 <hal_usart_available_data_for_write>
   b5f70:	2800      	cmp	r0, #0
   b5f72:	9901      	ldr	r1, [sp, #4]
   b5f74:	dcf2      	bgt.n	b5f5c <_ZN11USARTSerial5writeEh+0x8>
}
   b5f76:	4628      	mov	r0, r5
   b5f78:	b003      	add	sp, #12
   b5f7a:	bd30      	pop	{r4, r5, pc}

000b5f7c <_ZN11USARTSerialD0Ev>:
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	2114      	movs	r1, #20
   b5f80:	4604      	mov	r4, r0
   b5f82:	f7fe f88a 	bl	b409a <_ZdlPvj>
   b5f86:	4620      	mov	r0, r4
   b5f88:	bd10      	pop	{r4, pc}
	...

000b5f8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5f8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f92:	4604      	mov	r4, r0
   b5f94:	4608      	mov	r0, r1
   b5f96:	4611      	mov	r1, r2
   b5f98:	2200      	movs	r2, #0
   b5f9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f9e:	4b04      	ldr	r3, [pc, #16]	; (b5fb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5fa0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fa2:	2301      	movs	r3, #1
  _serial = serial;
   b5fa4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5fa6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5fa8:	f7ff fcae 	bl	b5908 <hal_usart_init_ex>
}
   b5fac:	4620      	mov	r0, r4
   b5fae:	bd10      	pop	{r4, pc}
   b5fb0:	000b8f6c 	.word	0x000b8f6c

000b5fb4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5fb4:	4770      	bx	lr

000b5fb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fb8:	4606      	mov	r6, r0
   b5fba:	4615      	mov	r5, r2
   b5fbc:	460c      	mov	r4, r1
   b5fbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5fc0:	42bc      	cmp	r4, r7
   b5fc2:	d006      	beq.n	b5fd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5fc4:	6833      	ldr	r3, [r6, #0]
   b5fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5fca:	689b      	ldr	r3, [r3, #8]
   b5fcc:	4630      	mov	r0, r6
   b5fce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5fd0:	e7f6      	b.n	b5fc0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5fd2:	4628      	mov	r0, r5
   b5fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fd6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5fd6:	7c00      	ldrb	r0, [r0, #16]
   b5fd8:	2200      	movs	r2, #0
   b5fda:	f7ff bbe5 	b.w	b57a8 <hal_i2c_write>

000b5fde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5fde:	7c00      	ldrb	r0, [r0, #16]
   b5fe0:	2100      	movs	r1, #0
   b5fe2:	f7ff bbe9 	b.w	b57b8 <hal_i2c_available>

000b5fe6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5fe6:	7c00      	ldrb	r0, [r0, #16]
   b5fe8:	2100      	movs	r1, #0
   b5fea:	f7ff bbed 	b.w	b57c8 <hal_i2c_read>

000b5fee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5fee:	7c00      	ldrb	r0, [r0, #16]
   b5ff0:	2100      	movs	r1, #0
   b5ff2:	f7ff bbf1 	b.w	b57d8 <hal_i2c_peek>

000b5ff6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5ff6:	7c00      	ldrb	r0, [r0, #16]
   b5ff8:	2100      	movs	r1, #0
   b5ffa:	f7ff bbf5 	b.w	b57e8 <hal_i2c_flush>

000b5ffe <_ZN7TwoWireD0Ev>:
   b5ffe:	b510      	push	{r4, lr}
   b6000:	2114      	movs	r1, #20
   b6002:	4604      	mov	r4, r0
   b6004:	f7fe f849 	bl	b409a <_ZdlPvj>
   b6008:	4620      	mov	r0, r4
   b600a:	bd10      	pop	{r4, pc}

000b600c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b600c:	b510      	push	{r4, lr}
   b600e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6012:	4604      	mov	r4, r0
   b6014:	4608      	mov	r0, r1
   b6016:	2100      	movs	r1, #0
   b6018:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b601c:	4b03      	ldr	r3, [pc, #12]	; (b602c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b601e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6020:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6022:	4611      	mov	r1, r2
   b6024:	f7ff fbf0 	bl	b5808 <hal_i2c_init>
}
   b6028:	4620      	mov	r0, r4
   b602a:	bd10      	pop	{r4, pc}
   b602c:	000b8f9c 	.word	0x000b8f9c

000b6030 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6030:	7c00      	ldrb	r0, [r0, #16]
   b6032:	2200      	movs	r2, #0
   b6034:	f7ff bb98 	b.w	b5768 <hal_i2c_set_speed>

000b6038 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6038:	2300      	movs	r3, #0
   b603a:	7c00      	ldrb	r0, [r0, #16]
   b603c:	461a      	mov	r2, r3
   b603e:	4619      	mov	r1, r3
   b6040:	f7ff bb9a 	b.w	b5778 <hal_i2c_begin>

000b6044 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6044:	7c00      	ldrb	r0, [r0, #16]
   b6046:	2200      	movs	r2, #0
   b6048:	f7ff bb9e 	b.w	b5788 <hal_i2c_begin_transmission>

000b604c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b604c:	b2c9      	uxtb	r1, r1
   b604e:	f7ff bff9 	b.w	b6044 <_ZN7TwoWire17beginTransmissionEh>

000b6052 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6052:	7c00      	ldrb	r0, [r0, #16]
   b6054:	2200      	movs	r2, #0
   b6056:	f7ff bb9f 	b.w	b5798 <hal_i2c_end_transmission>

000b605a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b605a:	2101      	movs	r1, #1
   b605c:	f7ff bff9 	b.w	b6052 <_ZN7TwoWire15endTransmissionEh>

000b6060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b6060:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b6062:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6064:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6066:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6068:	dd03      	ble.n	b6072 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b606a:	f7ff fe1d 	bl	b5ca8 <realloc>
            if (!d) {
   b606e:	b918      	cbnz	r0, b6078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6070:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6072:	f7ff fe11 	bl	b5c98 <free>
        T* d = nullptr;
   b6076:	2000      	movs	r0, #0
        data_ = d;
   b6078:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b607a:	60a5      	str	r5, [r4, #8]
        return true;
   b607c:	2001      	movs	r0, #1
   b607e:	e7f7      	b.n	b6070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6080 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6080:	7441      	strb	r1, [r0, #17]
}
   b6082:	4770      	bx	lr

000b6084 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6084:	4770      	bx	lr

000b6086 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6086:	4770      	bx	lr

000b6088 <_ZN9USBSerial4readEv>:
{
   b6088:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b608a:	2100      	movs	r1, #0
   b608c:	7c00      	ldrb	r0, [r0, #16]
   b608e:	f7ff fb53 	bl	b5738 <HAL_USB_USART_Receive_Data>
}
   b6092:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6096:	bd08      	pop	{r3, pc}

000b6098 <_ZN9USBSerial4peekEv>:
{
   b6098:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b609a:	2101      	movs	r1, #1
   b609c:	7c00      	ldrb	r0, [r0, #16]
   b609e:	f7ff fb4b 	bl	b5738 <HAL_USB_USART_Receive_Data>
}
   b60a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60a6:	bd08      	pop	{r3, pc}

000b60a8 <_ZN9USBSerial17availableForWriteEv>:
{
   b60a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b60aa:	7c00      	ldrb	r0, [r0, #16]
   b60ac:	f7ff fb3c 	bl	b5728 <HAL_USB_USART_Available_Data_For_Write>
}
   b60b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60b4:	bd08      	pop	{r3, pc}

000b60b6 <_ZN9USBSerial9availableEv>:
{
   b60b6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b60b8:	7c00      	ldrb	r0, [r0, #16]
   b60ba:	f7ff fb2d 	bl	b5718 <HAL_USB_USART_Available_Data>
}
   b60be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60c2:	bd08      	pop	{r3, pc}

000b60c4 <_ZN9USBSerial5writeEh>:
{
   b60c4:	b513      	push	{r0, r1, r4, lr}
   b60c6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b60c8:	7c00      	ldrb	r0, [r0, #16]
{
   b60ca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b60cc:	f7ff fb2c 	bl	b5728 <HAL_USB_USART_Available_Data_For_Write>
   b60d0:	2800      	cmp	r0, #0
   b60d2:	9901      	ldr	r1, [sp, #4]
   b60d4:	dc01      	bgt.n	b60da <_ZN9USBSerial5writeEh+0x16>
   b60d6:	7c60      	ldrb	r0, [r4, #17]
   b60d8:	b120      	cbz	r0, b60e4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b60da:	7c20      	ldrb	r0, [r4, #16]
   b60dc:	f7ff fb34 	bl	b5748 <HAL_USB_USART_Send_Data>
   b60e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b60e4:	b002      	add	sp, #8
   b60e6:	bd10      	pop	{r4, pc}

000b60e8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b60e8:	7c00      	ldrb	r0, [r0, #16]
   b60ea:	f7ff bb35 	b.w	b5758 <HAL_USB_USART_Flush_Data>

000b60ee <_ZN9USBSerialD0Ev>:
   b60ee:	b510      	push	{r4, lr}
   b60f0:	2114      	movs	r1, #20
   b60f2:	4604      	mov	r4, r0
   b60f4:	f7fd ffd1 	bl	b409a <_ZdlPvj>
   b60f8:	4620      	mov	r0, r4
   b60fa:	bd10      	pop	{r4, pc}

000b60fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b60fc:	b510      	push	{r4, lr}
   b60fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6102:	4604      	mov	r4, r0
   b6104:	4608      	mov	r0, r1
   b6106:	2100      	movs	r1, #0
   b6108:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b610c:	4b04      	ldr	r3, [pc, #16]	; (b6120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b610e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6110:	2301      	movs	r3, #1
  _serial = serial;
   b6112:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6114:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6116:	4611      	mov	r1, r2
   b6118:	f7ff faf6 	bl	b5708 <HAL_USB_USART_Init>
}
   b611c:	4620      	mov	r0, r4
   b611e:	bd10      	pop	{r4, pc}
   b6120:	000b8fc4 	.word	0x000b8fc4

000b6124 <_Z19acquireSerialBufferv>:
{
   b6124:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6126:	2214      	movs	r2, #20
{
   b6128:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b612a:	2100      	movs	r1, #0
   b612c:	f002 f80a 	bl	b8144 <memset>
}
   b6130:	4620      	mov	r0, r4
   b6132:	bd10      	pop	{r4, pc}

000b6134 <_Z16_fetch_usbserialv>:
{
   b6134:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6136:	4c0f      	ldr	r4, [pc, #60]	; (b6174 <_Z16_fetch_usbserialv+0x40>)
{
   b6138:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b613a:	a803      	add	r0, sp, #12
   b613c:	f7ff fff2 	bl	b6124 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6140:	7821      	ldrb	r1, [r4, #0]
   b6142:	f3bf 8f5b 	dmb	ish
   b6146:	f011 0101 	ands.w	r1, r1, #1
   b614a:	d10f      	bne.n	b616c <_Z16_fetch_usbserialv+0x38>
   b614c:	4620      	mov	r0, r4
   b614e:	9101      	str	r1, [sp, #4]
   b6150:	f7fd ffb2 	bl	b40b8 <__cxa_guard_acquire>
   b6154:	9901      	ldr	r1, [sp, #4]
   b6156:	b148      	cbz	r0, b616c <_Z16_fetch_usbserialv+0x38>
   b6158:	aa03      	add	r2, sp, #12
   b615a:	4807      	ldr	r0, [pc, #28]	; (b6178 <_Z16_fetch_usbserialv+0x44>)
   b615c:	f7ff ffce 	bl	b60fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6160:	4620      	mov	r0, r4
   b6162:	f7fd ffae 	bl	b40c2 <__cxa_guard_release>
   b6166:	4805      	ldr	r0, [pc, #20]	; (b617c <_Z16_fetch_usbserialv+0x48>)
   b6168:	f001 ffae 	bl	b80c8 <atexit>
	return _usbserial;
}
   b616c:	4802      	ldr	r0, [pc, #8]	; (b6178 <_Z16_fetch_usbserialv+0x44>)
   b616e:	b008      	add	sp, #32
   b6170:	bd10      	pop	{r4, pc}
   b6172:	bf00      	nop
   b6174:	2003e6cc 	.word	0x2003e6cc
   b6178:	2003e6d0 	.word	0x2003e6d0
   b617c:	000b6085 	.word	0x000b6085

000b6180 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b6180:	4770      	bx	lr

000b6182 <_ZN9IPAddressD0Ev>:
   b6182:	b510      	push	{r4, lr}
   b6184:	2118      	movs	r1, #24
   b6186:	4604      	mov	r4, r0
   b6188:	f7fd ff87 	bl	b409a <_ZdlPvj>
   b618c:	4620      	mov	r0, r4
   b618e:	bd10      	pop	{r4, pc}

000b6190 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6190:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6192:	7d03      	ldrb	r3, [r0, #20]
   b6194:	2b06      	cmp	r3, #6
{
   b6196:	b08d      	sub	sp, #52	; 0x34
   b6198:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b619a:	f100 0704 	add.w	r7, r0, #4
   b619e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b61a2:	d012      	beq.n	b61ca <_ZNK9IPAddress7printToER5Print+0x3a>
   b61a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b61a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b61ac:	220a      	movs	r2, #10
   b61ae:	4630      	mov	r0, r6
   b61b0:	f000 f98f 	bl	b64d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b61b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b61b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b61b8:	d019      	beq.n	b61ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b61ba:	2c00      	cmp	r4, #0
   b61bc:	d0f4      	beq.n	b61a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b61be:	212e      	movs	r1, #46	; 0x2e
   b61c0:	4630      	mov	r0, r6
   b61c2:	f000 f96d 	bl	b64a0 <_ZN5Print5printEc>
   b61c6:	4404      	add	r4, r0
   b61c8:	e7ee      	b.n	b61a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b61ca:	232f      	movs	r3, #47	; 0x2f
   b61cc:	466a      	mov	r2, sp
   b61ce:	4639      	mov	r1, r7
   b61d0:	200a      	movs	r0, #10
		buf[0] = 0;
   b61d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b61d6:	f7ff fb9f 	bl	b5918 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b61da:	4668      	mov	r0, sp
   b61dc:	f001 fff2 	bl	b81c4 <strlen>
   b61e0:	6833      	ldr	r3, [r6, #0]
   b61e2:	4602      	mov	r2, r0
   b61e4:	68db      	ldr	r3, [r3, #12]
   b61e6:	4669      	mov	r1, sp
   b61e8:	4630      	mov	r0, r6
   b61ea:	4798      	blx	r3
   b61ec:	4604      	mov	r4, r0
    }
    return n;
}
   b61ee:	4620      	mov	r0, r4
   b61f0:	b00d      	add	sp, #52	; 0x34
   b61f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b61f4:	b510      	push	{r4, lr}
   b61f6:	4b05      	ldr	r3, [pc, #20]	; (b620c <_ZN9IPAddressC1Ev+0x18>)
   b61f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b61fa:	2211      	movs	r2, #17
   b61fc:	f840 3b04 	str.w	r3, [r0], #4
   b6200:	2100      	movs	r1, #0
   b6202:	f001 ff9f 	bl	b8144 <memset>
}
   b6206:	4620      	mov	r0, r4
   b6208:	bd10      	pop	{r4, pc}
   b620a:	bf00      	nop
   b620c:	000b8ff4 	.word	0x000b8ff4

000b6210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6210:	4603      	mov	r3, r0
   b6212:	4a07      	ldr	r2, [pc, #28]	; (b6230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6214:	b510      	push	{r4, lr}
   b6216:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b621a:	f101 0210 	add.w	r2, r1, #16
   b621e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6222:	f843 4b04 	str.w	r4, [r3], #4
   b6226:	4291      	cmp	r1, r2
   b6228:	d1f9      	bne.n	b621e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b622a:	780a      	ldrb	r2, [r1, #0]
   b622c:	701a      	strb	r2, [r3, #0]
}
   b622e:	bd10      	pop	{r4, pc}
   b6230:	000b8ff4 	.word	0x000b8ff4

000b6234 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6234:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6236:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b623a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b623e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6242:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6246:	2304      	movs	r3, #4
   b6248:	6041      	str	r1, [r0, #4]
   b624a:	7503      	strb	r3, [r0, #20]
}
   b624c:	bd10      	pop	{r4, pc}
	...

000b6250 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6250:	b507      	push	{r0, r1, r2, lr}
   b6252:	4b06      	ldr	r3, [pc, #24]	; (b626c <_ZN9IPAddressC1EPKh+0x1c>)
   b6254:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6256:	78cb      	ldrb	r3, [r1, #3]
   b6258:	9300      	str	r3, [sp, #0]
   b625a:	788b      	ldrb	r3, [r1, #2]
   b625c:	784a      	ldrb	r2, [r1, #1]
   b625e:	7809      	ldrb	r1, [r1, #0]
   b6260:	f7ff ffe8 	bl	b6234 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6264:	b003      	add	sp, #12
   b6266:	f85d fb04 	ldr.w	pc, [sp], #4
   b626a:	bf00      	nop
   b626c:	000b8ff4 	.word	0x000b8ff4

000b6270 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b6270:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b6272:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6274:	4604      	mov	r4, r0
      if (_M_manager)
   b6276:	b113      	cbz	r3, b627e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6278:	2203      	movs	r2, #3
   b627a:	4601      	mov	r1, r0
   b627c:	4798      	blx	r3
    }
   b627e:	4620      	mov	r0, r4
   b6280:	bd10      	pop	{r4, pc}

000b6282 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6282:	b513      	push	{r0, r1, r4, lr}
   b6284:	460b      	mov	r3, r1
   b6286:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6288:	e9d0 0100 	ldrd	r0, r1, [r0]
   b628c:	466c      	mov	r4, sp
   b628e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6292:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6296:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b629a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b629e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b62a2:	b002      	add	sp, #8
   b62a4:	bd10      	pop	{r4, pc}

000b62a6 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b62a6:	2100      	movs	r1, #0
   b62a8:	f7ff bcca 	b.w	b5c40 <system_delay_ms>

000b62ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62ac:	4b01      	ldr	r3, [pc, #4]	; (b62b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62b0:	4770      	bx	lr
   b62b2:	bf00      	nop
   b62b4:	2003e574 	.word	0x2003e574

000b62b8 <serialEventRun>:
{
   b62b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62ba:	4b0b      	ldr	r3, [pc, #44]	; (b62e8 <serialEventRun+0x30>)
   b62bc:	b143      	cbz	r3, b62d0 <serialEventRun+0x18>
   b62be:	f7ff ff39 	bl	b6134 <_Z16_fetch_usbserialv>
   b62c2:	6803      	ldr	r3, [r0, #0]
   b62c4:	691b      	ldr	r3, [r3, #16]
   b62c6:	4798      	blx	r3
   b62c8:	2800      	cmp	r0, #0
   b62ca:	dd01      	ble.n	b62d0 <serialEventRun+0x18>
        serialEvent();
   b62cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62d0:	4b06      	ldr	r3, [pc, #24]	; (b62ec <serialEventRun+0x34>)
   b62d2:	b143      	cbz	r3, b62e6 <serialEventRun+0x2e>
   b62d4:	f001 fd42 	bl	b7d5c <_Z22__fetch_global_Serial1v>
   b62d8:	6803      	ldr	r3, [r0, #0]
   b62da:	691b      	ldr	r3, [r3, #16]
   b62dc:	4798      	blx	r3
   b62de:	2800      	cmp	r0, #0
   b62e0:	dd01      	ble.n	b62e6 <serialEventRun+0x2e>
        serialEvent1();
   b62e2:	f3af 8000 	nop.w
}
   b62e6:	bd08      	pop	{r3, pc}
	...

000b62f0 <_post_loop>:
{
   b62f0:	b508      	push	{r3, lr}
	serialEventRun();
   b62f2:	f7ff ffe1 	bl	b62b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b62f6:	f7ff fbd3 	bl	b5aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b62fa:	4b01      	ldr	r3, [pc, #4]	; (b6300 <_post_loop+0x10>)
   b62fc:	6018      	str	r0, [r3, #0]
}
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	2003e744 	.word	0x2003e744

000b6304 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6304:	4805      	ldr	r0, [pc, #20]	; (b631c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6306:	4a06      	ldr	r2, [pc, #24]	; (b6320 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6308:	4906      	ldr	r1, [pc, #24]	; (b6324 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b630a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b630c:	1a12      	subs	r2, r2, r0
   b630e:	f001 fef1 	bl	b80f4 <memcpy>
    __backup_sram_signature = signature;
   b6312:	4b05      	ldr	r3, [pc, #20]	; (b6328 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6314:	4a05      	ldr	r2, [pc, #20]	; (b632c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6316:	601a      	str	r2, [r3, #0]
}
   b6318:	bd08      	pop	{r3, pc}
   b631a:	bf00      	nop
   b631c:	2003f400 	.word	0x2003f400
   b6320:	2003f404 	.word	0x2003f404
   b6324:	000b9414 	.word	0x000b9414
   b6328:	2003f400 	.word	0x2003f400
   b632c:	9a271c1e 	.word	0x9a271c1e

000b6330 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6330:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6332:	2300      	movs	r3, #0
   b6334:	9300      	str	r3, [sp, #0]
   b6336:	461a      	mov	r2, r3
   b6338:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b633c:	f7ff fc9a 	bl	b5c74 <system_ctrl_set_result>
}
   b6340:	b003      	add	sp, #12
   b6342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6348 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6348:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b634a:	8843      	ldrh	r3, [r0, #2]
   b634c:	2b0a      	cmp	r3, #10
   b634e:	d008      	beq.n	b6362 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6350:	2b50      	cmp	r3, #80	; 0x50
   b6352:	d10b      	bne.n	b636c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6354:	4b09      	ldr	r3, [pc, #36]	; (b637c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6356:	681b      	ldr	r3, [r3, #0]
   b6358:	b14b      	cbz	r3, b636e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b635a:	b003      	add	sp, #12
   b635c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6360:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6362:	f7ff ffe5 	bl	b6330 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6366:	b003      	add	sp, #12
   b6368:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b636c:	2300      	movs	r3, #0
   b636e:	9300      	str	r3, [sp, #0]
   b6370:	461a      	mov	r2, r3
   b6372:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6376:	f7ff fc7d 	bl	b5c74 <system_ctrl_set_result>
}
   b637a:	e7f4      	b.n	b6366 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b637c:	2003e6e8 	.word	0x2003e6e8

000b6380 <module_user_init_hook>:
{
   b6380:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6382:	4812      	ldr	r0, [pc, #72]	; (b63cc <module_user_init_hook+0x4c>)
   b6384:	2100      	movs	r1, #0
   b6386:	f7ff fcaf 	bl	b5ce8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b638a:	4b11      	ldr	r3, [pc, #68]	; (b63d0 <module_user_init_hook+0x50>)
   b638c:	681a      	ldr	r2, [r3, #0]
   b638e:	4b11      	ldr	r3, [pc, #68]	; (b63d4 <module_user_init_hook+0x54>)
   b6390:	429a      	cmp	r2, r3
   b6392:	4b11      	ldr	r3, [pc, #68]	; (b63d8 <module_user_init_hook+0x58>)
   b6394:	bf0c      	ite	eq
   b6396:	2201      	moveq	r2, #1
   b6398:	2200      	movne	r2, #0
   b639a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b639c:	d001      	beq.n	b63a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b639e:	f7ff ffb1 	bl	b6304 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63a2:	f7ff fb6d 	bl	b5a80 <HAL_RNG_GetRandomNumber>
   b63a6:	4604      	mov	r4, r0
    srand(seed);
   b63a8:	f001 fed4 	bl	b8154 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63ac:	4b0b      	ldr	r3, [pc, #44]	; (b63dc <module_user_init_hook+0x5c>)
   b63ae:	b113      	cbz	r3, b63b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63b0:	4620      	mov	r0, r4
   b63b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63b6:	2100      	movs	r1, #0
   b63b8:	4808      	ldr	r0, [pc, #32]	; (b63dc <module_user_init_hook+0x5c>)
   b63ba:	f7ff fbd1 	bl	b5b60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63c2:	4807      	ldr	r0, [pc, #28]	; (b63e0 <module_user_init_hook+0x60>)
   b63c4:	2100      	movs	r1, #0
   b63c6:	f7ff bc4b 	b.w	b5c60 <system_ctrl_set_app_request_handler>
   b63ca:	bf00      	nop
   b63cc:	000b62ad 	.word	0x000b62ad
   b63d0:	2003f400 	.word	0x2003f400
   b63d4:	9a271c1e 	.word	0x9a271c1e
   b63d8:	2003e6e4 	.word	0x2003e6e4
   b63dc:	00000000 	.word	0x00000000
   b63e0:	000b6349 	.word	0x000b6349

000b63e4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b63e4:	b570      	push	{r4, r5, r6, lr}
   b63e6:	4605      	mov	r5, r0
   b63e8:	460e      	mov	r6, r1
   b63ea:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b63ec:	f7ff fb98 	bl	b5b20 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b63f0:	b150      	cbz	r0, b6408 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b63f2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b63f6:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b63fa:	f7ff fb89 	bl	b5b10 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b63fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b6402:	20e7      	movs	r0, #231	; 0xe7
   b6404:	f7ff bb94 	b.w	b5b30 <LED_On>
}
   b6408:	bd70      	pop	{r4, r5, r6, pc}

000b640a <_ZN8RGBClass5colorEm>:
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
   b640a:	b2c2      	uxtb	r2, r0
   b640c:	f3c0 2107 	ubfx	r1, r0, #8, #8
   b6410:	f3c0 4007 	ubfx	r0, r0, #16, #8
   b6414:	f7ff bfe6 	b.w	b63e4 <_ZN8RGBClass5colorEiii>

000b6418 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6418:	4b01      	ldr	r3, [pc, #4]	; (b6420 <_GLOBAL__sub_I_RGB+0x8>)
   b641a:	2200      	movs	r2, #0
   b641c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b641e:	4770      	bx	lr
   b6420:	2003e6ec 	.word	0x2003e6ec

000b6424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6424:	4b02      	ldr	r3, [pc, #8]	; (b6430 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6426:	681a      	ldr	r2, [r3, #0]
   b6428:	4b02      	ldr	r3, [pc, #8]	; (b6434 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b642a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b642c:	4770      	bx	lr
   b642e:	bf00      	nop
   b6430:	2003e570 	.word	0x2003e570
   b6434:	2003e6fc 	.word	0x2003e6fc

000b6438 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6438:	4b01      	ldr	r3, [pc, #4]	; (b6440 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b643a:	4a02      	ldr	r2, [pc, #8]	; (b6444 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b643c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b643e:	4770      	bx	lr
   b6440:	2003e700 	.word	0x2003e700
   b6444:	000b901c 	.word	0x000b901c

000b6448 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b644a:	4606      	mov	r6, r0
   b644c:	460d      	mov	r5, r1
  size_t n = 0;
   b644e:	188f      	adds	r7, r1, r2
   b6450:	2400      	movs	r4, #0
  while (size--) {
   b6452:	42bd      	cmp	r5, r7
   b6454:	d00c      	beq.n	b6470 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6456:	6833      	ldr	r3, [r6, #0]
   b6458:	f815 1b01 	ldrb.w	r1, [r5], #1
   b645c:	689b      	ldr	r3, [r3, #8]
   b645e:	4630      	mov	r0, r6
   b6460:	4798      	blx	r3
     if (chunk>=0)
   b6462:	1e03      	subs	r3, r0, #0
   b6464:	db01      	blt.n	b646a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6466:	441c      	add	r4, r3
  while (size--) {
   b6468:	e7f3      	b.n	b6452 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b646a:	2c00      	cmp	r4, #0
   b646c:	bf08      	it	eq
   b646e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6470:	4620      	mov	r0, r4
   b6472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6474 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6474:	b513      	push	{r0, r1, r4, lr}
   b6476:	4604      	mov	r4, r0
    }
   b6478:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b647a:	b159      	cbz	r1, b6494 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b647c:	9101      	str	r1, [sp, #4]
   b647e:	f001 fea1 	bl	b81c4 <strlen>
   b6482:	6823      	ldr	r3, [r4, #0]
   b6484:	9901      	ldr	r1, [sp, #4]
   b6486:	68db      	ldr	r3, [r3, #12]
   b6488:	4602      	mov	r2, r0
   b648a:	4620      	mov	r0, r4
    }
   b648c:	b002      	add	sp, #8
   b648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6492:	4718      	bx	r3
    }
   b6494:	b002      	add	sp, #8
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6498:	b508      	push	{r3, lr}
  return write(str);
   b649a:	f7ff ffeb 	bl	b6474 <_ZN5Print5writeEPKc>
}
   b649e:	bd08      	pop	{r3, pc}

000b64a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b64a0:	6803      	ldr	r3, [r0, #0]
   b64a2:	689b      	ldr	r3, [r3, #8]
   b64a4:	4718      	bx	r3

000b64a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b64a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b64a8:	210d      	movs	r1, #13
{
   b64aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b64ac:	f7ff fff8 	bl	b64a0 <_ZN5Print5printEc>
  n += print('\n');
   b64b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b64b2:	4604      	mov	r4, r0
  n += print('\n');
   b64b4:	4628      	mov	r0, r5
   b64b6:	f7ff fff3 	bl	b64a0 <_ZN5Print5printEc>
  return n;
}
   b64ba:	4420      	add	r0, r4
   b64bc:	bd38      	pop	{r3, r4, r5, pc}

000b64be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b64be:	b538      	push	{r3, r4, r5, lr}
   b64c0:	4605      	mov	r5, r0
  return write(str);
   b64c2:	f7ff ffd7 	bl	b6474 <_ZN5Print5writeEPKc>
   b64c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b64c8:	4628      	mov	r0, r5
   b64ca:	f7ff ffec 	bl	b64a6 <_ZN5Print7printlnEv>
  return n;
}
   b64ce:	4420      	add	r0, r4
   b64d0:	bd38      	pop	{r3, r4, r5, pc}

000b64d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b64d2:	b530      	push	{r4, r5, lr}
   b64d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b64d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b64d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b64da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b64de:	bf98      	it	ls
   b64e0:	220a      	movls	r2, #10
   b64e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b64e4:	460d      	mov	r5, r1
   b64e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b64ea:	fb01 5312 	mls	r3, r1, r2, r5
   b64ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64f2:	2b09      	cmp	r3, #9
   b64f4:	bf94      	ite	ls
   b64f6:	3330      	addls	r3, #48	; 0x30
   b64f8:	3337      	addhi	r3, #55	; 0x37
   b64fa:	b2db      	uxtb	r3, r3
  } while(n);
   b64fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6502:	d9ef      	bls.n	b64e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6504:	4621      	mov	r1, r4
   b6506:	f7ff ffb5 	bl	b6474 <_ZN5Print5writeEPKc>
}
   b650a:	b00b      	add	sp, #44	; 0x2c
   b650c:	bd30      	pop	{r4, r5, pc}

000b650e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6512:	b086      	sub	sp, #24
   b6514:	af00      	add	r7, sp, #0
   b6516:	4605      	mov	r5, r0
   b6518:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b651a:	1d38      	adds	r0, r7, #4
   b651c:	2114      	movs	r1, #20
{
   b651e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6520:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6522:	f7ff fbc9 	bl	b5cb8 <vsnprintf>

    if (n<bufsize)
   b6526:	2813      	cmp	r0, #19
   b6528:	d80e      	bhi.n	b6548 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b652a:	1d39      	adds	r1, r7, #4
   b652c:	4628      	mov	r0, r5
   b652e:	f7ff ffa1 	bl	b6474 <_ZN5Print5writeEPKc>
   b6532:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6534:	b11e      	cbz	r6, b653e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6536:	4628      	mov	r0, r5
   b6538:	f7ff ffb5 	bl	b64a6 <_ZN5Print7printlnEv>
   b653c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b653e:	4620      	mov	r0, r4
   b6540:	3718      	adds	r7, #24
   b6542:	46bd      	mov	sp, r7
   b6544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6548:	f100 0308 	add.w	r3, r0, #8
   b654c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6550:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6552:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6556:	4622      	mov	r2, r4
   b6558:	1c41      	adds	r1, r0, #1
   b655a:	683b      	ldr	r3, [r7, #0]
   b655c:	4668      	mov	r0, sp
   b655e:	f7ff fbab 	bl	b5cb8 <vsnprintf>
  return write(str);
   b6562:	4669      	mov	r1, sp
   b6564:	4628      	mov	r0, r5
   b6566:	f7ff ff85 	bl	b6474 <_ZN5Print5writeEPKc>
   b656a:	4604      	mov	r4, r0
   b656c:	46c5      	mov	sp, r8
   b656e:	e7e1      	b.n	b6534 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6570 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6570:	4770      	bx	lr

000b6572 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6572:	4770      	bx	lr

000b6574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6574:	4770      	bx	lr

000b6576 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6576:	4770      	bx	lr

000b6578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6578:	4b06      	ldr	r3, [pc, #24]	; (b6594 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b657a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b657c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b657e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6582:	d005      	beq.n	b6590 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6584:	4608      	mov	r0, r1
   b6586:	f001 fc8d 	bl	b7ea4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b658a:	2800      	cmp	r0, #0
   b658c:	bf08      	it	eq
   b658e:	2400      	moveq	r4, #0
      }
   b6590:	4620      	mov	r0, r4
   b6592:	bd10      	pop	{r4, pc}
   b6594:	000b8f5c 	.word	0x000b8f5c

000b6598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6598:	4b06      	ldr	r3, [pc, #24]	; (b65b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b659a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b659c:	b510      	push	{r4, lr}
   b659e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65a2:	d005      	beq.n	b65b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65a4:	4608      	mov	r0, r1
   b65a6:	f001 fc7d 	bl	b7ea4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b65aa:	2800      	cmp	r0, #0
   b65ac:	bf08      	it	eq
   b65ae:	2400      	moveq	r4, #0
      }
   b65b0:	4620      	mov	r0, r4
   b65b2:	bd10      	pop	{r4, pc}
   b65b4:	000b8f5c 	.word	0x000b8f5c

000b65b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65b8:	4b06      	ldr	r3, [pc, #24]	; (b65d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b65bc:	b510      	push	{r4, lr}
   b65be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65c2:	d005      	beq.n	b65d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65c4:	4608      	mov	r0, r1
   b65c6:	f001 fc6d 	bl	b7ea4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b65ca:	2800      	cmp	r0, #0
   b65cc:	bf08      	it	eq
   b65ce:	2400      	moveq	r4, #0
      }
   b65d0:	4620      	mov	r0, r4
   b65d2:	bd10      	pop	{r4, pc}
   b65d4:	000b8f5c 	.word	0x000b8f5c

000b65d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65d8:	b510      	push	{r4, lr}
   b65da:	2168      	movs	r1, #104	; 0x68
   b65dc:	4604      	mov	r4, r0
   b65de:	f7fd fd5c 	bl	b409a <_ZdlPvj>
   b65e2:	4620      	mov	r0, r4
   b65e4:	bd10      	pop	{r4, pc}

000b65e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b65e6:	b510      	push	{r4, lr}
   b65e8:	2128      	movs	r1, #40	; 0x28
   b65ea:	4604      	mov	r4, r0
   b65ec:	f7fd fd55 	bl	b409a <_ZdlPvj>
   b65f0:	4620      	mov	r0, r4
   b65f2:	bd10      	pop	{r4, pc}

000b65f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b65f4:	b510      	push	{r4, lr}
   b65f6:	2130      	movs	r1, #48	; 0x30
   b65f8:	4604      	mov	r4, r0
   b65fa:	f7fd fd4e 	bl	b409a <_ZdlPvj>
   b65fe:	4620      	mov	r0, r4
   b6600:	bd10      	pop	{r4, pc}

000b6602 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6602:	2168      	movs	r1, #104	; 0x68
   b6604:	f7fd bd49 	b.w	b409a <_ZdlPvj>

000b6608 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6608:	2128      	movs	r1, #40	; 0x28
   b660a:	f7fd bd46 	b.w	b409a <_ZdlPvj>

000b660e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b660e:	2130      	movs	r1, #48	; 0x30
   b6610:	f7fd bd43 	b.w	b409a <_ZdlPvj>

000b6614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6614:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6616:	2500      	movs	r5, #0
   b6618:	1cec      	adds	r4, r5, #3
   b661a:	428c      	cmp	r4, r1
   b661c:	d80d      	bhi.n	b663a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b661e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6620:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6622:	5d87      	ldrb	r7, [r0, r6]
   b6624:	4297      	cmp	r7, r2
   b6626:	d105      	bne.n	b6634 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6628:	4426      	add	r6, r4
   b662a:	42b1      	cmp	r1, r6
   b662c:	d305      	bcc.n	b663a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b662e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6630:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6632:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6634:	3401      	adds	r4, #1
   b6636:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6638:	e7ee      	b.n	b6618 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b663a:	2000      	movs	r0, #0
   b663c:	e7f9      	b.n	b6632 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6640 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6640:	4a02      	ldr	r2, [pc, #8]	; (b664c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6642:	4903      	ldr	r1, [pc, #12]	; (b6650 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6644:	200a      	movs	r0, #10
   b6646:	f7ff ba7b 	b.w	b5b40 <panic_>
   b664a:	bf00      	nop
   b664c:	000b5a91 	.word	0x000b5a91
   b6650:	000b9020 	.word	0x000b9020

000b6654 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6654:	b430      	push	{r4, r5}
   b6656:	460d      	mov	r5, r1
   b6658:	4611      	mov	r1, r2
   b665a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b665c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b665e:	6809      	ldr	r1, [r1, #0]
   b6660:	6828      	ldr	r0, [r5, #0]
   b6662:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6666:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6668:	bc30      	pop	{r4, r5}
   b666a:	4760      	bx	ip

000b666c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b666c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b666e:	b538      	push	{r3, r4, r5, lr}
   b6670:	4604      	mov	r4, r0
	switch (__op)
   b6672:	d102      	bne.n	b667a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6674:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6676:	6023      	str	r3, [r4, #0]
	}
   b6678:	e003      	b.n	b6682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b667a:	2a02      	cmp	r2, #2
   b667c:	d003      	beq.n	b6686 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b667e:	2a03      	cmp	r2, #3
   b6680:	d00d      	beq.n	b669e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6682:	2000      	movs	r0, #0
   b6684:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6686:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6688:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b668a:	f7fd fd02 	bl	b4092 <_Znwj>
   b668e:	4603      	mov	r3, r0
   b6690:	2800      	cmp	r0, #0
   b6692:	d0f0      	beq.n	b6676 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6694:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6698:	e883 0003 	stmia.w	r3, {r0, r1}
   b669c:	e7eb      	b.n	b6676 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b669e:	6800      	ldr	r0, [r0, #0]
   b66a0:	2800      	cmp	r0, #0
   b66a2:	d0ee      	beq.n	b6682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b66a4:	2108      	movs	r1, #8
   b66a6:	f7fd fcf8 	bl	b409a <_ZdlPvj>
   b66aa:	e7ea      	b.n	b6682 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b66ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b66ac:	b510      	push	{r4, lr}
   b66ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b66b0:	3058      	adds	r0, #88	; 0x58
   b66b2:	f7ff fddd 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b66b6:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b66ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b66be:	f001 b90b 	b.w	b78d8 <_ZN6StringD1Ev>

000b66c2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b66c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b66c6:	b2da      	uxtb	r2, r3
   b66c8:	2a09      	cmp	r2, #9
   b66ca:	d801      	bhi.n	b66d0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b66cc:	4618      	mov	r0, r3
   b66ce:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b66d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b66d4:	2b05      	cmp	r3, #5
   b66d6:	d801      	bhi.n	b66dc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b66d8:	3857      	subs	r0, #87	; 0x57
   b66da:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b66dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b66e0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b66e2:	bf94      	ite	ls
   b66e4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b66e6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b66ea:	4770      	bx	lr

000b66ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b66ec:	b510      	push	{r4, lr}
            locked_(false) {
   b66ee:	2300      	movs	r3, #0
   b66f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b66f2:	4b04      	ldr	r3, [pc, #16]	; (b6704 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b66f4:	4604      	mov	r4, r0
   b66f6:	6818      	ldr	r0, [r3, #0]
   b66f8:	f7ff f92e 	bl	b5958 <os_mutex_recursive_lock>
        locked_ = true;
   b66fc:	2301      	movs	r3, #1
   b66fe:	7023      	strb	r3, [r4, #0]
    }
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}
   b6704:	2003e70c 	.word	0x2003e70c

000b6708 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6708:	b510      	push	{r4, lr}
        if (locked_) {
   b670a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b670c:	4604      	mov	r4, r0
        if (locked_) {
   b670e:	b11b      	cbz	r3, b6718 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6710:	4b02      	ldr	r3, [pc, #8]	; (b671c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6712:	6818      	ldr	r0, [r3, #0]
   b6714:	f7ff f928 	bl	b5968 <os_mutex_recursive_unlock>
    }
   b6718:	4620      	mov	r0, r4
   b671a:	bd10      	pop	{r4, pc}
   b671c:	2003e70c 	.word	0x2003e70c

000b6720 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6720:	b082      	sub	sp, #8
   b6722:	4603      	mov	r3, r0
    address_ = addr;
   b6724:	6808      	ldr	r0, [r1, #0]
   b6726:	6849      	ldr	r1, [r1, #4]
   b6728:	466a      	mov	r2, sp
   b672a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b672c:	466a      	mov	r2, sp
   b672e:	ca03      	ldmia	r2!, {r0, r1}
   b6730:	6018      	str	r0, [r3, #0]
}
   b6732:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6734:	6059      	str	r1, [r3, #4]
}
   b6736:	b002      	add	sp, #8
   b6738:	4770      	bx	lr

000b673a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b673a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b673c:	7982      	ldrb	r2, [r0, #6]
   b673e:	798b      	ldrb	r3, [r1, #6]
   b6740:	429a      	cmp	r2, r3
   b6742:	d106      	bne.n	b6752 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6744:	2206      	movs	r2, #6
   b6746:	f001 fcc5 	bl	b80d4 <memcmp>
   b674a:	fab0 f080 	clz	r0, r0
   b674e:	0940      	lsrs	r0, r0, #5
}
   b6750:	bd08      	pop	{r3, pc}
    return false;
   b6752:	2000      	movs	r0, #0
   b6754:	e7fc      	b.n	b6750 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6756 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b675a:	6003      	str	r3, [r0, #0]
   b675c:	8083      	strh	r3, [r0, #4]
}
   b675e:	2000      	movs	r0, #0
   b6760:	4770      	bx	lr

000b6762 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6762:	b508      	push	{r3, lr}
   b6764:	4602      	mov	r2, r0
        : address_{} {
   b6766:	2100      	movs	r1, #0
   b6768:	6001      	str	r1, [r0, #0]
   b676a:	6041      	str	r1, [r0, #4]
    clear();
   b676c:	f7ff fff3 	bl	b6756 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6770:	7191      	strb	r1, [r2, #6]
}
   b6772:	4610      	mov	r0, r2
   b6774:	bd08      	pop	{r3, pc}
	...

000b6778 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6778:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b677a:	2301      	movs	r3, #1
   b677c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b677e:	4b05      	ldr	r3, [pc, #20]	; (b6794 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6780:	4602      	mov	r2, r0
   b6782:	f103 0110 	add.w	r1, r3, #16
   b6786:	f853 4b04 	ldr.w	r4, [r3], #4
   b678a:	f842 4b04 	str.w	r4, [r2], #4
   b678e:	428b      	cmp	r3, r1
   b6790:	d1f9      	bne.n	b6786 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6792:	bd10      	pop	{r4, pc}
   b6794:	000b91c6 	.word	0x000b91c6

000b6798 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6798:	b510      	push	{r4, lr}
    if (uuid128) {
   b679a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b679c:	4604      	mov	r4, r0
    if (uuid128) {
   b679e:	b1b1      	cbz	r1, b67ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b67a0:	2a01      	cmp	r2, #1
   b67a2:	f101 0210 	add.w	r2, r1, #16
   b67a6:	d10a      	bne.n	b67be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b67a8:	4601      	mov	r1, r0
   b67aa:	f853 0b04 	ldr.w	r0, [r3], #4
   b67ae:	f841 0b04 	str.w	r0, [r1], #4
   b67b2:	4293      	cmp	r3, r2
   b67b4:	d1f9      	bne.n	b67aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b67b6:	2301      	movs	r3, #1
   b67b8:	6123      	str	r3, [r4, #16]
}
   b67ba:	4620      	mov	r0, r4
   b67bc:	bd10      	pop	{r4, pc}
   b67be:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b67c0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b67c4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b67c8:	429a      	cmp	r2, r3
   b67ca:	d1f9      	bne.n	b67c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b67cc:	e7f3      	b.n	b67b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b67ce:	2210      	movs	r2, #16
   b67d0:	f001 fcb8 	bl	b8144 <memset>
   b67d4:	e7f1      	b.n	b67ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b67d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b67d6:	b538      	push	{r3, r4, r5, lr}
   b67d8:	4604      	mov	r4, r0
   b67da:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b67dc:	461a      	mov	r2, r3
   b67de:	f7ff ffdb 	bl	b6798 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b67e2:	81a5      	strh	r5, [r4, #12]
}
   b67e4:	4620      	mov	r0, r4
   b67e6:	bd38      	pop	{r3, r4, r5, pc}

000b67e8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b67e8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b67ea:	6902      	ldr	r2, [r0, #16]
   b67ec:	b922      	cbnz	r2, b67f8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b67ee:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b67f0:	3800      	subs	r0, #0
   b67f2:	bf18      	it	ne
   b67f4:	2001      	movne	r0, #1
}
   b67f6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b67f8:	4902      	ldr	r1, [pc, #8]	; (b6804 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b67fa:	2210      	movs	r2, #16
   b67fc:	f001 fc6a 	bl	b80d4 <memcmp>
   b6800:	e7f6      	b.n	b67f0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6802:	bf00      	nop
   b6804:	000b91e6 	.word	0x000b91e6

000b6808 <_ZNK8particle7BleUuid4typeEv>:
}
   b6808:	6900      	ldr	r0, [r0, #16]
   b680a:	4770      	bx	lr

000b680c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b680c:	b538      	push	{r3, r4, r5, lr}
   b680e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6810:	2214      	movs	r2, #20
   b6812:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6814:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6816:	f001 fc95 	bl	b8144 <memset>
    if (type_ == BleUuidType::SHORT) {
   b681a:	6923      	ldr	r3, [r4, #16]
   b681c:	b91b      	cbnz	r3, b6826 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b681e:	89a3      	ldrh	r3, [r4, #12]
   b6820:	802b      	strh	r3, [r5, #0]
}
   b6822:	4628      	mov	r0, r5
   b6824:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6826:	2301      	movs	r3, #1
   b6828:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b682a:	4621      	mov	r1, r4
   b682c:	462b      	mov	r3, r5
   b682e:	f104 0210 	add.w	r2, r4, #16
   b6832:	f851 0b04 	ldr.w	r0, [r1], #4
   b6836:	f843 0b04 	str.w	r0, [r3], #4
   b683a:	4291      	cmp	r1, r2
   b683c:	d1f9      	bne.n	b6832 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b683e:	e7f0      	b.n	b6822 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6840 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6840:	8980      	ldrh	r0, [r0, #12]
   b6842:	4770      	bx	lr

000b6844 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6844:	4770      	bx	lr

000b6846 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6846:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6848:	6902      	ldr	r2, [r0, #16]
   b684a:	690b      	ldr	r3, [r1, #16]
   b684c:	429a      	cmp	r2, r3
   b684e:	d106      	bne.n	b685e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6850:	2210      	movs	r2, #16
   b6852:	f001 fc3f 	bl	b80d4 <memcmp>
   b6856:	fab0 f080 	clz	r0, r0
   b685a:	0940      	lsrs	r0, r0, #5
}
   b685c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b685e:	2000      	movs	r0, #0
   b6860:	e7fc      	b.n	b685c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6864 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6864:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6866:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b686a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b686c:	4b34      	ldr	r3, [pc, #208]	; (b6940 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b686e:	460c      	mov	r4, r1
   b6870:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6872:	4602      	mov	r2, r0
   b6874:	f103 0110 	add.w	r1, r3, #16
   b6878:	f853 0b04 	ldr.w	r0, [r3], #4
   b687c:	f842 0b04 	str.w	r0, [r2], #4
   b6880:	428b      	cmp	r3, r1
   b6882:	d1f9      	bne.n	b6878 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6884:	b344      	cbz	r4, b68d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6886:	2124      	movs	r1, #36	; 0x24
   b6888:	4620      	mov	r0, r4
   b688a:	f001 fcb6 	bl	b81fa <strnlen>
   b688e:	2804      	cmp	r0, #4
   b6890:	f04f 0500 	mov.w	r5, #0
   b6894:	d123      	bne.n	b68de <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6896:	f8ad 5004 	strh.w	r5, [sp, #4]
   b689a:	af01      	add	r7, sp, #4
   b689c:	1ca5      	adds	r5, r4, #2
   b689e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b68a0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b68a4:	f7ff ff0d 	bl	b66c2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b68a8:	f1b0 0800 	subs.w	r8, r0, #0
   b68ac:	db12      	blt.n	b68d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b68ae:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b68b2:	f7ff ff06 	bl	b66c2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b68b6:	2800      	cmp	r0, #0
   b68b8:	db0c      	blt.n	b68d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b68ba:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b68bc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b68c0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b68c2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b68c6:	d1eb      	bne.n	b68a0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b68c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b68cc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b68ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b68d2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b68d4:	2300      	movs	r3, #0
   b68d6:	6133      	str	r3, [r6, #16]
}
   b68d8:	b002      	add	sp, #8
   b68da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b68de:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68e2:	2124      	movs	r1, #36	; 0x24
   b68e4:	4620      	mov	r0, r4
   b68e6:	f001 fc88 	bl	b81fa <strnlen>
   b68ea:	42a8      	cmp	r0, r5
   b68ec:	d807      	bhi.n	b68fe <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b68ee:	4642      	mov	r2, r8
   b68f0:	2100      	movs	r1, #0
   b68f2:	4630      	mov	r0, r6
}
   b68f4:	b002      	add	sp, #8
   b68f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b68fa:	f001 bc23 	b.w	b8144 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68fe:	f1b8 0f00 	cmp.w	r8, #0
   b6902:	d0e9      	beq.n	b68d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6904:	5d60      	ldrb	r0, [r4, r5]
   b6906:	f7ff fedc 	bl	b66c2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b690a:	0603      	lsls	r3, r0, #24
   b690c:	d415      	bmi.n	b693a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b690e:	0100      	lsls	r0, r0, #4
   b6910:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6914:	b2c7      	uxtb	r7, r0
   b6916:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b691a:	2124      	movs	r1, #36	; 0x24
   b691c:	4620      	mov	r0, r4
   b691e:	f001 fc6c 	bl	b81fa <strnlen>
   b6922:	3501      	adds	r5, #1
   b6924:	42a8      	cmp	r0, r5
   b6926:	d908      	bls.n	b693a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6928:	5d60      	ldrb	r0, [r4, r5]
   b692a:	f7ff feca 	bl	b66c2 <_ZN8particle11hexToNibbleEc>
   b692e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6930:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6932:	bfa4      	itt	ge
   b6934:	4338      	orrge	r0, r7
   b6936:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b693a:	3501      	adds	r5, #1
   b693c:	e7d1      	b.n	b68e2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b693e:	bf00      	nop
   b6940:	000b91c6 	.word	0x000b91c6

000b6944 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6944:	b513      	push	{r0, r1, r4, lr}
   b6946:	4604      	mov	r4, r0
   b6948:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b694a:	f7ff ff15 	bl	b6778 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b694e:	4620      	mov	r0, r4
   b6950:	9901      	ldr	r1, [sp, #4]
   b6952:	f7ff ff87 	bl	b6864 <_ZN8particle7BleUuid9constructEPKc>
}
   b6956:	4620      	mov	r0, r4
   b6958:	b002      	add	sp, #8
   b695a:	bd10      	pop	{r4, pc}

000b695c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b695c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b695e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6962:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6964:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6966:	8043      	strh	r3, [r0, #2]
   b6968:	220e      	movs	r2, #14
   b696a:	4629      	mov	r1, r5
   b696c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b696e:	7105      	strb	r5, [r0, #4]
   b6970:	3006      	adds	r0, #6
   b6972:	f001 fbe7 	bl	b8144 <memset>
   b6976:	f104 0014 	add.w	r0, r4, #20
   b697a:	f7ff fefd 	bl	b6778 <_ZN8particle7BleUuidC1Ev>
   b697e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6982:	f7ff fef9 	bl	b6778 <_ZN8particle7BleUuidC1Ev>
   b6986:	4904      	ldr	r1, [pc, #16]	; (b6998 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6988:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b698c:	f000 ffef 	bl	b796e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6990:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6992:	4620      	mov	r0, r4
   b6994:	bd38      	pop	{r3, r4, r5, pc}
   b6996:	bf00      	nop
   b6998:	000b8322 	.word	0x000b8322

000b699c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b699c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b699e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b69a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b69a6:	4293      	cmp	r3, r2
   b69a8:	4618      	mov	r0, r3
   b69aa:	d006      	beq.n	b69ba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b69ac:	6804      	ldr	r4, [r0, #0]
   b69ae:	8824      	ldrh	r4, [r4, #0]
   b69b0:	428c      	cmp	r4, r1
   b69b2:	f103 0308 	add.w	r3, r3, #8
   b69b6:	d1f6      	bne.n	b69a6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b69b8:	bd10      	pop	{r4, pc}
        return nullptr;
   b69ba:	2000      	movs	r0, #0
   b69bc:	e7fc      	b.n	b69b8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b69c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b69c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69c2:	4606      	mov	r6, r0
   b69c4:	b085      	sub	sp, #20
   b69c6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b69c8:	460d      	mov	r5, r1
   b69ca:	2900      	cmp	r1, #0
   b69cc:	d050      	beq.n	b6a70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b69ce:	2a00      	cmp	r2, #0
   b69d0:	d04e      	beq.n	b6a70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b69d2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b69d4:	7823      	ldrb	r3, [r4, #0]
   b69d6:	2af4      	cmp	r2, #244	; 0xf4
   b69d8:	bf28      	it	cs
   b69da:	22f4      	movcs	r2, #244	; 0xf4
   b69dc:	b343      	cbz	r3, b6a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b69de:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b69e0:	0798      	lsls	r0, r3, #30
   b69e2:	d509      	bpl.n	b69f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b69e4:	89a0      	ldrh	r0, [r4, #12]
   b69e6:	9203      	str	r2, [sp, #12]
   b69e8:	2300      	movs	r3, #0
   b69ea:	f7fe fff9 	bl	b59e0 <hal_ble_gatt_server_set_characteristic_value>
   b69ee:	2800      	cmp	r0, #0
   b69f0:	9a03      	ldr	r2, [sp, #12]
   b69f2:	da03      	bge.n	b69fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b69f4:	b005      	add	sp, #20
   b69f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b69f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b69fc:	6834      	ldr	r4, [r6, #0]
   b69fe:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6a00:	06d9      	lsls	r1, r3, #27
   b6a02:	d509      	bpl.n	b6a18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6a04:	2f01      	cmp	r7, #1
   b6a06:	d007      	beq.n	b6a18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a08:	89a0      	ldrh	r0, [r4, #12]
   b6a0a:	2300      	movs	r3, #0
   b6a0c:	4629      	mov	r1, r5
}
   b6a0e:	b005      	add	sp, #20
   b6a10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a14:	f7ff b820 	b.w	b5a58 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6a18:	069b      	lsls	r3, r3, #26
   b6a1a:	d5eb      	bpl.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6a1c:	2f02      	cmp	r7, #2
   b6a1e:	d0e9      	beq.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a20:	89a0      	ldrh	r0, [r4, #12]
   b6a22:	2300      	movs	r3, #0
   b6a24:	4629      	mov	r1, r5
}
   b6a26:	b005      	add	sp, #20
   b6a28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a2c:	f7ff b81e 	b.w	b5a6c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6a30:	8860      	ldrh	r0, [r4, #2]
   b6a32:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a36:	4288      	cmp	r0, r1
   b6a38:	d01c      	beq.n	b6a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6a3a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6a3c:	074e      	lsls	r6, r1, #29
   b6a3e:	d501      	bpl.n	b6a44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6a40:	2f01      	cmp	r7, #1
   b6a42:	d104      	bne.n	b6a4e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6a44:	070b      	lsls	r3, r1, #28
   b6a46:	d409      	bmi.n	b6a5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6a48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6a4c:	e7d2      	b.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a4e:	89a1      	ldrh	r1, [r4, #12]
   b6a50:	9300      	str	r3, [sp, #0]
   b6a52:	4613      	mov	r3, r2
   b6a54:	462a      	mov	r2, r5
   b6a56:	f7fe ffd7 	bl	b5a08 <hal_ble_gatt_client_write_without_response>
   b6a5a:	e7cb      	b.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6a5c:	2f02      	cmp	r7, #2
   b6a5e:	d0f3      	beq.n	b6a48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a60:	2300      	movs	r3, #0
   b6a62:	89a1      	ldrh	r1, [r4, #12]
   b6a64:	9300      	str	r3, [sp, #0]
   b6a66:	4613      	mov	r3, r2
   b6a68:	462a      	mov	r2, r5
   b6a6a:	f7fe ffc3 	bl	b59f4 <hal_ble_gatt_client_write_with_response>
   b6a6e:	e7c1      	b.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6a70:	4802      	ldr	r0, [pc, #8]	; (b6a7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6a72:	e7bf      	b.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6a74:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6a78:	e7bc      	b.n	b69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6a7a:	bf00      	nop
   b6a7c:	fffffef2 	.word	0xfffffef2

000b6a80 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a84:	2600      	movs	r6, #0
   b6a86:	6006      	str	r6, [r0, #0]
   b6a88:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a8a:	2028      	movs	r0, #40	; 0x28
   b6a8c:	460c      	mov	r4, r1
   b6a8e:	f7fd fb00 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a92:	1e05      	subs	r5, r0, #0
   b6a94:	f105 080c 	add.w	r8, r5, #12
   b6a98:	d00f      	beq.n	b6aba <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a9a:	2301      	movs	r3, #1
   b6a9c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6aa0:	4b08      	ldr	r3, [pc, #32]	; (b6ac4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6aa2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6aa4:	4640      	mov	r0, r8
   b6aa6:	f7ff fe67 	bl	b6778 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6aac:	622e      	str	r6, [r5, #32]
   b6aae:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6ab2:	4646      	mov	r6, r8
   b6ab4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6ab6:	6823      	ldr	r3, [r4, #0]
   b6ab8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6aba:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6abe:	4638      	mov	r0, r7
   b6ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ac4:	000b9190 	.word	0x000b9190

000b6ac8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6ac8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6aca:	2500      	movs	r5, #0
   b6acc:	6005      	str	r5, [r0, #0]
   b6ace:	4606      	mov	r6, r0
   b6ad0:	2030      	movs	r0, #48	; 0x30
   b6ad2:	f7fd fade 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6ad6:	4604      	mov	r4, r0
   b6ad8:	b188      	cbz	r0, b6afe <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6ada:	2301      	movs	r3, #1
   b6adc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6ae0:	4b09      	ldr	r3, [pc, #36]	; (b6b08 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6ae2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6ae8:	8183      	strh	r3, [r0, #12]
   b6aea:	300e      	adds	r0, #14
   b6aec:	f7ff fe39 	bl	b6762 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6af0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6af4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6af8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6afc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6afe:	6074      	str	r4, [r6, #4]
   b6b00:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6b02:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6b04:	4630      	mov	r0, r6
   b6b06:	bd70      	pop	{r4, r5, r6, pc}
   b6b08:	000b91ac 	.word	0x000b91ac

000b6b0c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b0e:	460d      	mov	r5, r1
   b6b10:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6b12:	a801      	add	r0, sp, #4
   b6b14:	f7ff fdea 	bl	b66ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6b18:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6b1a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6b1e:	6023      	str	r3, [r4, #0]
   b6b20:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6b24:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6b26:	a801      	add	r0, sp, #4
   b6b28:	f7ff fdee 	bl	b6708 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	b003      	add	sp, #12
   b6b30:	bd30      	pop	{r4, r5, pc}

000b6b32 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6b32:	b530      	push	{r4, r5, lr}
   b6b34:	4605      	mov	r5, r0
   b6b36:	b087      	sub	sp, #28
   b6b38:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6b3a:	a801      	add	r0, sp, #4
   b6b3c:	f7ff fdd6 	bl	b66ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6b40:	682a      	ldr	r2, [r5, #0]
   b6b42:	6823      	ldr	r3, [r4, #0]
   b6b44:	8812      	ldrh	r2, [r2, #0]
   b6b46:	881b      	ldrh	r3, [r3, #0]
   b6b48:	429a      	cmp	r2, r3
   b6b4a:	d10d      	bne.n	b6b68 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6b4c:	4629      	mov	r1, r5
   b6b4e:	a802      	add	r0, sp, #8
   b6b50:	f7ff ffdc 	bl	b6b0c <_ZNK8particle13BlePeerDevice7addressEv>
   b6b54:	4621      	mov	r1, r4
   b6b56:	a804      	add	r0, sp, #16
   b6b58:	f7ff ffd8 	bl	b6b0c <_ZNK8particle13BlePeerDevice7addressEv>
   b6b5c:	a904      	add	r1, sp, #16
   b6b5e:	a802      	add	r0, sp, #8
   b6b60:	f7ff fdeb 	bl	b673a <_ZNK8particle10BleAddresseqERKS0_>
   b6b64:	4604      	mov	r4, r0
   b6b66:	b900      	cbnz	r0, b6b6a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6b68:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6b6a:	a801      	add	r0, sp, #4
   b6b6c:	f7ff fdcc 	bl	b6708 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6b70:	4620      	mov	r0, r4
   b6b72:	b007      	add	sp, #28
   b6b74:	bd30      	pop	{r4, r5, pc}
	...

000b6b78 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6b78:	b510      	push	{r4, lr}
   b6b7a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6b7c:	2064      	movs	r0, #100	; 0x64
   b6b7e:	f7fd fa88 	bl	b4092 <_Znwj>
   b6b82:	b168      	cbz	r0, b6ba0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6b84:	2300      	movs	r3, #0
   b6b86:	e9c0 3300 	strd	r3, r3, [r0]
   b6b8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6b92:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6b96:	6203      	str	r3, [r0, #32]
   b6b98:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6b9a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6b9c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6b9e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6ba0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6ba2:	b920      	cbnz	r0, b6bae <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6ba4:	4a0a      	ldr	r2, [pc, #40]	; (b6bd0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6ba6:	490b      	ldr	r1, [pc, #44]	; (b6bd4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6ba8:	200a      	movs	r0, #10
   b6baa:	f7fe ffc9 	bl	b5b40 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6bae:	2000      	movs	r0, #0
   b6bb0:	f7fe fee2 	bl	b5978 <hal_ble_stack_init>
   b6bb4:	b120      	cbz	r0, b6bc0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6bb6:	4a06      	ldr	r2, [pc, #24]	; (b6bd0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6bb8:	4907      	ldr	r1, [pc, #28]	; (b6bd8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6bba:	200a      	movs	r0, #10
   b6bbc:	f7fe ffc0 	bl	b5b40 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6bc0:	6821      	ldr	r1, [r4, #0]
   b6bc2:	4806      	ldr	r0, [pc, #24]	; (b6bdc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6bc4:	2200      	movs	r2, #0
   b6bc6:	f7fe ff3d 	bl	b5a44 <hal_ble_set_callback_on_periph_link_events>
}
   b6bca:	4620      	mov	r0, r4
   b6bcc:	bd10      	pop	{r4, pc}
   b6bce:	bf00      	nop
   b6bd0:	000b5a91 	.word	0x000b5a91
   b6bd4:	000b9020 	.word	0x000b9020
   b6bd8:	000b905e 	.word	0x000b905e
   b6bdc:	000b7161 	.word	0x000b7161

000b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6be0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6be2:	4c0a      	ldr	r4, [pc, #40]	; (b6c0c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6be4:	7823      	ldrb	r3, [r4, #0]
   b6be6:	f3bf 8f5b 	dmb	ish
   b6bea:	07db      	lsls	r3, r3, #31
   b6bec:	d40c      	bmi.n	b6c08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7fd fa62 	bl	b40b8 <__cxa_guard_acquire>
   b6bf4:	b140      	cbz	r0, b6c08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6bf6:	4806      	ldr	r0, [pc, #24]	; (b6c10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6bf8:	f7ff ffbe 	bl	b6b78 <_ZN8particle14BleLocalDeviceC1Ev>
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	f7fd fa60 	bl	b40c2 <__cxa_guard_release>
   b6c02:	4804      	ldr	r0, [pc, #16]	; (b6c14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6c04:	f001 fa60 	bl	b80c8 <atexit>
    return instance;
}
   b6c08:	4801      	ldr	r0, [pc, #4]	; (b6c10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6c0a:	bd10      	pop	{r4, pc}
   b6c0c:	2003e704 	.word	0x2003e704
   b6c10:	2003e710 	.word	0x2003e710
   b6c14:	000b6e29 	.word	0x000b6e29

000b6c18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6c18:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6c1a:	6803      	ldr	r3, [r0, #0]
   b6c1c:	3b09      	subs	r3, #9
   b6c1e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6c20:	b08d      	sub	sp, #52	; 0x34
   b6c22:	4604      	mov	r4, r0
   b6c24:	460d      	mov	r5, r1
    switch (event->type) {
   b6c26:	d811      	bhi.n	b6c4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6c28:	f7ff ffda 	bl	b6be0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6c2c:	88a1      	ldrh	r1, [r4, #4]
   b6c2e:	6800      	ldr	r0, [r0, #0]
   b6c30:	f7ff feb4 	bl	b699c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6c34:	4603      	mov	r3, r0
   b6c36:	b958      	cbnz	r0, b6c50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6c38:	2220      	movs	r2, #32
   b6c3a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6c3e:	4a0b      	ldr	r2, [pc, #44]	; (b6c6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6c40:	9200      	str	r2, [sp, #0]
   b6c42:	490b      	ldr	r1, [pc, #44]	; (b6c70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6c44:	aa04      	add	r2, sp, #16
   b6c46:	2032      	movs	r0, #50	; 0x32
   b6c48:	f7fe ff82 	bl	b5b50 <log_message>
}
   b6c4c:	b00d      	add	sp, #52	; 0x34
   b6c4e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6c50:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6c52:	2a00      	cmp	r2, #0
   b6c54:	d0fa      	beq.n	b6c4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6c56:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c5a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6c5e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6c62:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6c64:	aa04      	add	r2, sp, #16
   b6c66:	a903      	add	r1, sp, #12
   b6c68:	47a0      	blx	r4
}
   b6c6a:	e7ef      	b.n	b6c4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6c6c:	000b90a0 	.word	0x000b90a0
   b6c70:	000b9037 	.word	0x000b9037

000b6c74 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6c74:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6c76:	2000      	movs	r0, #0
   b6c78:	f7fe fe7e 	bl	b5978 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6c7c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6c80:	bd08      	pop	{r3, pc}

000b6c82 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6c82:	b919      	cbnz	r1, b6c8c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6c84:	460a      	mov	r2, r1
   b6c86:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6c88:	f7fe be7e 	b.w	b5988 <hal_ble_gap_set_advertising_data>
   b6c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c90:	2200      	movs	r2, #0
   b6c92:	e7f9      	b.n	b6c88 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6c94 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6c94:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6c96:	69d8      	ldr	r0, [r3, #28]
}
   b6c98:	2800      	cmp	r0, #0
   b6c9a:	bfd4      	ite	le
   b6c9c:	2000      	movle	r0, #0
   b6c9e:	2001      	movgt	r0, #1
   b6ca0:	4770      	bx	lr

000b6ca2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6ca2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6ca4:	1e14      	subs	r4, r2, #0
   b6ca6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6ca8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6caa:	db02      	blt.n	b6cb2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6cac:	1862      	adds	r2, r4, r1
   b6cae:	429a      	cmp	r2, r3
   b6cb0:	dd00      	ble.n	b6cb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6cb2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6cb4:	682a      	ldr	r2, [r5, #0]
   b6cb6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6cb8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6cba:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6cbc:	1a52      	subs	r2, r2, r1
   b6cbe:	f001 fa27 	bl	b8110 <memmove>
    size_ -= n;
   b6cc2:	686a      	ldr	r2, [r5, #4]
   b6cc4:	1b12      	subs	r2, r2, r4
   b6cc6:	606a      	str	r2, [r5, #4]
}
   b6cc8:	bd38      	pop	{r3, r4, r5, pc}

000b6cca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6ccc:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6cce:	4604      	mov	r4, r0
   b6cd0:	460d      	mov	r5, r1
   b6cd2:	ab01      	add	r3, sp, #4
   b6cd4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6cd8:	f7ff fc9c 	bl	b6614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6cdc:	4602      	mov	r2, r0
   b6cde:	b138      	cbz	r0, b6cf0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6ce0:	9901      	ldr	r1, [sp, #4]
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	f7ff ffdd 	bl	b6ca2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6ce8:	4629      	mov	r1, r5
   b6cea:	4620      	mov	r0, r4
   b6cec:	f7ff ffed 	bl	b6cca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6cf0:	b003      	add	sp, #12
   b6cf2:	bd30      	pop	{r4, r5, pc}

000b6cf4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6cf4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6cf6:	460c      	mov	r4, r1
   b6cf8:	b929      	cbnz	r1, b6d06 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6cfa:	460a      	mov	r2, r1
   b6cfc:	4608      	mov	r0, r1
}
   b6cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6d02:	f7fe be49 	b.w	b5998 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6d06:	2101      	movs	r1, #1
   b6d08:	4620      	mov	r0, r4
   b6d0a:	f7ff ffde 	bl	b6cca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6d0e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6d12:	2200      	movs	r2, #0
   b6d14:	e7f3      	b.n	b6cfe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6d16 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6d16:	b538      	push	{r3, r4, r5, lr}
   b6d18:	4604      	mov	r4, r0
   b6d1a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6d1c:	f7ff ffb1 	bl	b6c82 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6d20:	2800      	cmp	r0, #0
   b6d22:	db0a      	blt.n	b6d3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6d24:	4629      	mov	r1, r5
   b6d26:	4620      	mov	r0, r4
   b6d28:	f7ff ffe4 	bl	b6cf4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6d2c:	2800      	cmp	r0, #0
   b6d2e:	db04      	blt.n	b6d3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6d34:	2000      	movs	r0, #0
   b6d36:	f7fe be37 	b.w	b59a8 <hal_ble_gap_start_advertising>
}
   b6d3a:	bd38      	pop	{r3, r4, r5, pc}

000b6d3c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6d3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6d3e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6d40:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6d42:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d44:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6d46:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d48:	f7fd f9a3 	bl	b4092 <_Znwj>
   b6d4c:	b118      	cbz	r0, b6d56 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6d4e:	682b      	ldr	r3, [r5, #0]
   b6d50:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6d52:	686b      	ldr	r3, [r5, #4]
   b6d54:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d56:	4b03      	ldr	r3, [pc, #12]	; (b6d64 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6d58:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d5a:	4b03      	ldr	r3, [pc, #12]	; (b6d68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d5c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d5e:	60a3      	str	r3, [r4, #8]
      }
   b6d60:	4620      	mov	r0, r4
   b6d62:	bd38      	pop	{r3, r4, r5, pc}
   b6d64:	000b6655 	.word	0x000b6655
   b6d68:	000b666d 	.word	0x000b666d

000b6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6d6c:	680b      	ldr	r3, [r1, #0]
   b6d6e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6d70:	b113      	cbz	r3, b6d78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6d72:	685a      	ldr	r2, [r3, #4]
   b6d74:	3201      	adds	r2, #1
   b6d76:	605a      	str	r2, [r3, #4]
      }
   b6d78:	4770      	bx	lr

000b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6d7a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6d7c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d80:	4604      	mov	r4, r0
   b6d82:	f840 3b04 	str.w	r3, [r0], #4
   b6d86:	f7ff fff1 	bl	b6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6d8a:	6823      	ldr	r3, [r4, #0]
   b6d8c:	b90b      	cbnz	r3, b6d92 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6d8e:	f7ff fc57 	bl	b6640 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6d92:	4620      	mov	r0, r4
   b6d94:	bd10      	pop	{r4, pc}

000b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6d96:	b510      	push	{r4, lr}
   b6d98:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d9c:	4604      	mov	r4, r0
   b6d9e:	f840 3b04 	str.w	r3, [r0], #4
   b6da2:	f7ff ffe3 	bl	b6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6da6:	4620      	mov	r0, r4
   b6da8:	bd10      	pop	{r4, pc}

000b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6daa:	b510      	push	{r4, lr}
   b6dac:	f851 3b04 	ldr.w	r3, [r1], #4
   b6db0:	4604      	mov	r4, r0
   b6db2:	f840 3b04 	str.w	r3, [r0], #4
   b6db6:	f7ff ffd9 	bl	b6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6dba:	4620      	mov	r0, r4
   b6dbc:	bd10      	pop	{r4, pc}

000b6dbe <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6dbe:	b510      	push	{r4, lr}
   b6dc0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6dc2:	3004      	adds	r0, #4
   b6dc4:	f7fe ffac 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6dc8:	4620      	mov	r0, r4
   b6dca:	bd10      	pop	{r4, pc}

000b6dcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dcc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6dce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dd2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6dd4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6dd8:	42ae      	cmp	r6, r5
   b6dda:	d004      	beq.n	b6de6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6ddc:	1d28      	adds	r0, r5, #4
   b6dde:	f7fe ff9f 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6de2:	3508      	adds	r5, #8
   b6de4:	e7f8      	b.n	b6dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6de6:	6820      	ldr	r0, [r4, #0]
   b6de8:	f7fe ff56 	bl	b5c98 <free>
}
   b6dec:	4620      	mov	r0, r4
   b6dee:	bd70      	pop	{r4, r5, r6, pc}

000b6df0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6df0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6df2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6df6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6df8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6dfc:	42ae      	cmp	r6, r5
   b6dfe:	d004      	beq.n	b6e0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6e00:	1d28      	adds	r0, r5, #4
   b6e02:	f7fe ff8d 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e06:	3508      	adds	r5, #8
   b6e08:	e7f8      	b.n	b6dfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6e0a:	6820      	ldr	r0, [r4, #0]
   b6e0c:	f7fe ff44 	bl	b5c98 <free>
}
   b6e10:	4620      	mov	r0, r4
   b6e12:	bd70      	pop	{r4, r5, r6, pc}

000b6e14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6e14:	b510      	push	{r4, lr}
   b6e16:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6e18:	3024      	adds	r0, #36	; 0x24
   b6e1a:	f7ff ffe9 	bl	b6df0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e1e:	f104 0018 	add.w	r0, r4, #24
   b6e22:	f7ff ffd3 	bl	b6dcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6e26:	bd10      	pop	{r4, pc}

000b6e28 <__tcf_0>:
    static BleLocalDevice instance;
   b6e28:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6e2a:	4b17      	ldr	r3, [pc, #92]	; (b6e88 <__tcf_0+0x60>)
   b6e2c:	681c      	ldr	r4, [r3, #0]
   b6e2e:	b354      	cbz	r4, b6e86 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6e30:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6e34:	f7ff fa1c 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
   b6e38:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6e3c:	f7ff fa18 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
   b6e40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6e44:	f7ff fa14 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
   b6e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6e4c:	f7ff fa10 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6e50:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6e54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e58:	42ae      	cmp	r6, r5
   b6e5a:	d004      	beq.n	b6e66 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6e5c:	1d28      	adds	r0, r5, #4
   b6e5e:	f7fe ff5f 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e62:	3508      	adds	r5, #8
   b6e64:	e7f8      	b.n	b6e58 <__tcf_0+0x30>
    ::free(ptr);
   b6e66:	69a0      	ldr	r0, [r4, #24]
   b6e68:	f7fe ff16 	bl	b5c98 <free>
    ~BleLocalDeviceImpl() = default;
   b6e6c:	f104 000c 	add.w	r0, r4, #12
   b6e70:	f7ff ffbe 	bl	b6df0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e74:	4620      	mov	r0, r4
   b6e76:	f7ff ffa9 	bl	b6dcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6e82:	f7fd b90a 	b.w	b409a <_ZdlPvj>
   b6e86:	bd70      	pop	{r4, r5, r6, pc}
   b6e88:	2003e710 	.word	0x2003e710

000b6e8c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6e8c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6e8e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e90:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6e94:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b6e98:	6803      	ldr	r3, [r0, #0]
   b6e9a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e9c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e9e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6ea0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6ea2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6ea4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6ea6:	f7fe ff3b 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6eaa:	b002      	add	sp, #8
   b6eac:	bd10      	pop	{r4, pc}

000b6eae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6eae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6eb0:	b510      	push	{r4, lr}
      if (_M_empty())
   b6eb2:	b90a      	cbnz	r2, b6eb8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6eb4:	f000 fff3 	bl	b7e9e <_ZSt25__throw_bad_function_callv>
    }
   b6eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6ebc:	68c3      	ldr	r3, [r0, #12]
   b6ebe:	4718      	bx	r3

000b6ec0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6ec0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6ec2:	6883      	ldr	r3, [r0, #8]
   b6ec4:	428b      	cmp	r3, r1
   b6ec6:	da02      	bge.n	b6ece <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6ec8:	f7ff f8ca 	bl	b6060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6ecc:	bd08      	pop	{r3, pc}
    return true;
   b6ece:	2001      	movs	r0, #1
   b6ed0:	e7fc      	b.n	b6ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6ed2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ed6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ed8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6eda:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6edc:	4419      	add	r1, r3
   b6ede:	6883      	ldr	r3, [r0, #8]
   b6ee0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ee2:	4604      	mov	r4, r0
   b6ee4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ee6:	dc12      	bgt.n	b6f0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6ee8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6eea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6eec:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6eee:	1bd2      	subs	r2, r2, r7
   b6ef0:	4631      	mov	r1, r6
   b6ef2:	1970      	adds	r0, r6, r5
   b6ef4:	f001 f90c 	bl	b8110 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6ef8:	462a      	mov	r2, r5
   b6efa:	4641      	mov	r1, r8
   b6efc:	4630      	mov	r0, r6
   b6efe:	f001 f8f9 	bl	b80f4 <memcpy>
    size_ += n;
   b6f02:	6863      	ldr	r3, [r4, #4]
   b6f04:	442b      	add	r3, r5
   b6f06:	6063      	str	r3, [r4, #4]
    return true;
   b6f08:	2001      	movs	r0, #1
}
   b6f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6f0e:	f7ff f8a7 	bl	b6060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f12:	2800      	cmp	r0, #0
   b6f14:	d1e8      	bne.n	b6ee8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6f16:	e7f8      	b.n	b6f0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6f18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f1a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f1c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6f20:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6f22:	4604      	mov	r4, r0
   b6f24:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f26:	da0b      	bge.n	b6f40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6f28:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f2a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f2c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f2e:	1b52      	subs	r2, r2, r5
   b6f30:	1c48      	adds	r0, r1, #1
   b6f32:	f001 f8ed 	bl	b8110 <memmove>
    new(p) T(std::move(value));
   b6f36:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6f38:	6863      	ldr	r3, [r4, #4]
   b6f3a:	3301      	adds	r3, #1
   b6f3c:	6063      	str	r3, [r4, #4]
}
   b6f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f40:	3101      	adds	r1, #1
   b6f42:	f7ff f88d 	bl	b6060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f46:	2800      	cmp	r0, #0
   b6f48:	d1ee      	bne.n	b6f28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6f4a:	e7f8      	b.n	b6f3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6f4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f4c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6f4e:	6841      	ldr	r1, [r0, #4]
   b6f50:	f7ff bfe2 	b.w	b6f18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f58:	4604      	mov	r4, r0
   b6f5a:	461d      	mov	r5, r3
   b6f5c:	460f      	mov	r7, r1
   b6f5e:	ab01      	add	r3, sp, #4
   b6f60:	4690      	mov	r8, r2
   b6f62:	460a      	mov	r2, r1
   b6f64:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6f68:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6f6c:	f7ff fb52 	bl	b6614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6f70:	1cae      	adds	r6, r5, #2
   b6f72:	6863      	ldr	r3, [r4, #4]
   b6f74:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6f76:	f1b9 0f00 	cmp.w	r9, #0
   b6f7a:	d126      	bne.n	b6fca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6f7c:	b328      	cbz	r0, b6fca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6f7e:	4433      	add	r3, r6
   b6f80:	1a1b      	subs	r3, r3, r0
   b6f82:	2bff      	cmp	r3, #255	; 0xff
   b6f84:	d809      	bhi.n	b6f9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6f86:	9901      	ldr	r1, [sp, #4]
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f7ff fe8a 	bl	b6ca2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6f8e:	6861      	ldr	r1, [r4, #4]
   b6f90:	4620      	mov	r0, r4
   b6f92:	4431      	add	r1, r6
   b6f94:	f7ff ff94 	bl	b6ec0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6f98:	b918      	cbnz	r0, b6fa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6f9a:	6860      	ldr	r0, [r4, #4]
}
   b6f9c:	b003      	add	sp, #12
   b6f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6fa2:	1c6a      	adds	r2, r5, #1
   b6fa4:	9901      	ldr	r1, [sp, #4]
   b6fa6:	b2d2      	uxtb	r2, r2
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff ffb5 	bl	b6f18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6fae:	9901      	ldr	r1, [sp, #4]
   b6fb0:	463a      	mov	r2, r7
   b6fb2:	3101      	adds	r1, #1
   b6fb4:	4620      	mov	r0, r4
   b6fb6:	f7ff ffaf 	bl	b6f18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6fba:	9901      	ldr	r1, [sp, #4]
   b6fbc:	462b      	mov	r3, r5
   b6fbe:	4642      	mov	r2, r8
   b6fc0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6fc2:	4620      	mov	r0, r4
   b6fc4:	f7ff ff85 	bl	b6ed2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6fc8:	e7e7      	b.n	b6f9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6fca:	18f1      	adds	r1, r6, r3
   b6fcc:	29ff      	cmp	r1, #255	; 0xff
   b6fce:	d8e4      	bhi.n	b6f9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6fd0:	4620      	mov	r0, r4
   b6fd2:	f7ff ff75 	bl	b6ec0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	d0df      	beq.n	b6f9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6fda:	1c69      	adds	r1, r5, #1
   b6fdc:	b2c9      	uxtb	r1, r1
   b6fde:	4620      	mov	r0, r4
   b6fe0:	f7ff ffb4 	bl	b6f4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6fe4:	4639      	mov	r1, r7
   b6fe6:	4620      	mov	r0, r4
   b6fe8:	f7ff ffb0 	bl	b6f4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6fec:	6861      	ldr	r1, [r4, #4]
   b6fee:	462b      	mov	r3, r5
   b6ff0:	4642      	mov	r2, r8
   b6ff2:	e7e6      	b.n	b6fc2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6ff4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6ff4:	b430      	push	{r4, r5}
   b6ff6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6ffa:	b11a      	cbz	r2, b7004 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6ffc:	9502      	str	r5, [sp, #8]
}
   b6ffe:	bc30      	pop	{r4, r5}
   b7000:	f7ff bfa8 	b.w	b6f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7004:	6840      	ldr	r0, [r0, #4]
}
   b7006:	bc30      	pop	{r4, r5}
   b7008:	4770      	bx	lr

000b700a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b700a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b700c:	2300      	movs	r3, #0
   b700e:	e9c0 3300 	strd	r3, r3, [r0]
   b7012:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7014:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7016:	9300      	str	r3, [sp, #0]
   b7018:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b701a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b701e:	4619      	mov	r1, r3
   b7020:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7024:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7026:	f7ff ffe5 	bl	b6ff4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b702a:	4620      	mov	r0, r4
   b702c:	b004      	add	sp, #16
   b702e:	bd10      	pop	{r4, pc}

000b7030 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7032:	460a      	mov	r2, r1
   b7034:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7036:	2114      	movs	r1, #20
   b7038:	4610      	mov	r0, r2
   b703a:	9203      	str	r2, [sp, #12]
   b703c:	f001 f8dd 	bl	b81fa <strnlen>
   b7040:	2100      	movs	r1, #0
   b7042:	4603      	mov	r3, r0
   b7044:	9100      	str	r1, [sp, #0]
   b7046:	9a03      	ldr	r2, [sp, #12]
   b7048:	2109      	movs	r1, #9
   b704a:	4620      	mov	r0, r4
   b704c:	f7ff ffd2 	bl	b6ff4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7050:	b004      	add	sp, #16
   b7052:	bd10      	pop	{r4, pc}

000b7054 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7054:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7058:	4604      	mov	r4, r0
   b705a:	460d      	mov	r5, r1
   b705c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b705e:	d914      	bls.n	b708a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7060:	4290      	cmp	r0, r2
   b7062:	d213      	bcs.n	b708c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7064:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7068:	1a75      	subs	r5, r6, r1
   b706a:	f1a1 0708 	sub.w	r7, r1, #8
   b706e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7070:	42b7      	cmp	r7, r6
   b7072:	d018      	beq.n	b70a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7074:	b11c      	cbz	r4, b707e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7076:	4631      	mov	r1, r6
   b7078:	4620      	mov	r0, r4
   b707a:	f7ff fe96 	bl	b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b707e:	1d30      	adds	r0, r6, #4
   b7080:	f7fe fe4e 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7084:	3e08      	subs	r6, #8
   b7086:	3c08      	subs	r4, #8
   b7088:	e7f2      	b.n	b7070 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b708a:	d00c      	beq.n	b70a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b708c:	42b5      	cmp	r5, r6
   b708e:	d00a      	beq.n	b70a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7090:	b11c      	cbz	r4, b709a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7092:	4629      	mov	r1, r5
   b7094:	4620      	mov	r0, r4
   b7096:	f7ff fe88 	bl	b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b709a:	1d28      	adds	r0, r5, #4
   b709c:	f7fe fe40 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b70a0:	3508      	adds	r5, #8
   b70a2:	3408      	adds	r4, #8
   b70a4:	e7f2      	b.n	b708c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b70a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b70a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b70aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b70ac:	6846      	ldr	r6, [r0, #4]
   b70ae:	4668      	mov	r0, sp
   b70b0:	f7ff fe7b 	bl	b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b70b4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b70b8:	429f      	cmp	r7, r3
   b70ba:	db12      	blt.n	b70e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b70bc:	3701      	adds	r7, #1
        if (n > 0) {
   b70be:	2f00      	cmp	r7, #0
   b70c0:	dd29      	ble.n	b7116 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b70c2:	00f8      	lsls	r0, r7, #3
   b70c4:	f7fe fde0 	bl	b5c88 <malloc>
            if (!d) {
   b70c8:	4605      	mov	r5, r0
   b70ca:	b1f0      	cbz	r0, b710a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b70cc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b70d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b70d4:	f7ff ffbe 	bl	b7054 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b70d8:	6820      	ldr	r0, [r4, #0]
   b70da:	f7fe fddd 	bl	b5c98 <free>
        data_ = d;
   b70de:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b70e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b70e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b70e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b70e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b70ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b70ee:	4631      	mov	r1, r6
   b70f0:	f106 0008 	add.w	r0, r6, #8
   b70f4:	f7ff ffae 	bl	b7054 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b70f8:	b11e      	cbz	r6, b7102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b70fa:	4669      	mov	r1, sp
   b70fc:	4630      	mov	r0, r6
   b70fe:	f7ff fe54 	bl	b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7102:	6863      	ldr	r3, [r4, #4]
   b7104:	3301      	adds	r3, #1
   b7106:	6063      	str	r3, [r4, #4]
    return true;
   b7108:	2501      	movs	r5, #1
   b710a:	a801      	add	r0, sp, #4
   b710c:	f7fe fe08 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7110:	4628      	mov	r0, r5
   b7112:	b003      	add	sp, #12
   b7114:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7116:	2500      	movs	r5, #0
   b7118:	e7de      	b.n	b70d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b711a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b711c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7120:	4605      	mov	r5, r0
   b7122:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7124:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7128:	42a6      	cmp	r6, r4
   b712a:	d005      	beq.n	b7138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b712c:	4639      	mov	r1, r7
   b712e:	4620      	mov	r0, r4
   b7130:	f7ff fcff 	bl	b6b32 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7134:	b108      	cbz	r0, b713a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7136:	b914      	cbnz	r4, b713e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b713a:	3408      	adds	r4, #8
   b713c:	e7f4      	b.n	b7128 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b713e:	1d20      	adds	r0, r4, #4
   b7140:	f7fe fdee 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7144:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7148:	f104 0108 	add.w	r1, r4, #8
   b714c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7150:	4620      	mov	r0, r4
   b7152:	f7ff ff7f 	bl	b7054 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7156:	686b      	ldr	r3, [r5, #4]
   b7158:	3b01      	subs	r3, #1
   b715a:	606b      	str	r3, [r5, #4]
    return true;
   b715c:	e7ec      	b.n	b7138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7160 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7164:	4605      	mov	r5, r0
   b7166:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7168:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b716a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b716c:	f7ff fabe 	bl	b66ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7170:	682e      	ldr	r6, [r5, #0]
   b7172:	1ef3      	subs	r3, r6, #3
   b7174:	2b0d      	cmp	r3, #13
   b7176:	d83c      	bhi.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7178:	e8df f013 	tbh	[pc, r3, lsl #1]
   b717c:	0053000e 	.word	0x0053000e
   b7180:	00d1003b 	.word	0x00d1003b
   b7184:	003b003b 	.word	0x003b003b
   b7188:	003b003b 	.word	0x003b003b
   b718c:	009b003b 	.word	0x009b003b
   b7190:	009b009b 	.word	0x009b009b
   b7194:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7198:	a804      	add	r0, sp, #16
   b719a:	f7ff fc95 	bl	b6ac8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b719e:	9b04      	ldr	r3, [sp, #16]
   b71a0:	89aa      	ldrh	r2, [r5, #12]
   b71a2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b71a4:	6869      	ldr	r1, [r5, #4]
   b71a6:	9804      	ldr	r0, [sp, #16]
   b71a8:	3108      	adds	r1, #8
   b71aa:	3002      	adds	r0, #2
   b71ac:	f7ff fab8 	bl	b6720 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b71b0:	a904      	add	r1, sp, #16
   b71b2:	a806      	add	r0, sp, #24
   b71b4:	f7ff fdf9 	bl	b6daa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b71b8:	a906      	add	r1, sp, #24
   b71ba:	f104 0018 	add.w	r0, r4, #24
   b71be:	f7ff ff73 	bl	b70a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b71c2:	4605      	mov	r5, r0
   b71c4:	a807      	add	r0, sp, #28
   b71c6:	f7fe fdab 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ca:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b71cc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b71ce:	b9b5      	cbnz	r5, b71fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b71d0:	4b5d      	ldr	r3, [pc, #372]	; (b7348 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b71d2:	495e      	ldr	r1, [pc, #376]	; (b734c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b71d4:	9300      	str	r3, [sp, #0]
   b71d6:	2032      	movs	r0, #50	; 0x32
   b71d8:	462b      	mov	r3, r5
   b71da:	aa06      	add	r2, sp, #24
   b71dc:	9507      	str	r5, [sp, #28]
   b71de:	f7fe fcb7 	bl	b5b50 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b71e2:	9b04      	ldr	r3, [sp, #16]
   b71e4:	4629      	mov	r1, r5
   b71e6:	8818      	ldrh	r0, [r3, #0]
   b71e8:	f7fe fbe6 	bl	b59b8 <hal_ble_gap_disconnect>
   b71ec:	a805      	add	r0, sp, #20
   b71ee:	f7fe fd97 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b71f2:	a803      	add	r0, sp, #12
   b71f4:	f7ff fa88 	bl	b6708 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b71f8:	b00e      	add	sp, #56	; 0x38
   b71fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b71fe:	4a54      	ldr	r2, [pc, #336]	; (b7350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7200:	9200      	str	r2, [sp, #0]
   b7202:	2300      	movs	r3, #0
   b7204:	4951      	ldr	r1, [pc, #324]	; (b734c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7206:	9307      	str	r3, [sp, #28]
   b7208:	aa06      	add	r2, sp, #24
   b720a:	2001      	movs	r0, #1
   b720c:	f7fe fca0 	bl	b5b50 <log_message>
                if (impl->connectedCallback_) {
   b7210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7212:	2b00      	cmp	r3, #0
   b7214:	d0ea      	beq.n	b71ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7216:	a904      	add	r1, sp, #16
   b7218:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b721c:	f7ff fe47 	bl	b6eae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7220:	e7e4      	b.n	b71ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7222:	89a9      	ldrh	r1, [r5, #12]
   b7224:	4620      	mov	r0, r4
   b7226:	f7ff fbb9 	bl	b699c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b722a:	4606      	mov	r6, r0
   b722c:	2800      	cmp	r0, #0
   b722e:	d0e0      	beq.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7230:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7232:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7236:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b723a:	8029      	strh	r1, [r5, #0]
   b723c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7240:	429a      	cmp	r2, r3
   b7242:	d003      	beq.n	b724c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7244:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7248:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b724a:	e7f9      	b.n	b7240 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b724c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7250:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7254:	45b8      	cmp	r8, r7
   b7256:	d004      	beq.n	b7262 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7258:	1d38      	adds	r0, r7, #4
   b725a:	f7fe fd61 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b725e:	3708      	adds	r7, #8
   b7260:	e7f8      	b.n	b7254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7262:	2300      	movs	r3, #0
   b7264:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7266:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b726a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b726e:	45b8      	cmp	r8, r7
   b7270:	d004      	beq.n	b727c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7272:	1d38      	adds	r0, r7, #4
   b7274:	f7fe fd54 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7278:	3708      	adds	r7, #8
   b727a:	e7f8      	b.n	b726e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b727c:	2300      	movs	r3, #0
   b727e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7280:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7284:	b123      	cbz	r3, b7290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7286:	4631      	mov	r1, r6
   b7288:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b728c:	f7ff fe0f 	bl	b6eae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7290:	2300      	movs	r3, #0
   b7292:	2220      	movs	r2, #32
   b7294:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7298:	4a2e      	ldr	r2, [pc, #184]	; (b7354 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b729a:	9200      	str	r2, [sp, #0]
   b729c:	492b      	ldr	r1, [pc, #172]	; (b734c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b729e:	aa06      	add	r2, sp, #24
   b72a0:	2001      	movs	r0, #1
   b72a2:	f7fe fc55 	bl	b5b50 <log_message>
                    impl->peers_.removeOne(*peer);
   b72a6:	4631      	mov	r1, r6
   b72a8:	f104 0018 	add.w	r0, r4, #24
   b72ac:	f7ff ff35 	bl	b711a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b72b0:	e79f      	b.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72b2:	89a9      	ldrh	r1, [r5, #12]
   b72b4:	4620      	mov	r0, r4
   b72b6:	f7ff fb71 	bl	b699c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b72ba:	2800      	cmp	r0, #0
   b72bc:	d099      	beq.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b72be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b72c0:	2b00      	cmp	r3, #0
   b72c2:	d096      	beq.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b72c4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72c6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b72c8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72cc:	d001      	beq.n	b72d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b72ce:	2e10      	cmp	r6, #16
   b72d0:	d117      	bne.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b72d2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b72d4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b72d6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b72d8:	2506      	movs	r5, #6
                        };
   b72da:	f88d 3015 	strb.w	r3, [sp, #21]
   b72de:	9104      	str	r1, [sp, #16]
   b72e0:	f88d 2014 	strb.w	r2, [sp, #20]
   b72e4:	9006      	str	r0, [sp, #24]
   b72e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b72ea:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b72ec:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b72f0:	9508      	str	r5, [sp, #32]
   b72f2:	e883 0003 	stmia.w	r3, {r0, r1}
   b72f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b72f8:	a906      	add	r1, sp, #24
   b72fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b72fe:	4798      	blx	r3
   b7300:	e777      	b.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7302:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7304:	bf01      	itttt	eq
   b7306:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7308:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b730a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b730e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7310:	bf0f      	iteee	eq
   b7312:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7316:	461a      	movne	r2, r3
   b7318:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b731a:	461d      	movne	r5, r3
   b731c:	e7dd      	b.n	b72da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b731e:	89a9      	ldrh	r1, [r5, #12]
   b7320:	4620      	mov	r0, r4
   b7322:	f7ff fb3b 	bl	b699c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7326:	4601      	mov	r1, r0
   b7328:	2800      	cmp	r0, #0
   b732a:	f43f af62 	beq.w	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b732e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7330:	2b00      	cmp	r3, #0
   b7332:	f43f af5e 	beq.w	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7336:	686b      	ldr	r3, [r5, #4]
   b7338:	9306      	str	r3, [sp, #24]
   b733a:	aa06      	add	r2, sp, #24
   b733c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b733e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7342:	4798      	blx	r3
   b7344:	e755      	b.n	b71f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7346:	bf00      	nop
   b7348:	000b90b8 	.word	0x000b90b8
   b734c:	000b9037 	.word	0x000b9037
   b7350:	000b90de 	.word	0x000b90de
   b7354:	000b90fb 	.word	0x000b90fb

000b7358 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b7358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b735c:	4607      	mov	r7, r0
   b735e:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   b7360:	4668      	mov	r0, sp
   b7362:	f7ff f9c3 	bl	b66ec <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7366:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b7368:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   b736c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   b7370:	42ac      	cmp	r4, r5
   b7372:	d035      	beq.n	b73e0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   b7374:	2224      	movs	r2, #36	; 0x24
   b7376:	2100      	movs	r1, #0
   b7378:	a801      	add	r0, sp, #4
   b737a:	f000 fee3 	bl	b8144 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b737e:	6823      	ldr	r3, [r4, #0]
   b7380:	2200      	movs	r2, #0
   b7382:	8818      	ldrh	r0, [r3, #0]
   b7384:	a901      	add	r1, sp, #4
   b7386:	f7fe fb49 	bl	b5a1c <hal_ble_gap_get_connection_info>
   b738a:	4606      	mov	r6, r0
   b738c:	b108      	cbz	r0, b7392 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   b738e:	3408      	adds	r4, #8
   b7390:	e7ee      	b.n	b7370 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b7392:	f89d 8008 	ldrb.w	r8, [sp, #8]
   b7396:	f1b8 0f01 	cmp.w	r8, #1
   b739a:	d1f8      	bne.n	b738e <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   b739c:	f8df 9048 	ldr.w	r9, [pc, #72]	; b73e8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   b73a0:	f8d9 0000 	ldr.w	r0, [r9]
   b73a4:	f7fe fae0 	bl	b5968 <os_mutex_recursive_unlock>
        locked_ = false;
   b73a8:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b73ac:	6823      	ldr	r3, [r4, #0]
   b73ae:	4631      	mov	r1, r6
   b73b0:	8818      	ldrh	r0, [r3, #0]
   b73b2:	f7fe fb01 	bl	b59b8 <hal_ble_gap_disconnect>
   b73b6:	1e05      	subs	r5, r0, #0
   b73b8:	db0b      	blt.n	b73d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   b73ba:	f8d9 0000 	ldr.w	r0, [r9]
   b73be:	f7fe facb 	bl	b5958 <os_mutex_recursive_lock>
        return peers_;
   b73c2:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   b73c4:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b73c8:	4621      	mov	r1, r4
   b73ca:	3018      	adds	r0, #24
   b73cc:	f7ff fea5 	bl	b711a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b73d0:	4635      	mov	r5, r6
    WiringBleLock lk;
   b73d2:	4668      	mov	r0, sp
   b73d4:	f7ff f998 	bl	b6708 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b73d8:	4628      	mov	r0, r5
   b73da:	b00b      	add	sp, #44	; 0x2c
   b73dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b73e0:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b73e4:	e7f5      	b.n	b73d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   b73e6:	bf00      	nop
   b73e8:	2003e70c 	.word	0x2003e70c

000b73ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b73ec:	b538      	push	{r3, r4, r5, lr}
   b73ee:	4605      	mov	r5, r0
   b73f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b73f2:	f7fe ff46 	bl	b6282 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b73f8:	68a2      	ldr	r2, [r4, #8]
   b73fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7400:	68e2      	ldr	r2, [r4, #12]
   b7402:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7404:	60e3      	str	r3, [r4, #12]
      }
   b7406:	bd38      	pop	{r3, r4, r5, pc}

000b7408 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7408:	b570      	push	{r4, r5, r6, lr}
   b740a:	4604      	mov	r4, r0
   b740c:	b08c      	sub	sp, #48	; 0x30
   b740e:	460e      	mov	r6, r1
   b7410:	9201      	str	r2, [sp, #4]
   b7412:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7414:	f7ff faa2 	bl	b695c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7418:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b741a:	9901      	ldr	r1, [sp, #4]
   b741c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7420:	f000 fab9 	bl	b7996 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7424:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7428:	b1cd      	cbz	r5, b745e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b742a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b742c:	9502      	str	r5, [sp, #8]
   b742e:	a902      	add	r1, sp, #8
   b7430:	a804      	add	r0, sp, #16
   b7432:	9303      	str	r3, [sp, #12]
   b7434:	f7ff fc82 	bl	b6d3c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7438:	2300      	movs	r3, #0
	__x.swap(*this);
   b743a:	a908      	add	r1, sp, #32
   b743c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b743e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7440:	f7ff ffd4 	bl	b73ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7444:	4631      	mov	r1, r6
   b7446:	a808      	add	r0, sp, #32
   b7448:	f7ff ffd0 	bl	b73ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b744c:	a808      	add	r0, sp, #32
   b744e:	f7fe ff0f 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
   b7452:	a804      	add	r0, sp, #16
   b7454:	f7fe ff0c 	bl	b6270 <_ZNSt14_Function_baseD1Ev>
    }
   b7458:	4620      	mov	r0, r4
   b745a:	b00c      	add	sp, #48	; 0x30
   b745c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b745e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7460:	e7ea      	b.n	b7438 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7464 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7468:	b087      	sub	sp, #28
   b746a:	461d      	mov	r5, r3
   b746c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7470:	4680      	mov	r8, r0
   b7472:	468b      	mov	fp, r1
   b7474:	4692      	mov	sl, r2
   b7476:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7478:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b747a:	2200      	movs	r2, #0
   b747c:	2068      	movs	r0, #104	; 0x68
   b747e:	9102      	str	r1, [sp, #8]
   b7480:	9204      	str	r2, [sp, #16]
   b7482:	f7fc fe06 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7486:	1e06      	subs	r6, r0, #0
   b7488:	f106 090c 	add.w	r9, r6, #12
   b748c:	d018      	beq.n	b74c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b748e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7490:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7492:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7496:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7498:	4a15      	ldr	r2, [pc, #84]	; (b74f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b749a:	f847 2b20 	str.w	r2, [r7], #32
   b749e:	9b03      	ldr	r3, [sp, #12]
   b74a0:	9100      	str	r1, [sp, #0]
   b74a2:	465a      	mov	r2, fp
   b74a4:	4651      	mov	r1, sl
   b74a6:	4648      	mov	r0, r9
   b74a8:	f7ff ffae 	bl	b7408 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b74ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b74b0:	682b      	ldr	r3, [r5, #0]
   b74b2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b74b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b74b6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b74ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b74bc:	6823      	ldr	r3, [r4, #0]
   b74be:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b74c0:	a904      	add	r1, sp, #16
   b74c2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b74c4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b74c8:	f7ff fce0 	bl	b6e8c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b74cc:	a805      	add	r0, sp, #20
   b74ce:	f7fe fc27 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b74d2:	f8d8 3000 	ldr.w	r3, [r8]
   b74d6:	b93b      	cbnz	r3, b74e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b74d8:	4a06      	ldr	r2, [pc, #24]	; (b74f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b74da:	4907      	ldr	r1, [pc, #28]	; (b74f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b74dc:	200a      	movs	r0, #10
}
   b74de:	b007      	add	sp, #28
   b74e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b74e4:	f7fe bb2c 	b.w	b5b40 <panic_>
}
   b74e8:	b007      	add	sp, #28
   b74ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b74ee:	bf00      	nop
   b74f0:	000b9174 	.word	0x000b9174
   b74f4:	000b5a91 	.word	0x000b5a91
   b74f8:	000b9020 	.word	0x000b9020

000b74fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b74fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b74fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7500:	4604      	mov	r4, r0
   b7502:	460d      	mov	r5, r1
   b7504:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7506:	d914      	bls.n	b7532 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7508:	4290      	cmp	r0, r2
   b750a:	d213      	bcs.n	b7534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b750c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7510:	1a75      	subs	r5, r6, r1
   b7512:	f1a1 0708 	sub.w	r7, r1, #8
   b7516:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7518:	42b7      	cmp	r7, r6
   b751a:	d018      	beq.n	b754e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b751c:	b11c      	cbz	r4, b7526 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b751e:	4631      	mov	r1, r6
   b7520:	4620      	mov	r0, r4
   b7522:	f7ff fc38 	bl	b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7526:	1d30      	adds	r0, r6, #4
   b7528:	f7fe fbfa 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b752c:	3e08      	subs	r6, #8
   b752e:	3c08      	subs	r4, #8
   b7530:	e7f2      	b.n	b7518 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7532:	d00c      	beq.n	b754e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7534:	42b5      	cmp	r5, r6
   b7536:	d00a      	beq.n	b754e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7538:	b11c      	cbz	r4, b7542 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b753a:	4629      	mov	r1, r5
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff fc2a 	bl	b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7542:	1d28      	adds	r0, r5, #4
   b7544:	f7fe fbec 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7548:	3508      	adds	r5, #8
   b754a:	3408      	adds	r4, #8
   b754c:	e7f2      	b.n	b7534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b754e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7550 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7550:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7552:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7554:	4605      	mov	r5, r0
        if (n > 0) {
   b7556:	dd11      	ble.n	b757c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7558:	00f0      	lsls	r0, r6, #3
   b755a:	f7fe fb95 	bl	b5c88 <malloc>
            if (!d) {
   b755e:	4604      	mov	r4, r0
   b7560:	b158      	cbz	r0, b757a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7562:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7566:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b756a:	f7ff ffc7 	bl	b74fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b756e:	6828      	ldr	r0, [r5, #0]
   b7570:	f7fe fb92 	bl	b5c98 <free>
        data_ = d;
   b7574:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7576:	60ae      	str	r6, [r5, #8]
        return true;
   b7578:	2001      	movs	r0, #1
    }
   b757a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b757c:	2400      	movs	r4, #0
   b757e:	e7f6      	b.n	b756e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7580 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7580:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7582:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7584:	6845      	ldr	r5, [r0, #4]
   b7586:	4668      	mov	r0, sp
   b7588:	f7ff fc05 	bl	b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b758c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7590:	4299      	cmp	r1, r3
   b7592:	da10      	bge.n	b75b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7594:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7596:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7598:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b759c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b75a0:	4629      	mov	r1, r5
   b75a2:	f105 0008 	add.w	r0, r5, #8
   b75a6:	f7ff ffa9 	bl	b74fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b75aa:	b98d      	cbnz	r5, b75d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b75ac:	6863      	ldr	r3, [r4, #4]
   b75ae:	3301      	adds	r3, #1
   b75b0:	6063      	str	r3, [r4, #4]
    return true;
   b75b2:	2601      	movs	r6, #1
   b75b4:	e006      	b.n	b75c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75b6:	3101      	adds	r1, #1
   b75b8:	4620      	mov	r0, r4
   b75ba:	f7ff ffc9 	bl	b7550 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b75be:	4606      	mov	r6, r0
   b75c0:	2800      	cmp	r0, #0
   b75c2:	d1e7      	bne.n	b7594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b75c4:	a801      	add	r0, sp, #4
   b75c6:	f7fe fbab 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b75ca:	4630      	mov	r0, r6
   b75cc:	b002      	add	sp, #8
   b75ce:	bd70      	pop	{r4, r5, r6, pc}
   b75d0:	4669      	mov	r1, sp
   b75d2:	4628      	mov	r0, r5
   b75d4:	f7ff fbdf 	bl	b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b75d8:	e7e8      	b.n	b75ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b75da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b75da:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75de:	4604      	mov	r4, r0
   b75e0:	460d      	mov	r5, r1
   b75e2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75e4:	d914      	bls.n	b7610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b75e6:	4290      	cmp	r0, r2
   b75e8:	d213      	bcs.n	b7612 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b75ea:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b75ee:	1a75      	subs	r5, r6, r1
   b75f0:	f1a1 0708 	sub.w	r7, r1, #8
   b75f4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b75f6:	42b7      	cmp	r7, r6
   b75f8:	d018      	beq.n	b762c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b75fa:	b11c      	cbz	r4, b7604 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b75fc:	4631      	mov	r1, r6
   b75fe:	4620      	mov	r0, r4
   b7600:	f7ff fbbb 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7604:	1d30      	adds	r0, r6, #4
   b7606:	f7fe fb8b 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b760a:	3e08      	subs	r6, #8
   b760c:	3c08      	subs	r4, #8
   b760e:	e7f2      	b.n	b75f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7610:	d00c      	beq.n	b762c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7612:	42b5      	cmp	r5, r6
   b7614:	d00a      	beq.n	b762c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7616:	b11c      	cbz	r4, b7620 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7618:	4629      	mov	r1, r5
   b761a:	4620      	mov	r0, r4
   b761c:	f7ff fbad 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7620:	1d28      	adds	r0, r5, #4
   b7622:	f7fe fb7d 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7626:	3508      	adds	r5, #8
   b7628:	3408      	adds	r4, #8
   b762a:	e7f2      	b.n	b7612 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b762c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b762e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b762e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7630:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7632:	4605      	mov	r5, r0
        if (n > 0) {
   b7634:	dd11      	ble.n	b765a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7636:	00f0      	lsls	r0, r6, #3
   b7638:	f7fe fb26 	bl	b5c88 <malloc>
            if (!d) {
   b763c:	4604      	mov	r4, r0
   b763e:	b158      	cbz	r0, b7658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7640:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7644:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7648:	f7ff ffc7 	bl	b75da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b764c:	6828      	ldr	r0, [r5, #0]
   b764e:	f7fe fb23 	bl	b5c98 <free>
        data_ = d;
   b7652:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7654:	60ae      	str	r6, [r5, #8]
        return true;
   b7656:	2001      	movs	r0, #1
    }
   b7658:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b765a:	2400      	movs	r4, #0
   b765c:	e7f6      	b.n	b764c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b765e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b765e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7660:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7662:	6845      	ldr	r5, [r0, #4]
   b7664:	4668      	mov	r0, sp
   b7666:	f7ff fb88 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b766a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b766e:	4299      	cmp	r1, r3
   b7670:	da10      	bge.n	b7694 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7672:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7674:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7676:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b767a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b767e:	4629      	mov	r1, r5
   b7680:	f105 0008 	add.w	r0, r5, #8
   b7684:	f7ff ffa9 	bl	b75da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7688:	b98d      	cbnz	r5, b76ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b768a:	6863      	ldr	r3, [r4, #4]
   b768c:	3301      	adds	r3, #1
   b768e:	6063      	str	r3, [r4, #4]
    return true;
   b7690:	2601      	movs	r6, #1
   b7692:	e006      	b.n	b76a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7694:	3101      	adds	r1, #1
   b7696:	4620      	mov	r0, r4
   b7698:	f7ff ffc9 	bl	b762e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b769c:	4606      	mov	r6, r0
   b769e:	2800      	cmp	r0, #0
   b76a0:	d1e7      	bne.n	b7672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b76a2:	a801      	add	r0, sp, #4
   b76a4:	f7fe fb3c 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76a8:	4630      	mov	r0, r6
   b76aa:	b002      	add	sp, #8
   b76ac:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b76ae:	4669      	mov	r1, sp
   b76b0:	4628      	mov	r0, r5
   b76b2:	f7ff fb62 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76b6:	e7e8      	b.n	b768a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76bc:	4617      	mov	r7, r2
   b76be:	b0a1      	sub	sp, #132	; 0x84
   b76c0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b76c2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76c4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b76c6:	f7ff f811 	bl	b66ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b76ca:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b76cc:	7923      	ldrb	r3, [r4, #4]
   b76ce:	b953      	cbnz	r3, b76e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b76d0:	4639      	mov	r1, r7
   b76d2:	4640      	mov	r0, r8
   b76d4:	f7ff fb51 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b76d8:	a80a      	add	r0, sp, #40	; 0x28
   b76da:	f7ff f815 	bl	b6708 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b76de:	4640      	mov	r0, r8
   b76e0:	b021      	add	sp, #132	; 0x84
   b76e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b76e6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b76e8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b76ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b76f0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b76f2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b76f6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b76fa:	9b03      	ldr	r3, [sp, #12]
   b76fc:	429d      	cmp	r5, r3
   b76fe:	d021      	beq.n	b7744 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7700:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7704:	4658      	mov	r0, fp
   b7706:	f109 0114 	add.w	r1, r9, #20
   b770a:	f7ff f89c 	bl	b6846 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b770e:	b1b8      	cbz	r0, b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7710:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7714:	4650      	mov	r0, sl
   b7716:	f7ff f896 	bl	b6846 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b771a:	b188      	cbz	r0, b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b771c:	6823      	ldr	r3, [r4, #0]
   b771e:	f8d9 2000 	ldr.w	r2, [r9]
   b7722:	4053      	eors	r3, r2
   b7724:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7728:	d10a      	bne.n	b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b772a:	2220      	movs	r2, #32
   b772c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7730:	4a5e      	ldr	r2, [pc, #376]	; (b78ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7732:	9200      	str	r2, [sp, #0]
   b7734:	aa15      	add	r2, sp, #84	; 0x54
   b7736:	495e      	ldr	r1, [pc, #376]	; (b78b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7738:	2032      	movs	r0, #50	; 0x32
   b773a:	f7fe fa09 	bl	b5b50 <log_message>
   b773e:	e7c7      	b.n	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7740:	3508      	adds	r5, #8
   b7742:	e7da      	b.n	b76fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7744:	4650      	mov	r0, sl
   b7746:	f7ff f84f 	bl	b67e8 <_ZNK8particle7BleUuid7isValidEv>
   b774a:	b960      	cbnz	r0, b7766 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b774c:	4959      	ldr	r1, [pc, #356]	; (b78b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b774e:	2201      	movs	r2, #1
   b7750:	a815      	add	r0, sp, #84	; 0x54
   b7752:	ad15      	add	r5, sp, #84	; 0x54
   b7754:	f7ff f820 	bl	b6798 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b775a:	46d4      	mov	ip, sl
   b775c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7760:	682b      	ldr	r3, [r5, #0]
   b7762:	f8cc 3000 	str.w	r3, [ip]
   b7766:	6833      	ldr	r3, [r6, #0]
   b7768:	e9d3 5300 	ldrd	r5, r3, [r3]
   b776c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7770:	455d      	cmp	r5, fp
   b7772:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7774:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7776:	d06e      	beq.n	b7856 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7778:	f855 0b08 	ldr.w	r0, [r5], #8
   b777c:	f7ff f863 	bl	b6846 <_ZNK8particle7BleUuideqERKS0_>
   b7780:	2800      	cmp	r0, #0
   b7782:	d0f5      	beq.n	b7770 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7784:	f104 0a14 	add.w	sl, r4, #20
   b7788:	4650      	mov	r0, sl
   b778a:	f7ff f82d 	bl	b67e8 <_ZNK8particle7BleUuid7isValidEv>
   b778e:	b988      	cbnz	r0, b77b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7790:	4b49      	ldr	r3, [pc, #292]	; (b78b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7792:	4948      	ldr	r1, [pc, #288]	; (b78b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7794:	881a      	ldrh	r2, [r3, #0]
   b7796:	3201      	adds	r2, #1
   b7798:	b292      	uxth	r2, r2
   b779a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b779c:	a815      	add	r0, sp, #84	; 0x54
   b779e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b77a0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77a2:	f7ff f818 	bl	b67d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b77a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77a8:	46d4      	mov	ip, sl
   b77aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b77ae:	682b      	ldr	r3, [r5, #0]
   b77b0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b77b4:	4b41      	ldr	r3, [pc, #260]	; (b78bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b77b6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b77b8:	2228      	movs	r2, #40	; 0x28
   b77ba:	2100      	movs	r1, #0
   b77bc:	a816      	add	r0, sp, #88	; 0x58
   b77be:	f000 fcc1 	bl	b8144 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b77c2:	4651      	mov	r1, sl
   b77c4:	a804      	add	r0, sp, #16
   b77c6:	f7ff f821 	bl	b680c <_ZN8particle7BleUuid7halUUIDEv>
   b77ca:	ab04      	add	r3, sp, #16
   b77cc:	aa18      	add	r2, sp, #96	; 0x60
   b77ce:	f10d 0c20 	add.w	ip, sp, #32
   b77d2:	6818      	ldr	r0, [r3, #0]
   b77d4:	6859      	ldr	r1, [r3, #4]
   b77d6:	4615      	mov	r5, r2
   b77d8:	c503      	stmia	r5!, {r0, r1}
   b77da:	3308      	adds	r3, #8
   b77dc:	4563      	cmp	r3, ip
   b77de:	462a      	mov	r2, r5
   b77e0:	d1f7      	bne.n	b77d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b77e2:	6818      	ldr	r0, [r3, #0]
   b77e4:	6028      	str	r0, [r5, #0]
    return value_;
   b77e6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b77e8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b77ec:	f8d9 3000 	ldr.w	r3, [r9]
   b77f0:	8a9b      	ldrh	r3, [r3, #20]
   b77f2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b77f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b77f8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b77fa:	4b31      	ldr	r3, [pc, #196]	; (b78c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b77fc:	2200      	movs	r2, #0
   b77fe:	1da1      	adds	r1, r4, #6
   b7800:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7802:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7806:	f7fe f913 	bl	b5a30 <hal_ble_gatt_server_add_characteristic>
   b780a:	2800      	cmp	r0, #0
   b780c:	f47f af60 	bne.w	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7810:	2301      	movs	r3, #1
   b7812:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7814:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7816:	4639      	mov	r1, r7
        return characteristics_;
   b7818:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b781a:	a80d      	add	r0, sp, #52	; 0x34
   b781c:	f7ff faad 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7820:	4620      	mov	r0, r4
   b7822:	a90d      	add	r1, sp, #52	; 0x34
   b7824:	f7ff ff1b 	bl	b765e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7828:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b782a:	a80e      	add	r0, sp, #56	; 0x38
   b782c:	f7fe fa78 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7830:	2c00      	cmp	r4, #0
   b7832:	f47f af4d 	bne.w	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7836:	2320      	movs	r3, #32
   b7838:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b783c:	4b21      	ldr	r3, [pc, #132]	; (b78c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b783e:	9300      	str	r3, [sp, #0]
   b7840:	aa0d      	add	r2, sp, #52	; 0x34
   b7842:	4623      	mov	r3, r4
   b7844:	e777      	b.n	b7736 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7846:	4639      	mov	r1, r7
   b7848:	4640      	mov	r0, r8
   b784a:	f7ff fa96 	bl	b6d7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b784e:	a80c      	add	r0, sp, #48	; 0x30
   b7850:	f7fe fa66 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7854:	e740      	b.n	b76d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7856:	a80b      	add	r0, sp, #44	; 0x2c
   b7858:	f7ff f912 	bl	b6a80 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b785c:	4651      	mov	r1, sl
   b785e:	a815      	add	r0, sp, #84	; 0x54
   b7860:	f7fe ffd4 	bl	b680c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7866:	2300      	movs	r3, #0
   b7868:	3214      	adds	r2, #20
   b786a:	a915      	add	r1, sp, #84	; 0x54
   b786c:	2001      	movs	r0, #1
   b786e:	f7fe f8ad 	bl	b59cc <hal_ble_gatt_server_add_service>
   b7872:	2800      	cmp	r0, #0
   b7874:	d1e7      	bne.n	b7846 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7876:	6835      	ldr	r5, [r6, #0]
   b7878:	a90b      	add	r1, sp, #44	; 0x2c
   b787a:	a80d      	add	r0, sp, #52	; 0x34
   b787c:	f7ff fa8b 	bl	b6d96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7880:	4628      	mov	r0, r5
   b7882:	a90d      	add	r1, sp, #52	; 0x34
   b7884:	f7ff fe7c 	bl	b7580 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7888:	4605      	mov	r5, r0
   b788a:	a80e      	add	r0, sp, #56	; 0x38
   b788c:	f7fe fa48 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7890:	2d00      	cmp	r5, #0
   b7892:	d0d8      	beq.n	b7846 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7894:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7896:	6853      	ldr	r3, [r2, #4]
   b7898:	6812      	ldr	r2, [r2, #0]
   b789a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b789e:	3b01      	subs	r3, #1
   b78a0:	a80c      	add	r0, sp, #48	; 0x30
   b78a2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b78a6:	f7fe fa3b 	bl	b5d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78aa:	e76b      	b.n	b7784 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b78ac:	000b911a 	.word	0x000b911a
   b78b0:	000b9037 	.word	0x000b9037
   b78b4:	000b91d6 	.word	0x000b91d6
   b78b8:	2003e708 	.word	0x2003e708
   b78bc:	002c0003 	.word	0x002c0003
   b78c0:	000b6c19 	.word	0x000b6c19
   b78c4:	000b9145 	.word	0x000b9145

000b78c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b78c8:	4802      	ldr	r0, [pc, #8]	; (b78d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b78ca:	2300      	movs	r3, #0
   b78cc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b78ce:	f7fe b83b 	b.w	b5948 <os_mutex_recursive_create>
   b78d2:	bf00      	nop
   b78d4:	2003e70c 	.word	0x2003e70c

000b78d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b78d8:	b510      	push	{r4, lr}
   b78da:	4604      	mov	r4, r0
{
	free(buffer);
   b78dc:	6800      	ldr	r0, [r0, #0]
   b78de:	f7fe f9db 	bl	b5c98 <free>
}
   b78e2:	4620      	mov	r0, r4
   b78e4:	bd10      	pop	{r4, pc}

000b78e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b78e6:	b510      	push	{r4, lr}
   b78e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b78ea:	6800      	ldr	r0, [r0, #0]
   b78ec:	b108      	cbz	r0, b78f2 <_ZN6String10invalidateEv+0xc>
   b78ee:	f7fe f9d3 	bl	b5c98 <free>
	buffer = NULL;
   b78f2:	2300      	movs	r3, #0
	capacity = len = 0;
   b78f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78f8:	6023      	str	r3, [r4, #0]
}
   b78fa:	bd10      	pop	{r4, pc}

000b78fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78fc:	b538      	push	{r3, r4, r5, lr}
   b78fe:	4604      	mov	r4, r0
   b7900:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7902:	6800      	ldr	r0, [r0, #0]
   b7904:	3101      	adds	r1, #1
   b7906:	f7fe f9cf 	bl	b5ca8 <realloc>
	if (newbuffer) {
   b790a:	b110      	cbz	r0, b7912 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b790c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7910:	2001      	movs	r0, #1
	}
	return 0;
}
   b7912:	bd38      	pop	{r3, r4, r5, pc}

000b7914 <_ZN6String7reserveEj>:
{
   b7914:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7916:	6803      	ldr	r3, [r0, #0]
{
   b7918:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b791a:	b123      	cbz	r3, b7926 <_ZN6String7reserveEj+0x12>
   b791c:	6843      	ldr	r3, [r0, #4]
   b791e:	428b      	cmp	r3, r1
   b7920:	d301      	bcc.n	b7926 <_ZN6String7reserveEj+0x12>
   b7922:	2001      	movs	r0, #1
}
   b7924:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7926:	4620      	mov	r0, r4
   b7928:	f7ff ffe8 	bl	b78fc <_ZN6String12changeBufferEj>
   b792c:	2800      	cmp	r0, #0
   b792e:	d0f9      	beq.n	b7924 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7930:	68a3      	ldr	r3, [r4, #8]
   b7932:	2b00      	cmp	r3, #0
   b7934:	d1f5      	bne.n	b7922 <_ZN6String7reserveEj+0xe>
   b7936:	6822      	ldr	r2, [r4, #0]
   b7938:	7013      	strb	r3, [r2, #0]
   b793a:	e7f2      	b.n	b7922 <_ZN6String7reserveEj+0xe>

000b793c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b793c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b793e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7940:	4611      	mov	r1, r2
   b7942:	9201      	str	r2, [sp, #4]
{
   b7944:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7946:	f7ff ffe5 	bl	b7914 <_ZN6String7reserveEj>
   b794a:	9a01      	ldr	r2, [sp, #4]
   b794c:	b928      	cbnz	r0, b795a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b794e:	4620      	mov	r0, r4
   b7950:	f7ff ffc9 	bl	b78e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7954:	4620      	mov	r0, r4
   b7956:	b003      	add	sp, #12
   b7958:	bd30      	pop	{r4, r5, pc}
	len = length;
   b795a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b795c:	4629      	mov	r1, r5
   b795e:	6820      	ldr	r0, [r4, #0]
   b7960:	f000 fbc8 	bl	b80f4 <memcpy>
	buffer[len] = 0;
   b7964:	6822      	ldr	r2, [r4, #0]
   b7966:	68a3      	ldr	r3, [r4, #8]
   b7968:	2100      	movs	r1, #0
   b796a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b796c:	e7f2      	b.n	b7954 <_ZN6String4copyEPKcj+0x18>

000b796e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b796e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7970:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7972:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7976:	4604      	mov	r4, r0
	len = 0;
   b7978:	6083      	str	r3, [r0, #8]
	flags = 0;
   b797a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b797c:	b141      	cbz	r1, b7990 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b797e:	4608      	mov	r0, r1
   b7980:	9101      	str	r1, [sp, #4]
   b7982:	f000 fc1f 	bl	b81c4 <strlen>
   b7986:	9901      	ldr	r1, [sp, #4]
   b7988:	4602      	mov	r2, r0
   b798a:	4620      	mov	r0, r4
   b798c:	f7ff ffd6 	bl	b793c <_ZN6String4copyEPKcj>
}
   b7990:	4620      	mov	r0, r4
   b7992:	b002      	add	sp, #8
   b7994:	bd10      	pop	{r4, pc}

000b7996 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7996:	b513      	push	{r0, r1, r4, lr}
   b7998:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b799a:	b159      	cbz	r1, b79b4 <_ZN6StringaSEPKc+0x1e>
   b799c:	4608      	mov	r0, r1
   b799e:	9101      	str	r1, [sp, #4]
   b79a0:	f000 fc10 	bl	b81c4 <strlen>
   b79a4:	9901      	ldr	r1, [sp, #4]
   b79a6:	4602      	mov	r2, r0
   b79a8:	4620      	mov	r0, r4
   b79aa:	f7ff ffc7 	bl	b793c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b79ae:	4620      	mov	r0, r4
   b79b0:	b002      	add	sp, #8
   b79b2:	bd10      	pop	{r4, pc}
	else invalidate();
   b79b4:	f7ff ff97 	bl	b78e6 <_ZN6String10invalidateEv>
   b79b8:	e7f9      	b.n	b79ae <_ZN6StringaSEPKc+0x18>

000b79ba <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b79ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b79bc:	4604      	mov	r4, r0
	buffer = NULL;
   b79be:	2300      	movs	r3, #0
	capacity = 0;
   b79c0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b79c4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b79c6:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b79c8:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b79ca:	a901      	add	r1, sp, #4
   b79cc:	f000 f867 	bl	b7a9e <utoa>
	*this = buf;
   b79d0:	a901      	add	r1, sp, #4
   b79d2:	4620      	mov	r0, r4
   b79d4:	f7ff ffdf 	bl	b7996 <_ZN6StringaSEPKc>
}
   b79d8:	4620      	mov	r0, r4
   b79da:	b004      	add	sp, #16
   b79dc:	bd10      	pop	{r4, pc}

000b79de <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b79de:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b79e0:	6882      	ldr	r2, [r0, #8]
   b79e2:	b93a      	cbnz	r2, b79f4 <_ZNK6String6equalsEPKc+0x16>
   b79e4:	b121      	cbz	r1, b79f0 <_ZNK6String6equalsEPKc+0x12>
   b79e6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b79e8:	fab0 f080 	clz	r0, r0
   b79ec:	0940      	lsrs	r0, r0, #5
   b79ee:	e000      	b.n	b79f2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b79f0:	2001      	movs	r0, #1
}
   b79f2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b79f4:	6800      	ldr	r0, [r0, #0]
   b79f6:	b909      	cbnz	r1, b79fc <_ZNK6String6equalsEPKc+0x1e>
   b79f8:	7800      	ldrb	r0, [r0, #0]
   b79fa:	e7f5      	b.n	b79e8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b79fc:	f000 fbd8 	bl	b81b0 <strcmp>
   b7a00:	e7f2      	b.n	b79e8 <_ZNK6String6equalsEPKc+0xa>

000b7a02 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b7a02:	b558      	push	{r3, r4, r6, lr}
   b7a04:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b7a06:	b12a      	cbz	r2, b7a14 <_ZNK6String8getBytesEPhjj+0x12>
   b7a08:	b121      	cbz	r1, b7a14 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b7a0a:	6884      	ldr	r4, [r0, #8]
   b7a0c:	42a3      	cmp	r3, r4
   b7a0e:	d302      	bcc.n	b7a16 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b7a10:	2300      	movs	r3, #0
   b7a12:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b7a14:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b7a16:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b7a18:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b7a1a:	6801      	ldr	r1, [r0, #0]
   b7a1c:	4294      	cmp	r4, r2
   b7a1e:	bf28      	it	cs
   b7a20:	4614      	movcs	r4, r2
   b7a22:	4419      	add	r1, r3
   b7a24:	4622      	mov	r2, r4
   b7a26:	4630      	mov	r0, r6
   b7a28:	f000 fbd4 	bl	b81d4 <strncpy>
	buf[n] = 0;
   b7a2c:	2300      	movs	r3, #0
   b7a2e:	5533      	strb	r3, [r6, r4]
   b7a30:	e7f0      	b.n	b7a14 <_ZNK6String8getBytesEPhjj+0x12>

000b7a32 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7a32:	b510      	push	{r4, lr}
   b7a34:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7a36:	f000 fbc5 	bl	b81c4 <strlen>
   b7a3a:	3801      	subs	r0, #1
   b7a3c:	1823      	adds	r3, r4, r0
   b7a3e:	4620      	mov	r0, r4
	while(i<j){
   b7a40:	4283      	cmp	r3, r0
   b7a42:	d906      	bls.n	b7a52 <_Z11str_reversePc+0x20>
		c = *i;
   b7a44:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7a46:	7819      	ldrb	r1, [r3, #0]
   b7a48:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7a4c:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7a50:	e7f6      	b.n	b7a40 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7a52:	bd10      	pop	{r4, pc}

000b7a54 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7a54:	b570      	push	{r4, r5, r6, lr}
   b7a56:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7a58:	1e91      	subs	r1, r2, #2
   b7a5a:	2922      	cmp	r1, #34	; 0x22
   b7a5c:	d81d      	bhi.n	b7a9a <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7a5e:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7a60:	b930      	cbnz	r0, b7a70 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7a62:	4423      	add	r3, r4
            *ptr++ = '0';
   b7a64:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7a66:	429d      	cmp	r5, r3
   b7a68:	d210      	bcs.n	b7a8c <ultoa+0x38>
            *ptr++ = '0';
   b7a6a:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7a6e:	e7fa      	b.n	b7a66 <ultoa+0x12>
            result.quot = a/radix;
   b7a70:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7a74:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7a78:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7a7a:	2809      	cmp	r0, #9
                *ptr += '0';
   b7a7c:	bf94      	ite	ls
   b7a7e:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7a80:	3157      	addhi	r1, #87	; 0x57
   b7a82:	b2c9      	uxtb	r1, r1
   b7a84:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7a88:	4630      	mov	r0, r6
	while(a){
   b7a8a:	e7e9      	b.n	b7a60 <ultoa+0xc>

	*ptr = '\0';
   b7a8c:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7a8e:	4620      	mov	r0, r4
	*ptr = '\0';
   b7a90:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7a92:	f7ff ffce 	bl	b7a32 <_Z11str_reversePc>
	return buffer;
   b7a96:	4620      	mov	r0, r4
}
   b7a98:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7a9a:	2000      	movs	r0, #0
   b7a9c:	e7fc      	b.n	b7a98 <ultoa+0x44>

000b7a9e <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7a9e:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7aa0:	2301      	movs	r3, #1
   b7aa2:	f7ff ffd7 	bl	b7a54 <ultoa>
}
   b7aa6:	bd08      	pop	{r3, pc}

000b7aa8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7aa8:	4b05      	ldr	r3, [pc, #20]	; (b7ac0 <_GLOBAL__sub_I_System+0x18>)
   b7aaa:	2202      	movs	r2, #2
   b7aac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7aae:	4b05      	ldr	r3, [pc, #20]	; (b7ac4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7ab0:	4a05      	ldr	r2, [pc, #20]	; (b7ac8 <_GLOBAL__sub_I_System+0x20>)
   b7ab2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7ab4:	2000      	movs	r0, #0
   b7ab6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7aba:	f7fe b8b9 	b.w	b5c30 <set_system_mode>
   b7abe:	bf00      	nop
   b7ac0:	2003e720 	.word	0x2003e720
   b7ac4:	2003e714 	.word	0x2003e714
   b7ac8:	ffff0000 	.word	0xffff0000

000b7acc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7acc:	2100      	movs	r1, #0
   b7ace:	f7fd bedb 	b.w	b5888 <hal_spi_release>

000b7ad2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7ad2:	2100      	movs	r1, #0
   b7ad4:	f7fd bed0 	b.w	b5878 <hal_spi_acquire>

000b7ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7ad8:	b510      	push	{r4, lr}
   b7ada:	4604      	mov	r4, r0
   b7adc:	4608      	mov	r0, r1
{
    _spi = spi;
   b7ade:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7ae0:	f7fd feaa 	bl	b5838 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7ae4:	2300      	movs	r3, #0
   b7ae6:	6063      	str	r3, [r4, #4]
}
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bd10      	pop	{r4, pc}

000b7aec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7aec:	b513      	push	{r0, r1, r4, lr}
   b7aee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7af0:	7800      	ldrb	r0, [r0, #0]
   b7af2:	f7ff ffee 	bl	b7ad2 <_ZN8SPIClass4lockEv.isra.0>
   b7af6:	b958      	cbnz	r0, b7b10 <_ZN8SPIClass5beginEv+0x24>
   b7af8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7afa:	9001      	str	r0, [sp, #4]
   b7afc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7b00:	f7fd fe8a 	bl	b5818 <hal_spi_begin>
        unlock();
   b7b04:	9801      	ldr	r0, [sp, #4]
    }
}
   b7b06:	b002      	add	sp, #8
   b7b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7b0c:	f7ff bfde 	b.w	b7acc <_ZN8SPIClass6unlockEv.isra.0>
   b7b10:	b002      	add	sp, #8
   b7b12:	bd10      	pop	{r4, pc}

000b7b14 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7b14:	7800      	ldrb	r0, [r0, #0]
   b7b16:	f7ff bfd9 	b.w	b7acc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7b1c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7b1c:	0840      	lsrs	r0, r0, #1
{
   b7b1e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7b20:	6018      	str	r0, [r3, #0]
   b7b22:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7b24:	6818      	ldr	r0, [r3, #0]
   b7b26:	4288      	cmp	r0, r1
   b7b28:	b2e5      	uxtb	r5, r4
   b7b2a:	d906      	bls.n	b7b3a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7b2c:	3401      	adds	r4, #1
   b7b2e:	2c08      	cmp	r4, #8
   b7b30:	d002      	beq.n	b7b38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7b32:	0840      	lsrs	r0, r0, #1
   b7b34:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7b36:	e7f5      	b.n	b7b24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7b38:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7b3a:	4b02      	ldr	r3, [pc, #8]	; (b7b44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7b3c:	5d5b      	ldrb	r3, [r3, r5]
   b7b3e:	7013      	strb	r3, [r2, #0]
}
   b7b40:	bd30      	pop	{r4, r5, pc}
   b7b42:	bf00      	nop
   b7b44:	000b91f6 	.word	0x000b91f6

000b7b48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7b4c:	4606      	mov	r6, r0
   b7b4e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7b50:	7800      	ldrb	r0, [r0, #0]
{
   b7b52:	460c      	mov	r4, r1
    CHECK(lock());
   b7b54:	f7ff ffbd 	bl	b7ad2 <_ZN8SPIClass4lockEv.isra.0>
   b7b58:	2800      	cmp	r0, #0
   b7b5a:	db1b      	blt.n	b7b94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7b5c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7b5e:	2214      	movs	r2, #20
   b7b60:	2100      	movs	r1, #0
   b7b62:	a809      	add	r0, sp, #36	; 0x24
   b7b64:	f000 faee 	bl	b8144 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7b68:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7b6a:	2200      	movs	r2, #0
   b7b6c:	a909      	add	r1, sp, #36	; 0x24
   b7b6e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7b70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7b74:	f7fd fe70 	bl	b5858 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7b78:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7b7c:	b113      	cbz	r3, b7b84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7b7e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7b82:	b155      	cbz	r5, b7b9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7b84:	2700      	movs	r7, #0
   b7b86:	46b9      	mov	r9, r7
   b7b88:	46b8      	mov	r8, r7
   b7b8a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7b8c:	7923      	ldrb	r3, [r4, #4]
   b7b8e:	b15d      	cbz	r5, b7ba8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7b90:	b1c3      	cbz	r3, b7bc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7b92:	2000      	movs	r0, #0
}
   b7b94:	b00f      	add	sp, #60	; 0x3c
   b7b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7b9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7b9e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7ba2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7ba6:	e7f1      	b.n	b7b8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7ba8:	2b00      	cmp	r3, #0
   b7baa:	d135      	bne.n	b7c18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7bac:	68a3      	ldr	r3, [r4, #8]
   b7bae:	4543      	cmp	r3, r8
   b7bb0:	d108      	bne.n	b7bc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7bb2:	f88d 9020 	strb.w	r9, [sp, #32]
   b7bb6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7bba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7bbe:	89a3      	ldrh	r3, [r4, #12]
   b7bc0:	429a      	cmp	r2, r3
   b7bc2:	d0e6      	beq.n	b7b92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7bc4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7bc6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7bc8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7bcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7bce:	ab04      	add	r3, sp, #16
   b7bd0:	f10d 020f 	add.w	r2, sp, #15
   b7bd4:	f7ff ffa2 	bl	b7b1c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7bd8:	7921      	ldrb	r1, [r4, #4]
   b7bda:	b985      	cbnz	r5, b7bfe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7bdc:	b989      	cbnz	r1, b7c02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7bde:	68a3      	ldr	r3, [r4, #8]
   b7be0:	4543      	cmp	r3, r8
   b7be2:	d30e      	bcc.n	b7c02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7be4:	f88d 9020 	strb.w	r9, [sp, #32]
   b7be8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7bec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7bf0:	89a3      	ldrh	r3, [r4, #12]
   b7bf2:	429a      	cmp	r2, r3
   b7bf4:	d105      	bne.n	b7c02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7bf6:	9b04      	ldr	r3, [sp, #16]
   b7bf8:	4543      	cmp	r3, r8
   b7bfa:	d102      	bne.n	b7c02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7bfc:	e7c9      	b.n	b7b92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7bfe:	2900      	cmp	r1, #0
   b7c00:	d1f9      	bne.n	b7bf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7c02:	2300      	movs	r3, #0
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	7b63      	ldrb	r3, [r4, #13]
   b7c08:	9300      	str	r3, [sp, #0]
   b7c0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7c0e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7c10:	7830      	ldrb	r0, [r6, #0]
   b7c12:	f7fd fe29 	bl	b5868 <hal_spi_set_settings>
   b7c16:	e7bc      	b.n	b7b92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7c18:	e9cd 5500 	strd	r5, r5, [sp]
   b7c1c:	462b      	mov	r3, r5
   b7c1e:	462a      	mov	r2, r5
   b7c20:	2101      	movs	r1, #1
   b7c22:	e7f5      	b.n	b7c10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7c24 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7c24:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7c26:	7800      	ldrb	r0, [r0, #0]
   b7c28:	f7fd fdfe 	bl	b5828 <hal_spi_transfer>
}
   b7c2c:	b2c0      	uxtb	r0, r0
   b7c2e:	bd08      	pop	{r3, pc}

000b7c30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c30:	2200      	movs	r2, #0
   b7c32:	6840      	ldr	r0, [r0, #4]
   b7c34:	4611      	mov	r1, r2
   b7c36:	f7fd bfd3 	b.w	b5be0 <network_listening>

000b7c3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c3a:	2200      	movs	r2, #0
   b7c3c:	6840      	ldr	r0, [r0, #4]
   b7c3e:	4611      	mov	r1, r2
   b7c40:	f7fd bfde 	b.w	b5c00 <network_get_listen_timeout>

000b7c44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c44:	6840      	ldr	r0, [r0, #4]
   b7c46:	2200      	movs	r2, #0
   b7c48:	f7fd bfd2 	b.w	b5bf0 <network_set_listen_timeout>

000b7c4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c4c:	6840      	ldr	r0, [r0, #4]
   b7c4e:	2200      	movs	r2, #0
   b7c50:	f081 0101 	eor.w	r1, r1, #1
   b7c54:	f7fd bfbc 	b.w	b5bd0 <network_listen>

000b7c58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c58:	2300      	movs	r3, #0
   b7c5a:	6840      	ldr	r0, [r0, #4]
   b7c5c:	461a      	mov	r2, r3
   b7c5e:	4619      	mov	r1, r3
   b7c60:	f7fd bfae 	b.w	b5bc0 <network_off>

000b7c64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c64:	2300      	movs	r3, #0
   b7c66:	6840      	ldr	r0, [r0, #4]
   b7c68:	461a      	mov	r2, r3
   b7c6a:	4619      	mov	r1, r3
   b7c6c:	f7fd bfa0 	b.w	b5bb0 <network_on>

000b7c70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7c70:	2200      	movs	r2, #0
   b7c72:	6840      	ldr	r0, [r0, #4]
   b7c74:	4611      	mov	r1, r2
   b7c76:	f7fd bf93 	b.w	b5ba0 <network_ready>

000b7c7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c7a:	2200      	movs	r2, #0
   b7c7c:	6840      	ldr	r0, [r0, #4]
   b7c7e:	4611      	mov	r1, r2
   b7c80:	f7fd bf7e 	b.w	b5b80 <network_connecting>

000b7c84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c84:	6840      	ldr	r0, [r0, #4]
   b7c86:	2200      	movs	r2, #0
   b7c88:	2102      	movs	r1, #2
   b7c8a:	f7fd bf81 	b.w	b5b90 <network_disconnect>

000b7c8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c8e:	2300      	movs	r3, #0
   b7c90:	6840      	ldr	r0, [r0, #4]
   b7c92:	461a      	mov	r2, r3
   b7c94:	f7fd bf6c 	b.w	b5b70 <network_connect>

000b7c98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7c98:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7c9a:	2203      	movs	r2, #3
   b7c9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7c9e:	4a02      	ldr	r2, [pc, #8]	; (b7ca8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7ca0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7ca2:	4770      	bx	lr
   b7ca4:	2003e724 	.word	0x2003e724
   b7ca8:	000b9208 	.word	0x000b9208

000b7cac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7cac:	4770      	bx	lr
	...

000b7cb0 <_Z17acquireWireBufferv>:
{
   b7cb0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7cb2:	2520      	movs	r5, #32
   b7cb4:	2314      	movs	r3, #20
{
   b7cb6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7cb8:	6003      	str	r3, [r0, #0]
   b7cba:	6085      	str	r5, [r0, #8]
   b7cbc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7cbe:	4906      	ldr	r1, [pc, #24]	; (b7cd8 <_Z17acquireWireBufferv+0x28>)
   b7cc0:	4628      	mov	r0, r5
   b7cc2:	f000 f8ea 	bl	b7e9a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7cc6:	4904      	ldr	r1, [pc, #16]	; (b7cd8 <_Z17acquireWireBufferv+0x28>)
	};
   b7cc8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7cca:	4628      	mov	r0, r5
   b7ccc:	f000 f8e5 	bl	b7e9a <_ZnajRKSt9nothrow_t>
	};
   b7cd0:	60e0      	str	r0, [r4, #12]
}
   b7cd2:	4620      	mov	r0, r4
   b7cd4:	bd38      	pop	{r3, r4, r5, pc}
   b7cd6:	bf00      	nop
   b7cd8:	000b923c 	.word	0x000b923c

000b7cdc <_Z19__fetch_global_Wirev>:
{
   b7cdc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7cde:	4d0e      	ldr	r5, [pc, #56]	; (b7d18 <_Z19__fetch_global_Wirev+0x3c>)
   b7ce0:	7829      	ldrb	r1, [r5, #0]
   b7ce2:	f3bf 8f5b 	dmb	ish
   b7ce6:	f011 0401 	ands.w	r4, r1, #1
{
   b7cea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7cec:	d111      	bne.n	b7d12 <_Z19__fetch_global_Wirev+0x36>
   b7cee:	4628      	mov	r0, r5
   b7cf0:	f7fc f9e2 	bl	b40b8 <__cxa_guard_acquire>
   b7cf4:	b168      	cbz	r0, b7d12 <_Z19__fetch_global_Wirev+0x36>
   b7cf6:	a801      	add	r0, sp, #4
   b7cf8:	f7ff ffda 	bl	b7cb0 <_Z17acquireWireBufferv>
   b7cfc:	aa01      	add	r2, sp, #4
   b7cfe:	4621      	mov	r1, r4
   b7d00:	4806      	ldr	r0, [pc, #24]	; (b7d1c <_Z19__fetch_global_Wirev+0x40>)
   b7d02:	f7fe f983 	bl	b600c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7d06:	4628      	mov	r0, r5
   b7d08:	f7fc f9db 	bl	b40c2 <__cxa_guard_release>
   b7d0c:	4804      	ldr	r0, [pc, #16]	; (b7d20 <_Z19__fetch_global_Wirev+0x44>)
   b7d0e:	f000 f9db 	bl	b80c8 <atexit>
	return wire;
}
   b7d12:	4802      	ldr	r0, [pc, #8]	; (b7d1c <_Z19__fetch_global_Wirev+0x40>)
   b7d14:	b007      	add	sp, #28
   b7d16:	bd30      	pop	{r4, r5, pc}
   b7d18:	2003e72c 	.word	0x2003e72c
   b7d1c:	2003e730 	.word	0x2003e730
   b7d20:	000b7cad 	.word	0x000b7cad

000b7d24 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d24:	4770      	bx	lr
	...

000b7d28 <_Z20acquireSerial1Bufferv>:
{
   b7d28:	b538      	push	{r3, r4, r5, lr}
   b7d2a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7d2c:	2514      	movs	r5, #20
   b7d2e:	462a      	mov	r2, r5
   b7d30:	2100      	movs	r1, #0
   b7d32:	f000 fa07 	bl	b8144 <memset>
   b7d36:	8025      	strh	r5, [r4, #0]
   b7d38:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d3a:	4907      	ldr	r1, [pc, #28]	; (b7d58 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7d3c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d3e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7d40:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d42:	f000 f8aa 	bl	b7e9a <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d46:	4904      	ldr	r1, [pc, #16]	; (b7d58 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7d48:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d4a:	4628      	mov	r0, r5
   b7d4c:	f000 f8a5 	bl	b7e9a <_ZnajRKSt9nothrow_t>
    };
   b7d50:	60e0      	str	r0, [r4, #12]
}
   b7d52:	4620      	mov	r0, r4
   b7d54:	bd38      	pop	{r3, r4, r5, pc}
   b7d56:	bf00      	nop
   b7d58:	000b923c 	.word	0x000b923c

000b7d5c <_Z22__fetch_global_Serial1v>:
{
   b7d5c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d5e:	4d0e      	ldr	r5, [pc, #56]	; (b7d98 <_Z22__fetch_global_Serial1v+0x3c>)
   b7d60:	7829      	ldrb	r1, [r5, #0]
   b7d62:	f3bf 8f5b 	dmb	ish
   b7d66:	f011 0401 	ands.w	r4, r1, #1
{
   b7d6a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d6c:	d111      	bne.n	b7d92 <_Z22__fetch_global_Serial1v+0x36>
   b7d6e:	4628      	mov	r0, r5
   b7d70:	f7fc f9a2 	bl	b40b8 <__cxa_guard_acquire>
   b7d74:	b168      	cbz	r0, b7d92 <_Z22__fetch_global_Serial1v+0x36>
   b7d76:	a801      	add	r0, sp, #4
   b7d78:	f7ff ffd6 	bl	b7d28 <_Z20acquireSerial1Bufferv>
   b7d7c:	aa01      	add	r2, sp, #4
   b7d7e:	4621      	mov	r1, r4
   b7d80:	4806      	ldr	r0, [pc, #24]	; (b7d9c <_Z22__fetch_global_Serial1v+0x40>)
   b7d82:	f7fe f903 	bl	b5f8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7d86:	4628      	mov	r0, r5
   b7d88:	f7fc f99b 	bl	b40c2 <__cxa_guard_release>
   b7d8c:	4804      	ldr	r0, [pc, #16]	; (b7da0 <_Z22__fetch_global_Serial1v+0x44>)
   b7d8e:	f000 f99b 	bl	b80c8 <atexit>
    return serial1;
}
   b7d92:	4802      	ldr	r0, [pc, #8]	; (b7d9c <_Z22__fetch_global_Serial1v+0x40>)
   b7d94:	b007      	add	sp, #28
   b7d96:	bd30      	pop	{r4, r5, pc}
   b7d98:	2003e748 	.word	0x2003e748
   b7d9c:	2003e74c 	.word	0x2003e74c
   b7da0:	000b7d25 	.word	0x000b7d25

000b7da4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7da4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7da6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7da8:	d902      	bls.n	b7db0 <pinAvailable+0xc>
    return false;
   b7daa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7dac:	b002      	add	sp, #8
   b7dae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7db0:	f1a0 030b 	sub.w	r3, r0, #11
   b7db4:	2b02      	cmp	r3, #2
   b7db6:	d81a      	bhi.n	b7dee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7db8:	4c17      	ldr	r4, [pc, #92]	; (b7e18 <pinAvailable+0x74>)
   b7dba:	7821      	ldrb	r1, [r4, #0]
   b7dbc:	f3bf 8f5b 	dmb	ish
   b7dc0:	f011 0101 	ands.w	r1, r1, #1
   b7dc4:	d10b      	bne.n	b7dde <pinAvailable+0x3a>
   b7dc6:	4620      	mov	r0, r4
   b7dc8:	9101      	str	r1, [sp, #4]
   b7dca:	f7fc f975 	bl	b40b8 <__cxa_guard_acquire>
   b7dce:	9901      	ldr	r1, [sp, #4]
   b7dd0:	b128      	cbz	r0, b7dde <pinAvailable+0x3a>
   b7dd2:	4812      	ldr	r0, [pc, #72]	; (b7e1c <pinAvailable+0x78>)
   b7dd4:	f7ff fe80 	bl	b7ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7dd8:	4620      	mov	r0, r4
   b7dda:	f7fc f972 	bl	b40c2 <__cxa_guard_release>
   b7dde:	4b0f      	ldr	r3, [pc, #60]	; (b7e1c <pinAvailable+0x78>)
   b7de0:	7818      	ldrb	r0, [r3, #0]
   b7de2:	f7fd fd31 	bl	b5848 <hal_spi_is_enabled>
   b7de6:	2800      	cmp	r0, #0
   b7de8:	d1df      	bne.n	b7daa <pinAvailable+0x6>
  return true; // 'pin' is available
   b7dea:	2001      	movs	r0, #1
   b7dec:	e7de      	b.n	b7dac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7dee:	2801      	cmp	r0, #1
   b7df0:	d809      	bhi.n	b7e06 <pinAvailable+0x62>
   b7df2:	f7ff ff73 	bl	b7cdc <_Z19__fetch_global_Wirev>
   b7df6:	2100      	movs	r1, #0
   b7df8:	7c00      	ldrb	r0, [r0, #16]
   b7dfa:	f7fd fcfd 	bl	b57f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7dfe:	f080 0001 	eor.w	r0, r0, #1
   b7e02:	b2c0      	uxtb	r0, r0
   b7e04:	e7d2      	b.n	b7dac <pinAvailable+0x8>
   b7e06:	3809      	subs	r0, #9
   b7e08:	2801      	cmp	r0, #1
   b7e0a:	d8ee      	bhi.n	b7dea <pinAvailable+0x46>
   b7e0c:	f7ff ffa6 	bl	b7d5c <_Z22__fetch_global_Serial1v>
   b7e10:	7c00      	ldrb	r0, [r0, #16]
   b7e12:	f7fd fd69 	bl	b58e8 <hal_usart_is_enabled>
   b7e16:	e7f2      	b.n	b7dfe <pinAvailable+0x5a>
   b7e18:	2003e6b0 	.word	0x2003e6b0
   b7e1c:	2003e6b4 	.word	0x2003e6b4

000b7e20 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e20:	2823      	cmp	r0, #35	; 0x23
{
   b7e22:	b538      	push	{r3, r4, r5, lr}
   b7e24:	4604      	mov	r4, r0
   b7e26:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e28:	d80a      	bhi.n	b7e40 <pinMode+0x20>
   b7e2a:	29ff      	cmp	r1, #255	; 0xff
   b7e2c:	d008      	beq.n	b7e40 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7e2e:	f7ff ffb9 	bl	b7da4 <pinAvailable>
   b7e32:	b128      	cbz	r0, b7e40 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7e34:	4629      	mov	r1, r5
   b7e36:	4620      	mov	r0, r4
}
   b7e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7e3c:	f7fd be38 	b.w	b5ab0 <HAL_Pin_Mode>
}
   b7e40:	bd38      	pop	{r3, r4, r5, pc}

000b7e42 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7e42:	b538      	push	{r3, r4, r5, lr}
   b7e44:	4604      	mov	r4, r0
   b7e46:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7e48:	f7fd fe3a 	bl	b5ac0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7e4c:	28ff      	cmp	r0, #255	; 0xff
   b7e4e:	d010      	beq.n	b7e72 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7e50:	2806      	cmp	r0, #6
   b7e52:	d804      	bhi.n	b7e5e <digitalWrite+0x1c>
   b7e54:	234d      	movs	r3, #77	; 0x4d
   b7e56:	fa23 f000 	lsr.w	r0, r3, r0
   b7e5a:	07c3      	lsls	r3, r0, #31
   b7e5c:	d409      	bmi.n	b7e72 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7e5e:	4620      	mov	r0, r4
   b7e60:	f7ff ffa0 	bl	b7da4 <pinAvailable>
   b7e64:	b128      	cbz	r0, b7e72 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7e66:	4629      	mov	r1, r5
   b7e68:	4620      	mov	r0, r4
}
   b7e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7e6e:	f7fd be2f 	b.w	b5ad0 <HAL_GPIO_Write>
}
   b7e72:	bd38      	pop	{r3, r4, r5, pc}

000b7e74 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7e74:	b510      	push	{r4, lr}
   b7e76:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7e78:	f7fd fe22 	bl	b5ac0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7e7c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7e7e:	b2db      	uxtb	r3, r3
   b7e80:	2b01      	cmp	r3, #1
   b7e82:	d908      	bls.n	b7e96 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7e84:	4620      	mov	r0, r4
   b7e86:	f7ff ff8d 	bl	b7da4 <pinAvailable>
   b7e8a:	b120      	cbz	r0, b7e96 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7e8c:	4620      	mov	r0, r4
}
   b7e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7e92:	f7fd be25 	b.w	b5ae0 <HAL_GPIO_Read>
}
   b7e96:	2000      	movs	r0, #0
   b7e98:	bd10      	pop	{r4, pc}

000b7e9a <_ZnajRKSt9nothrow_t>:
   b7e9a:	f7fc b8fc 	b.w	b4096 <_Znaj>

000b7e9e <_ZSt25__throw_bad_function_callv>:
   b7e9e:	b508      	push	{r3, lr}
   b7ea0:	f7fd ff12 	bl	b5cc8 <abort>

000b7ea4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7ea4:	4901      	ldr	r1, [pc, #4]	; (b7eac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7ea6:	f000 b8f9 	b.w	b809c <_ZNKSt9type_infoeqERKS_>
   b7eaa:	bf00      	nop
   b7eac:	000b9258 	.word	0x000b9258

000b7eb0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7eb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7eb2:	2400      	movs	r4, #0
   b7eb4:	2310      	movs	r3, #16
   b7eb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7eba:	6803      	ldr	r3, [r0, #0]
   b7ebc:	4615      	mov	r5, r2
   b7ebe:	699e      	ldr	r6, [r3, #24]
   b7ec0:	6812      	ldr	r2, [r2, #0]
   b7ec2:	466b      	mov	r3, sp
   b7ec4:	e9cd 4400 	strd	r4, r4, [sp]
   b7ec8:	47b0      	blx	r6
   b7eca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7ece:	f003 0306 	and.w	r3, r3, #6
   b7ed2:	2b06      	cmp	r3, #6
   b7ed4:	bf03      	ittte	eq
   b7ed6:	9b00      	ldreq	r3, [sp, #0]
   b7ed8:	602b      	streq	r3, [r5, #0]
   b7eda:	2001      	moveq	r0, #1
   b7edc:	4620      	movne	r0, r4
   b7ede:	b004      	add	sp, #16
   b7ee0:	bd70      	pop	{r4, r5, r6, pc}

000b7ee2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7ee2:	9800      	ldr	r0, [sp, #0]
   b7ee4:	4290      	cmp	r0, r2
   b7ee6:	bf14      	ite	ne
   b7ee8:	2001      	movne	r0, #1
   b7eea:	2006      	moveq	r0, #6
   b7eec:	4770      	bx	lr
	...

000b7ef0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7ef0:	b510      	push	{r4, lr}
   b7ef2:	4b03      	ldr	r3, [pc, #12]	; (b7f00 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7ef4:	6003      	str	r3, [r0, #0]
   b7ef6:	4604      	mov	r4, r0
   b7ef8:	f000 f8cd 	bl	b8096 <_ZNSt9type_infoD1Ev>
   b7efc:	4620      	mov	r0, r4
   b7efe:	bd10      	pop	{r4, pc}
   b7f00:	000b9298 	.word	0x000b9298

000b7f04 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7f04:	b510      	push	{r4, lr}
   b7f06:	4604      	mov	r4, r0
   b7f08:	f7ff fff2 	bl	b7ef0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7f0c:	4620      	mov	r0, r4
   b7f0e:	2108      	movs	r1, #8
   b7f10:	f7fc f8c3 	bl	b409a <_ZdlPvj>
   b7f14:	4620      	mov	r0, r4
   b7f16:	bd10      	pop	{r4, pc}

000b7f18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f1c:	461f      	mov	r7, r3
   b7f1e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7f22:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7f26:	4598      	cmp	r8, r3
   b7f28:	4606      	mov	r6, r0
   b7f2a:	4615      	mov	r5, r2
   b7f2c:	d107      	bne.n	b7f3e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7f2e:	9907      	ldr	r1, [sp, #28]
   b7f30:	f000 f8b4 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b7f34:	b118      	cbz	r0, b7f3e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7f36:	7165      	strb	r5, [r4, #5]
   b7f38:	2000      	movs	r0, #0
   b7f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7f3e:	4639      	mov	r1, r7
   b7f40:	4630      	mov	r0, r6
   b7f42:	f000 f8ab 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b7f46:	2800      	cmp	r0, #0
   b7f48:	d0f6      	beq.n	b7f38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7f4a:	2301      	movs	r3, #1
   b7f4c:	f8c4 8000 	str.w	r8, [r4]
   b7f50:	7125      	strb	r5, [r4, #4]
   b7f52:	71a3      	strb	r3, [r4, #6]
   b7f54:	e7f0      	b.n	b7f38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7f56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7f56:	b538      	push	{r3, r4, r5, lr}
   b7f58:	4615      	mov	r5, r2
   b7f5a:	461c      	mov	r4, r3
   b7f5c:	f000 f89e 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b7f60:	b120      	cbz	r0, b7f6c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7f62:	2308      	movs	r3, #8
   b7f64:	60e3      	str	r3, [r4, #12]
   b7f66:	2306      	movs	r3, #6
   b7f68:	6025      	str	r5, [r4, #0]
   b7f6a:	7123      	strb	r3, [r4, #4]
   b7f6c:	bd38      	pop	{r3, r4, r5, pc}

000b7f6e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f70:	4605      	mov	r5, r0
   b7f72:	460c      	mov	r4, r1
   b7f74:	9201      	str	r2, [sp, #4]
   b7f76:	461e      	mov	r6, r3
   b7f78:	f000 f890 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b7f7c:	b950      	cbnz	r0, b7f94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7f7e:	2e03      	cmp	r6, #3
   b7f80:	d808      	bhi.n	b7f94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7f82:	6823      	ldr	r3, [r4, #0]
   b7f84:	9a01      	ldr	r2, [sp, #4]
   b7f86:	695b      	ldr	r3, [r3, #20]
   b7f88:	4629      	mov	r1, r5
   b7f8a:	4620      	mov	r0, r4
   b7f8c:	b002      	add	sp, #8
   b7f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7f92:	4718      	bx	r3
   b7f94:	b002      	add	sp, #8
   b7f96:	bd70      	pop	{r4, r5, r6, pc}

000b7f98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7f98:	b510      	push	{r4, lr}
   b7f9a:	4b03      	ldr	r3, [pc, #12]	; (b7fa8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7f9c:	6003      	str	r3, [r0, #0]
   b7f9e:	4604      	mov	r4, r0
   b7fa0:	f7ff ffa6 	bl	b7ef0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7fa4:	4620      	mov	r0, r4
   b7fa6:	bd10      	pop	{r4, pc}
   b7fa8:	000b92f8 	.word	0x000b92f8

000b7fac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7fac:	b510      	push	{r4, lr}
   b7fae:	4604      	mov	r4, r0
   b7fb0:	f7ff fff2 	bl	b7f98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	210c      	movs	r1, #12
   b7fb8:	f7fc f86f 	bl	b409a <_ZdlPvj>
   b7fbc:	4620      	mov	r0, r4
   b7fbe:	bd10      	pop	{r4, pc}

000b7fc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7fc2:	9f08      	ldr	r7, [sp, #32]
   b7fc4:	4297      	cmp	r7, r2
   b7fc6:	4605      	mov	r5, r0
   b7fc8:	460e      	mov	r6, r1
   b7fca:	4614      	mov	r4, r2
   b7fcc:	d00a      	beq.n	b7fe4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7fce:	68a8      	ldr	r0, [r5, #8]
   b7fd0:	6802      	ldr	r2, [r0, #0]
   b7fd2:	9708      	str	r7, [sp, #32]
   b7fd4:	6a15      	ldr	r5, [r2, #32]
   b7fd6:	4631      	mov	r1, r6
   b7fd8:	4622      	mov	r2, r4
   b7fda:	46ac      	mov	ip, r5
   b7fdc:	b003      	add	sp, #12
   b7fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7fe2:	4760      	bx	ip
   b7fe4:	4619      	mov	r1, r3
   b7fe6:	9301      	str	r3, [sp, #4]
   b7fe8:	f000 f858 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b7fec:	9b01      	ldr	r3, [sp, #4]
   b7fee:	2800      	cmp	r0, #0
   b7ff0:	d0ed      	beq.n	b7fce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7ff2:	2006      	movs	r0, #6
   b7ff4:	b003      	add	sp, #12
   b7ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ff8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7ff8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ffc:	460d      	mov	r5, r1
   b7ffe:	4619      	mov	r1, r3
   b8000:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8004:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8008:	4681      	mov	r9, r0
   b800a:	4617      	mov	r7, r2
   b800c:	4698      	mov	r8, r3
   b800e:	f000 f845 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b8012:	b190      	cbz	r0, b803a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8014:	2d00      	cmp	r5, #0
   b8016:	6034      	str	r4, [r6, #0]
   b8018:	7137      	strb	r7, [r6, #4]
   b801a:	db09      	blt.n	b8030 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b801c:	1961      	adds	r1, r4, r5
   b801e:	458a      	cmp	sl, r1
   b8020:	bf0c      	ite	eq
   b8022:	2106      	moveq	r1, #6
   b8024:	2101      	movne	r1, #1
   b8026:	71b1      	strb	r1, [r6, #6]
   b8028:	2000      	movs	r0, #0
   b802a:	b001      	add	sp, #4
   b802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8030:	3502      	adds	r5, #2
   b8032:	d1f9      	bne.n	b8028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8034:	2301      	movs	r3, #1
   b8036:	71b3      	strb	r3, [r6, #6]
   b8038:	e7f6      	b.n	b8028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b803a:	4554      	cmp	r4, sl
   b803c:	d106      	bne.n	b804c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b803e:	4659      	mov	r1, fp
   b8040:	4648      	mov	r0, r9
   b8042:	f000 f82b 	bl	b809c <_ZNKSt9type_infoeqERKS_>
   b8046:	b108      	cbz	r0, b804c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8048:	7177      	strb	r7, [r6, #5]
   b804a:	e7ed      	b.n	b8028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b804c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8050:	6803      	ldr	r3, [r0, #0]
   b8052:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8056:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b805a:	69dc      	ldr	r4, [r3, #28]
   b805c:	463a      	mov	r2, r7
   b805e:	4643      	mov	r3, r8
   b8060:	4629      	mov	r1, r5
   b8062:	46a4      	mov	ip, r4
   b8064:	b001      	add	sp, #4
   b8066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b806a:	4760      	bx	ip

000b806c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8070:	4607      	mov	r7, r0
   b8072:	460c      	mov	r4, r1
   b8074:	4615      	mov	r5, r2
   b8076:	461e      	mov	r6, r3
   b8078:	f7ff ff6d 	bl	b7f56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b807c:	b948      	cbnz	r0, b8092 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b807e:	68b8      	ldr	r0, [r7, #8]
   b8080:	6803      	ldr	r3, [r0, #0]
   b8082:	699f      	ldr	r7, [r3, #24]
   b8084:	462a      	mov	r2, r5
   b8086:	4633      	mov	r3, r6
   b8088:	4621      	mov	r1, r4
   b808a:	46bc      	mov	ip, r7
   b808c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8090:	4760      	bx	ip
   b8092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8096 <_ZNSt9type_infoD1Ev>:
   b8096:	4770      	bx	lr

000b8098 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8098:	2000      	movs	r0, #0
   b809a:	4770      	bx	lr

000b809c <_ZNKSt9type_infoeqERKS_>:
   b809c:	4281      	cmp	r1, r0
   b809e:	b508      	push	{r3, lr}
   b80a0:	d00e      	beq.n	b80c0 <_ZNKSt9type_infoeqERKS_+0x24>
   b80a2:	6840      	ldr	r0, [r0, #4]
   b80a4:	7803      	ldrb	r3, [r0, #0]
   b80a6:	2b2a      	cmp	r3, #42	; 0x2a
   b80a8:	d00c      	beq.n	b80c4 <_ZNKSt9type_infoeqERKS_+0x28>
   b80aa:	6849      	ldr	r1, [r1, #4]
   b80ac:	780b      	ldrb	r3, [r1, #0]
   b80ae:	2b2a      	cmp	r3, #42	; 0x2a
   b80b0:	bf08      	it	eq
   b80b2:	3101      	addeq	r1, #1
   b80b4:	f000 f87c 	bl	b81b0 <strcmp>
   b80b8:	fab0 f080 	clz	r0, r0
   b80bc:	0940      	lsrs	r0, r0, #5
   b80be:	bd08      	pop	{r3, pc}
   b80c0:	2001      	movs	r0, #1
   b80c2:	e7fc      	b.n	b80be <_ZNKSt9type_infoeqERKS_+0x22>
   b80c4:	2000      	movs	r0, #0
   b80c6:	e7fa      	b.n	b80be <_ZNKSt9type_infoeqERKS_+0x22>

000b80c8 <atexit>:
   b80c8:	2300      	movs	r3, #0
   b80ca:	4601      	mov	r1, r0
   b80cc:	461a      	mov	r2, r3
   b80ce:	4618      	mov	r0, r3
   b80d0:	f000 b8a0 	b.w	b8214 <__register_exitproc>

000b80d4 <memcmp>:
   b80d4:	b510      	push	{r4, lr}
   b80d6:	3901      	subs	r1, #1
   b80d8:	4402      	add	r2, r0
   b80da:	4290      	cmp	r0, r2
   b80dc:	d101      	bne.n	b80e2 <memcmp+0xe>
   b80de:	2000      	movs	r0, #0
   b80e0:	e005      	b.n	b80ee <memcmp+0x1a>
   b80e2:	7803      	ldrb	r3, [r0, #0]
   b80e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b80e8:	42a3      	cmp	r3, r4
   b80ea:	d001      	beq.n	b80f0 <memcmp+0x1c>
   b80ec:	1b18      	subs	r0, r3, r4
   b80ee:	bd10      	pop	{r4, pc}
   b80f0:	3001      	adds	r0, #1
   b80f2:	e7f2      	b.n	b80da <memcmp+0x6>

000b80f4 <memcpy>:
   b80f4:	440a      	add	r2, r1
   b80f6:	4291      	cmp	r1, r2
   b80f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b80fc:	d100      	bne.n	b8100 <memcpy+0xc>
   b80fe:	4770      	bx	lr
   b8100:	b510      	push	{r4, lr}
   b8102:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8106:	f803 4f01 	strb.w	r4, [r3, #1]!
   b810a:	4291      	cmp	r1, r2
   b810c:	d1f9      	bne.n	b8102 <memcpy+0xe>
   b810e:	bd10      	pop	{r4, pc}

000b8110 <memmove>:
   b8110:	4288      	cmp	r0, r1
   b8112:	b510      	push	{r4, lr}
   b8114:	eb01 0402 	add.w	r4, r1, r2
   b8118:	d902      	bls.n	b8120 <memmove+0x10>
   b811a:	4284      	cmp	r4, r0
   b811c:	4623      	mov	r3, r4
   b811e:	d807      	bhi.n	b8130 <memmove+0x20>
   b8120:	1e43      	subs	r3, r0, #1
   b8122:	42a1      	cmp	r1, r4
   b8124:	d008      	beq.n	b8138 <memmove+0x28>
   b8126:	f811 2b01 	ldrb.w	r2, [r1], #1
   b812a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b812e:	e7f8      	b.n	b8122 <memmove+0x12>
   b8130:	4402      	add	r2, r0
   b8132:	4601      	mov	r1, r0
   b8134:	428a      	cmp	r2, r1
   b8136:	d100      	bne.n	b813a <memmove+0x2a>
   b8138:	bd10      	pop	{r4, pc}
   b813a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b813e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8142:	e7f7      	b.n	b8134 <memmove+0x24>

000b8144 <memset>:
   b8144:	4402      	add	r2, r0
   b8146:	4603      	mov	r3, r0
   b8148:	4293      	cmp	r3, r2
   b814a:	d100      	bne.n	b814e <memset+0xa>
   b814c:	4770      	bx	lr
   b814e:	f803 1b01 	strb.w	r1, [r3], #1
   b8152:	e7f9      	b.n	b8148 <memset+0x4>

000b8154 <srand>:
   b8154:	b538      	push	{r3, r4, r5, lr}
   b8156:	4b10      	ldr	r3, [pc, #64]	; (b8198 <srand+0x44>)
   b8158:	681d      	ldr	r5, [r3, #0]
   b815a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b815c:	4604      	mov	r4, r0
   b815e:	b9b3      	cbnz	r3, b818e <srand+0x3a>
   b8160:	2018      	movs	r0, #24
   b8162:	f7fd fd91 	bl	b5c88 <malloc>
   b8166:	4602      	mov	r2, r0
   b8168:	63a8      	str	r0, [r5, #56]	; 0x38
   b816a:	b920      	cbnz	r0, b8176 <srand+0x22>
   b816c:	4b0b      	ldr	r3, [pc, #44]	; (b819c <srand+0x48>)
   b816e:	480c      	ldr	r0, [pc, #48]	; (b81a0 <srand+0x4c>)
   b8170:	2142      	movs	r1, #66	; 0x42
   b8172:	f7fd fdb1 	bl	b5cd8 <__assert_func>
   b8176:	490b      	ldr	r1, [pc, #44]	; (b81a4 <srand+0x50>)
   b8178:	4b0b      	ldr	r3, [pc, #44]	; (b81a8 <srand+0x54>)
   b817a:	e9c0 1300 	strd	r1, r3, [r0]
   b817e:	4b0b      	ldr	r3, [pc, #44]	; (b81ac <srand+0x58>)
   b8180:	6083      	str	r3, [r0, #8]
   b8182:	230b      	movs	r3, #11
   b8184:	8183      	strh	r3, [r0, #12]
   b8186:	2100      	movs	r1, #0
   b8188:	2001      	movs	r0, #1
   b818a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b818e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8190:	2200      	movs	r2, #0
   b8192:	611c      	str	r4, [r3, #16]
   b8194:	615a      	str	r2, [r3, #20]
   b8196:	bd38      	pop	{r3, r4, r5, pc}
   b8198:	2003e574 	.word	0x2003e574
   b819c:	000b9331 	.word	0x000b9331
   b81a0:	000b9348 	.word	0x000b9348
   b81a4:	abcd330e 	.word	0xabcd330e
   b81a8:	e66d1234 	.word	0xe66d1234
   b81ac:	0005deec 	.word	0x0005deec

000b81b0 <strcmp>:
   b81b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b81b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b81b8:	2a01      	cmp	r2, #1
   b81ba:	bf28      	it	cs
   b81bc:	429a      	cmpcs	r2, r3
   b81be:	d0f7      	beq.n	b81b0 <strcmp>
   b81c0:	1ad0      	subs	r0, r2, r3
   b81c2:	4770      	bx	lr

000b81c4 <strlen>:
   b81c4:	4603      	mov	r3, r0
   b81c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b81ca:	2a00      	cmp	r2, #0
   b81cc:	d1fb      	bne.n	b81c6 <strlen+0x2>
   b81ce:	1a18      	subs	r0, r3, r0
   b81d0:	3801      	subs	r0, #1
   b81d2:	4770      	bx	lr

000b81d4 <strncpy>:
   b81d4:	b510      	push	{r4, lr}
   b81d6:	3901      	subs	r1, #1
   b81d8:	4603      	mov	r3, r0
   b81da:	b132      	cbz	r2, b81ea <strncpy+0x16>
   b81dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b81e0:	f803 4b01 	strb.w	r4, [r3], #1
   b81e4:	3a01      	subs	r2, #1
   b81e6:	2c00      	cmp	r4, #0
   b81e8:	d1f7      	bne.n	b81da <strncpy+0x6>
   b81ea:	441a      	add	r2, r3
   b81ec:	2100      	movs	r1, #0
   b81ee:	4293      	cmp	r3, r2
   b81f0:	d100      	bne.n	b81f4 <strncpy+0x20>
   b81f2:	bd10      	pop	{r4, pc}
   b81f4:	f803 1b01 	strb.w	r1, [r3], #1
   b81f8:	e7f9      	b.n	b81ee <strncpy+0x1a>

000b81fa <strnlen>:
   b81fa:	b510      	push	{r4, lr}
   b81fc:	4602      	mov	r2, r0
   b81fe:	4401      	add	r1, r0
   b8200:	428a      	cmp	r2, r1
   b8202:	4613      	mov	r3, r2
   b8204:	d003      	beq.n	b820e <strnlen+0x14>
   b8206:	781c      	ldrb	r4, [r3, #0]
   b8208:	3201      	adds	r2, #1
   b820a:	2c00      	cmp	r4, #0
   b820c:	d1f8      	bne.n	b8200 <strnlen+0x6>
   b820e:	1a18      	subs	r0, r3, r0
   b8210:	bd10      	pop	{r4, pc}
	...

000b8214 <__register_exitproc>:
   b8214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8218:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b82d4 <__register_exitproc+0xc0>
   b821c:	4606      	mov	r6, r0
   b821e:	f8d8 0000 	ldr.w	r0, [r8]
   b8222:	461f      	mov	r7, r3
   b8224:	460d      	mov	r5, r1
   b8226:	4691      	mov	r9, r2
   b8228:	f000 f856 	bl	b82d8 <__retarget_lock_acquire_recursive>
   b822c:	4b25      	ldr	r3, [pc, #148]	; (b82c4 <__register_exitproc+0xb0>)
   b822e:	681c      	ldr	r4, [r3, #0]
   b8230:	b934      	cbnz	r4, b8240 <__register_exitproc+0x2c>
   b8232:	4c25      	ldr	r4, [pc, #148]	; (b82c8 <__register_exitproc+0xb4>)
   b8234:	601c      	str	r4, [r3, #0]
   b8236:	4b25      	ldr	r3, [pc, #148]	; (b82cc <__register_exitproc+0xb8>)
   b8238:	b113      	cbz	r3, b8240 <__register_exitproc+0x2c>
   b823a:	681b      	ldr	r3, [r3, #0]
   b823c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8240:	6863      	ldr	r3, [r4, #4]
   b8242:	2b1f      	cmp	r3, #31
   b8244:	dd07      	ble.n	b8256 <__register_exitproc+0x42>
   b8246:	f8d8 0000 	ldr.w	r0, [r8]
   b824a:	f000 f847 	bl	b82dc <__retarget_lock_release_recursive>
   b824e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8256:	b34e      	cbz	r6, b82ac <__register_exitproc+0x98>
   b8258:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b825c:	b988      	cbnz	r0, b8282 <__register_exitproc+0x6e>
   b825e:	4b1c      	ldr	r3, [pc, #112]	; (b82d0 <__register_exitproc+0xbc>)
   b8260:	b923      	cbnz	r3, b826c <__register_exitproc+0x58>
   b8262:	f8d8 0000 	ldr.w	r0, [r8]
   b8266:	f000 f838 	bl	b82da <__retarget_lock_release>
   b826a:	e7f0      	b.n	b824e <__register_exitproc+0x3a>
   b826c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8270:	f7fd fd0a 	bl	b5c88 <malloc>
   b8274:	2800      	cmp	r0, #0
   b8276:	d0f4      	beq.n	b8262 <__register_exitproc+0x4e>
   b8278:	2300      	movs	r3, #0
   b827a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b827e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8282:	6863      	ldr	r3, [r4, #4]
   b8284:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8288:	2201      	movs	r2, #1
   b828a:	409a      	lsls	r2, r3
   b828c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8290:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8294:	4313      	orrs	r3, r2
   b8296:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b829a:	2e02      	cmp	r6, #2
   b829c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b82a0:	bf02      	ittt	eq
   b82a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b82a6:	4313      	orreq	r3, r2
   b82a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b82ac:	6863      	ldr	r3, [r4, #4]
   b82ae:	f8d8 0000 	ldr.w	r0, [r8]
   b82b2:	1c5a      	adds	r2, r3, #1
   b82b4:	3302      	adds	r3, #2
   b82b6:	6062      	str	r2, [r4, #4]
   b82b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b82bc:	f000 f80e 	bl	b82dc <__retarget_lock_release_recursive>
   b82c0:	2000      	movs	r0, #0
   b82c2:	e7c6      	b.n	b8252 <__register_exitproc+0x3e>
   b82c4:	2003e7ec 	.word	0x2003e7ec
   b82c8:	2003e760 	.word	0x2003e760
   b82cc:	00000000 	.word	0x00000000
   b82d0:	000b5c89 	.word	0x000b5c89
   b82d4:	2003e5d8 	.word	0x2003e5d8

000b82d8 <__retarget_lock_acquire_recursive>:
   b82d8:	4770      	bx	lr

000b82da <__retarget_lock_release>:
   b82da:	4770      	bx	lr

000b82dc <__retarget_lock_release_recursive>:
   b82dc:	4770      	bx	lr

000b82de <link_code_end>:
	...

000b82e0 <dynalib_user>:
   b82e0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b82f0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8300:	7620 7269 7574 6c61 6d00 7861 6d69 7375      virtual.maximus
   b8310:	6300 6e6f 656e 7463 6465 4800 6c65 6f6c     .connected.Hello
   b8320:	0a21 6100 7664 7265 6974 6973 676e 3600     !..advertising.6
   b8330:	3445 3030 3030 2d31 3542 3341 462d 3933     E400001-B5A3-F39
   b8340:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   b8350:	3941 0045 4536 3034 3030 3230 422d 4135     A9E.6E400002-B5A
   b8360:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   b8370:	3432 4344 4143 4539 3600 3445 3030 3030     24DCCA9E.6E40000
   b8380:	2d33 3542 3341 462d 3933 2d33 3045 3941     3-B5A3-F393-E0A9
   b8390:	452d 3035 3245 4434 4343 3941 0045 7874     -E50E24DCCA9E.tx
   b83a0:	7200 0078 3934 4800 6c65 006c 3834 6400     .rx.49.Hell.48.d
   b83b0:	6665 7561 746c 0020 534d 0042 534c 0042     efault .MSB.LSB.
   b83c0:	533c 4950 6553 7474 6e69 7367 6420 6665     <SPISettings def
   b83d0:	7561 746c 003e 533c 4950 6553 7474 6e69     ault>.<SPISettin
   b83e0:	7367 2520 2573 2075 7325 4d20 444f 2545     gs %s%u %s MODE%
   b83f0:	3e75 0000                                   u>..

000b83f4 <_ZTVN8particle11SPISettingsE>:
	...
   b83fc:	4531 000b 4415 000b 4417 000b               1E...D...D..

000b8408 <_ZL12splash1_data>:
   b8408:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b8418:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b8428:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b8438:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b8448:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8458:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8470:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8480:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b8490:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b84a0:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b84b0:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b84c0:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b84d0:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b84e0:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b84f0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b8500:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b8510:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b8520:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b8530:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b8540:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8550:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b8560:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b8570:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b8580:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b8598:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b85b0:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b85c0:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b85d0:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b85e0:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b85f0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b8600:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b8610:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b8620:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b8630:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b8640:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b8650:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b8660:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b8670:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b8680:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b8690:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b86a0:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b86b0:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b86c0:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b86c8 <_ZL12splash2_data>:
   b86c8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b86d8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b86e8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b8704:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b8714:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8724:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8734:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8744:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8754:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8764:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8774:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8784:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8794:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b87a4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b87b4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b87c4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b87d4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b87e4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b87f4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8804:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b8814:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8824:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8834:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8844:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b885c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b886c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b887c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b888c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b889c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b88a8 <_ZTV16Adafruit_SSD1306>:
	...
   b88b0:	4425 000b 443d 000b 55f9 000b 6449 000b     %D..=D...U..Id..
   b88c0:	4451 000b 4fff 000b 5001 000b 5033 000b     QD...O...P..3P..
   b88d0:	500f 000b 5021 000b 4f41 000b 4fff 000b     .P..!P..AO...O..
   b88e0:	522b 000b 465f 000b 4c07 000b 4bb9 000b     +R.._F...L...K..
   b88f0:	50c3 000b 5109 000b 5125 000b 51a9 000b     .P...Q..%Q...Q..

000b8900 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8900:	8000 e0c0 f8f0 fefc                         ........

000b8908 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b8908:	0100 0703 1f0f 7f3f                         ......?.

000b8910 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8910:	d5ae a880                                   ....

000b8914 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8914:	00d3 8d40                                   ..@.

000b8918 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b8918:	0020 c8a1                                    ...

000b891c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b891c:	40db a6a4 af2e                              .@....

000b8922 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8922:	02da 8f81                                   ....

000b8926 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b8926:	12da                                         ...

000b8929 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b8929:	02da                                         ...

000b892c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b892c:	0022 21ff 0000 0000                         "..!....

000b8934 <_ZTV16OledWingAdafruit>:
	...
   b893c:	4e2d 000b 4e4d 000b 55f9 000b 6449 000b     -N..MN...U..Id..
   b894c:	4451 000b 4fff 000b 5001 000b 5033 000b     QD...O...P..3P..
   b895c:	500f 000b 5021 000b 4f41 000b 4fff 000b     .P..!P..AO...O..
   b896c:	522b 000b 465f 000b 4c07 000b 4bb9 000b     +R.._F...L...K..
   b897c:	50c3 000b 5109 000b 5125 000b 51a9 000b     .P...Q..%Q...Q..

000b898c <_ZL4font>:
   b898c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b899c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b89ac:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b89bc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b89cc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b89dc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b89ec:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b89fc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8a0c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8a1c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8a2c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8a3c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8a4c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8a5c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8a6c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8a7c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8a8c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8a9c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8aac:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8abc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8acc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8adc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8aec:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8afc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8b0c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8b1c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8b2c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8b3c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8b4c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8b5c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8b6c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8b7c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8b8c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8b9c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8bac:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8bbc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8bcc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8bdc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8bec:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8bfc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8c0c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8c1c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8c2c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8c3c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8c4c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8c5c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8c6c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8c7c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8c8c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8c9c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8cac:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8cbc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8ccc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8cdc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8cec:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8cfc:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8d0c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8d1c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8d2c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8d3c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8d4c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8d5c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8d6c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8d7c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8d8c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8d9c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8dac:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8dbc:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8dcc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8ddc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8dec:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8dfc:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8e0c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8e1c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8e2c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8e3c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8e4c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8e5c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8e6c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8e7c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b8e8c <_ZTV12Adafruit_GFX>:
	...
   b8e9c:	55f9 000b 6449 000b 40a1 000b 4fff 000b     .U..Id...@...O..
   b8eac:	5001 000b 5033 000b 500f 000b 5021 000b     .P..3P...P..!P..
   b8ebc:	4f41 000b 4fff 000b 522b 000b 5229 000b     AO...O..+R..)R..
   b8ecc:	504b 000b 5089 000b 50c3 000b 5109 000b     KP...P...P...Q..
   b8edc:	5125 000b 51a9 000b                         %Q...Q..

000b8ee4 <_ZTVN5spark12NetworkClassE>:
	...
   b8eec:	5d31 000b 5d3b 000b 5d45 000b 5d4f 000b     1]..;]..E]..O]..
   b8efc:	5d59 000b 5d65 000b 5d71 000b 5d79 000b     Y]..e]..q]..y]..
   b8f0c:	5d81 000b 5d8d 000b 5d95 000b 5d9f 000b     .]...]...]...]..
   b8f1c:	5da9 000b                                   .]..

000b8f20 <_ZTVN5spark9WiFiClassE>:
	...
   b8f28:	5ef3 000b 5ee9 000b 5edf 000b 5e95 000b     .^...^...^...^..
   b8f38:	5ed3 000b 5ec7 000b 5d71 000b 5d79 000b     .^...^..q]..y]..
   b8f48:	5ebb 000b 5eb3 000b 5ea9 000b 5e9f 000b     .^...^...^...^..
   b8f58:	5da9 000b                                   .]..

000b8f5c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8f64 <_ZTV11USARTSerial>:
	...
   b8f6c:	5f11 000b 5f7d 000b 5f55 000b 6449 000b     ._..}_..U_..Id..
   b8f7c:	5f25 000b 5f41 000b 5f33 000b 5f4f 000b     %_..A_..3_..O_..
   b8f8c:	5f13 000b 5f17 000b                         ._..._..

000b8f94 <_ZTV7TwoWire>:
	...
   b8f9c:	5fb5 000b 5fff 000b 5fd7 000b 5fb7 000b     ._..._..._..._..
   b8fac:	5fdf 000b 5fe7 000b 5fef 000b 5ff7 000b     ._..._..._..._..

000b8fbc <_ZTV9USBSerial>:
	...
   b8fc4:	6087 000b 60ef 000b 60c5 000b 6449 000b     .`...`...`..Id..
   b8fd4:	60b7 000b 6089 000b 6099 000b 60e9 000b     .`...`...`...`..
   b8fe4:	60a9 000b 6081 000b                         .`...`..

000b8fec <_ZTV9IPAddress>:
	...
   b8ff4:	6191 000b 6181 000b 6183 000b 5925 252d     .a...a...a..%Y-%
   b9004:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b9014:	7361 7463 6d69 0065 7061 0070 7341 6573     asctime.app.Asse
   b9024:	7472 6f69 466e 6961 756c 6572 6620 6c61     rtionFailure fal
   b9034:	6573 7700 7269 6e69 2e67 6c62 0065 7453     se.wiring.ble.St
   b9044:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   b9054:	6573 7672 6369 7365 002e 7341 6573 7472     services..Assert
   b9064:	6f69 466e 6961 756c 6572 6820 6c61 625f     ionFailure hal_b
   b9074:	656c 735f 6174 6b63 695f 696e 2874 756e     le_stack_init(nu
   b9084:	6c6c 7470 2972 3d20 203d 5953 5453 4d45     llptr) == SYSTEM
   b9094:	455f 5252 524f 4e5f 4e4f 0045 6550 7265     _ERROR_NONE.Peer
   b90a4:	6420 7665 6369 2065 7369 6d20 7369 6973      device is missi
   b90b4:	676e 0021 6146 6c69 6465 7420 206f 7061     ng!.Failed to ap
   b90c4:	6570 646e 7020 6565 2072 6543 746e 6172     pend peer Centra
   b90d4:	206c 6564 6976 6563 002e 6f43 6e6e 6365     l device..Connec
   b90e4:	6574 2064 7962 4320 6e65 7274 6c61 6420     ted by Central d
   b90f4:	7665 6369 2e65 4400 7369 6f63 6e6e 6365     evice..Disconnec
   b9104:	6574 2064 7962 7220 6d65 746f 2065 6564     ted by remote de
   b9114:	6976 6563 002e 7544 6c70 6369 7461 6465     vice..Duplicated
   b9124:	6320 6168 6172 7463 7265 7369 6974 2063      characteristic 
   b9134:	6163 6e6e 746f 6220 2065 6461 6564 2e64     cannot be added.
   b9144:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   b9154:	2064 6f6c 6163 206c 6863 7261 6361 6574     d local characte
   b9164:	6972 7473 6369 002e                         ristic..

000b916c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9174:	6577 000b 65d9 000b 66ad 000b 6603 000b     we...e...f...f..
   b9184:	6579 000b                                   ye..

000b9188 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9190:	6573 000b 65e7 000b 6575 000b 6609 000b     se...e..ue...f..
   b91a0:	6599 000b                                   .e..

000b91a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b91ac:	6571 000b 65f5 000b 6e15 000b 660f 000b     qe...e...n...f..
   b91bc:	65b9 000b 0000 0000 0000 34fb 5f9b 0080     .e.........4._..
   b91cc:	8000 1000 0000 0000 0000                    ..........

000b91d6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b91d6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b91e6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b91e6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000b91f6 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b91f6:	0800 1810 2820 3830 0000                    .... (08..

000b9200 <_ZTVN5spark13EthernetClassE>:
	...
   b9208:	7c8f 000b 7c85 000b 7c7b 000b 7c71 000b     .|...|..{|..q|..
   b9218:	7c65 000b 7c59 000b 5d71 000b 5d79 000b     e|..Y|..q]..y]..
   b9228:	7c4d 000b 7c45 000b 7c3b 000b 7c31 000b     M|..E|..;|..1|..
   b9238:	5da9 000b                                   .]..

000b923c <_ZSt7nothrow>:
	...

000b923d <_ZTSSt19_Sp_make_shared_tag>:
   b923d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b924d:	6572 5f64 6174 0067 0000                     red_tag....

000b9258 <_ZTISt19_Sp_make_shared_tag>:
   b9258:	9298 000b 923d 000b                         ....=...

000b9260 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9260:	92f8 000b 926c 000b 931c 000b               ....l.......

000b926c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b926c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b927c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b928c:	0045 0000                                   E...

000b9290 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9290:	0000 0000 9260 000b 7ef1 000b 7f05 000b     ....`....~......
   b92a0:	8099 000b 8099 000b 7f6f 000b 7eb1 000b     ........o....~..
   b92b0:	7f57 000b 7f19 000b 7ee3 000b               W........~..

000b92bc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b92bc:	92f8 000b 92c8 000b 9260 000b               ........`...

000b92c8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b92c8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b92d8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b92e8:	666e 456f 0000 0000                         nfoE....

000b92f0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b92f0:	0000 0000 92bc 000b 7f99 000b 7fad 000b     ................
   b9300:	8099 000b 8099 000b 7f6f 000b 7eb1 000b     ........o....~..
   b9310:	806d 000b 7ff9 000b 7fc1 000b               m...........

000b931c <_ZTISt9type_info>:
   b931c:	9298 000b 9324 000b                         ....$...

000b9324 <_ZTSSt9type_info>:
   b9324:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9334:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9344:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9354:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9364:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9374:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9384:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9394:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b93a4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b93b4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b93c5 <link_const_variable_data_end>:
   b93c5:	00          	.byte	0x00
	...

000b93c8 <link_constructors_location>:
   b93c8:	000b424d 	.word	0x000b424d
   b93cc:	000b5e81 	.word	0x000b5e81
   b93d0:	000b5efd 	.word	0x000b5efd
   b93d4:	000b6419 	.word	0x000b6419
   b93d8:	000b6425 	.word	0x000b6425
   b93dc:	000b6439 	.word	0x000b6439
   b93e0:	000b78c9 	.word	0x000b78c9
   b93e4:	000b7aa9 	.word	0x000b7aa9
   b93e8:	000b7c99 	.word	0x000b7c99

000b93ec <link_constructors_end>:
   b93ec:	00000000 	.word	0x00000000
